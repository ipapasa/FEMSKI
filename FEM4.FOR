$NOFLOATCALLS
$DO66
      SUBROUTINE SLBEAM(ELCORD, ELOAD, ELSTIF, IPROP, JPROP, LCOEF,
     .	    LNODS, LNODZ, LNOMAX, LPOP, LVABZ, LVMAX, MAXTRS, NDIM, NEL,
     .	 NELZ, NEWRHS, NFIRST, NODMAX, NROWST, NSTRES, STRESM, VPROP)
$LARGE
C4246
C*** SEMILOOF BEAM STIFFNESS ETC. WITH REDUCTION FROM 21 TO 17 VARIABLES
C
C*** RE-WRITTEN BY BRUCE IRONS AND SOHRAB AHMAD, IN CALGARY, SPRING 1978
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ELCORD(9,4), ELOAD(LVMAX,NEWRHS), ELSTIF(LCOEF),
     .	 LNODS(LNOMAX,NELZ), STRESM(NROWST,MAXTRS), VPROP(IPROP,JPROP)
      COMMON/BEAMS/SIDE, WBEAM(12,27), WCORN(3,2), WLOOF(4,2)
      DIMENSION B(6,21), CGAUS(5), DB(6), DMOD(6,6), EXLOAD(21),
     .	 EXSTIF(231), FRALOF(3,6), POIN(3,2), POINT(3), ROW(32),
     .	 STREM(6,42), XGAUS(5)
      DATA CGAUS/1.0, 1.0, .555555556, .555555556, .888888889/,
     .	 XGAUS/-.577350269, .577350269, -.7745966692, .7745966692, 0.0/
C
C*** THE SECTION PROPERTIES ARE ASSUMED TO REMAIN CONSTANT OVER THE BEAM
C
      YMOD = VPROP(1,LPOP)
      SHEMOD = VPROP(2,LPOP)
      AREA = VPROP(3,LPOP)
      ZZMOM = VPROP(4,LPOP)
      YYMOM = VPROP(5,LPOP)
      POLMOM = VPROP(6,LPOP)
      DENSTY = VPROP(7,LPOP)
      WRITE(6,600) YMOD, SHEMOD, AREA, ZZMOM, YYMOM, POLMOM, DENSTY
 600  FORMAT(/17H YOUNGS MODULUS =,F13.6,7X,15HSHEAR MODULUS =,F13.6,7X,
     .	 23HAREA OF CROSS SECTION =,F10.8//21H 2ND MOM. OF AREA, XY,
     .	 10H BENDING =,F10.8,7X,19HDITTO, XZ BENDING =,F10.8,7X,
     .	 18HTORSION CONSTANT =,F10.8//10H DENSITY =,F10.8,
     .	 16H PER UNIT VOLUME)
C
C*** EXTRACT THE ELEMENT COORDINATES AND INITIALISE THE GENERATED ARRAYS
C
      DO 6 I = 1,21
    6 EXLOAD(I) = 0.0
      DO 8 I = 1,231
    8 EXSTIF(I) = 0.0
      DO 10 I = 1,36
   10 DMOD(I,1) = 0.0
C
C*** ENTER THE TWO INTEGRATING LOOPS
C
      DO 22 IGAUS = 1,5
      XI = XGAUS(IGAUS)
      CALL LOFBEM(ELCORD, FRALOF, LNODS, LNODZ, LNOMAX, LVABZ, NEL,
     .	 NELZ, POINT, XI)
C
C*** THE MODULUS MATRIX IS DIAGONAL
C
      TENS = YMOD*SIDE*CGAUS(IGAUS)
      SHE = SHEMOD*SIDE*CGAUS(IGAUS)
      DMOD(1,1) = TENS*AREA
      DMOD(2,2) = SHE*AREA
      DMOD(3,3) = SHE*AREA
      DMOD(4,4) = TENS*ZZMOM
      DMOD(5,5) = TENS*YYMOM
      DMOD(6,6) = SHE*POLMOM
C
C*** FIRST WE INTRODUCE THE GRAVITY LOADS, THE COMPONENTS DUE TO WEIGHT.
C
      NV = 1
      DO 18 IVAB = 1,21
      IF(IGAUS.LE.2)
     .	 EXLOAD(IVAB) = EXLOAD(IVAB) + SIDE*AREA*DENSTY*WBEAM(3,IVAB)
      B(1,IVAB) = WBEAM(4,IVAB)
C
C*** IN MATRIX B THE SHEARING TERMS MUST BE RELATIVE TO THE SHEAR CENTRE
C
      B(2,IVAB) = WBEAM(11,IVAB)
      B(3,IVAB) = WBEAM(12,IVAB)
C
C*** AND THE TENSILE CONTRIBUTION IS THAT OF THE FIBRE AT THE CENTROID.
C
      B(4,IVAB) = WBEAM(8,IVAB)
      B(5,IVAB) = WBEAM(9,IVAB)
      B(6,IVAB) = WBEAM(10,IVAB)
C
C*** DB IS CURRENT WORKING COLUMN OF MATRIX D TIMES B
C
      DO 14 I = 1,6
      DB(I) = DMOD(I,I)*B(I,IVAB)
C
C*** ALSO WITH IGAUS = 1 OR 2, WE CREATE THE STRESS MATRIX, IN TWO PARTS
C
      IF(IGAUS.LE.2) STREM(I,IVAB+(IGAUS-1)*21) = DB(I)/SIDE
   14 CONTINUE
C
C*** USE DB TO MAKE ITS CONTRIBUTION TO THE STIFFNESS, AN UPPER TRIANGLE
C
      DO 18 JVAB = 1,IVAB
      GASH = EXSTIF(NV)
C
C*** IGAUS = 1,2 USES TENSILE AND SHEAR - 3,4,5 USES BENDING AND TORSION
C
      JA = 1 + IGAUS/3*3
      JZ = JA + 2
      DO 16 J = JA,JZ
   16 GASH = GASH + B(J,JVAB)*DB(J)
      EXSTIF(NV) = GASH
   18 NV = NV + 1
C
C*** KEEP SOME GEOMETRIC INFORMATION, TO PRINT LATER, WITH THE STRESSES.
C
      IF(IGAUS.GT.2) GO TO 22
      DO 20 I = 1,3
   20 POIN(I,IGAUS) = POINT(I)
   22 CONTINUE
C
C*** REDUCE OUT THE FOUR UNWANTED ROTATION VARIABLES, AT THE LOOF NODES.
C
      NVAB = 21
      DO 28 KOUNT = 1,4
      NVAB = NVAB - 1
      IREDUC = (KOUNT + 15)/2
      PIVOT = EXSTIF(NFUNC(IREDUC,IREDUC))
      RHS = EXLOAD(IREDUC)
C
C*** KEEP, AMONGST OTHER THINGS, THE COLUMNS OF STRESM TO BE ELIMINATED,
C
      DO 24 IG = 1,2
      DO 24 I = 1,6
   24 ROW(6*IG+I+14) = STREM(I,IREDUC+(IG-1)*21)
C
C*** WE FILL UP THE SPACE OF THE EQUATION BY SHIFTING ALL ITS SUCCESSORS
C
      DO 28 IZ = 1,NVAB
      IA = IZ
      IF(IZ.GE.IREDUC) IA = IZ + 1
      N = NFUNC(IA,IREDUC)
      IF(IA.GT.IREDUC) N = NFUNC(IREDUC,IA)
      ROW(IZ) = EXSTIF(N)
      FACT = ROW(IZ)/PIVOT
C
C*** SUBTRACT FACT TIMES EQUATION IREDUC FROM EQ. IA, AND PUT IT IN IZ.
C
      DO 26 JZ = 1,IZ
      JA = JZ
      IF(JZ.GE.IREDUC) JA = JZ + 1
   26 EXSTIF(NFUNC(JZ,IZ)) = EXSTIF(NFUNC(JA,IA)) - FACT*ROW(JZ)
C
C*** WE ADJUST THE RIGHT HAND SIDE OF THE EQUATIONS, TO SPREAD THE LOAD.
C
      EXLOAD(IZ) = EXLOAD(IA) - FACT*RHS
C
C*** FINALLY WE MUST CORRECT THE STRESS MATRICES TO REPLACE WHAT IS LOST
C
      DO 28 IG = 1,2
      DO 28 I = 1,6
   28 STREM(I,IZ+(IG-1)*21)
     .	 = STREM(I,IA+(IG-1)*21) - FACT*ROW(6*IG+I+14)
C
C*** SUBDIVIDE STREM INTO TWO STRESS MATRICES OF THE STANDARD DIMENSIONS
C
      NSTRES = 6
      DO 34 IG = 1,2
C
C*** AND DEPOSIT ALL THE MATERIAL FOR STRESSING ONTO TAPE, FOR LATER USE
C
      DO 32 I = 1,17
      DO 32 J = 1,6
   32 STRESM(I,J) = STREM(J,I+(IG-1)*21)
   34 WRITE(7) NSTRES, LVABZ, STRESM, (POIN(I,IG), I = 1,3),
     .	 (FRALOF(I,3*IG-2), I = 1,9)
C
C*** NOW TRANSFER THE STIFFNESSES AND LOADS TO THEIR ASSIGNED LOCATIONS.
C
      DO 36 I = 1,153
   36 ELSTIF(I) = EXSTIF(I)
      DO 38 I = 1,17
   38 ELOAD(I,1) = EXLOAD(I)
      RETURN
      END
C
C
      SUBROUTINE LOFBEM(ELCORD, FRALOF, LNODS, LNODZ, LNOMAX, LVABZ,
     .		       NEL, NELZ, NFIRST, POINT, XI)
C4427
C*** TO CREATE WBEAM, THE SHAPE FUNCTIONS FOR THE SEMILOOF BEAM ELEMENT.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION LNODS(LNOMAX,NELZ)
      COMMON/BEAMS/SIDE, WBEAM(12,27), WCORN(3,2), WLOOF(4,2)
      DIMENSION ELCORD(9,4), FRAME(3,3), FRALOF(3,6), POINT(3),
     .	 VANPOT(3), XILOOF(2)
      DATA XILOOF/-.577350269, .577350269/, VANPOT/3*0.0/
      DO 1 I = 1,324
    1 WBEAM(I,1) = 0.0
C
C*** IS THIS THE FIRST VISIT FOR THIS ELEMENT
C
      NERROR = 1
      IF(LNODZ.NE.5. OR .LVABZ.NE.17) GO TO 99
    2 NLOOF = -10
      IF(NFIRST.EQ.1) NLOOF = 0
      NFIRST = 0
      XLOCAL = XI
      IF(NLOOF.LT.0) GO TO 10
C
C*** CHECK THAT MIDSIDE IS NEARLY CENTRAL AND CURVATURE IS NOT EXCESSIVE
C
      GASH = 0.0
      GISH = 0.0
      GUSH = 0.0
      DO 6 I = 1,3
      GASH = GASH + (ELCORD(3,I)-ELCORD(2,I))**2
      GISH = GISH + (ELCORD(1,I)-ELCORD(2,I))**2
    6 GUSH = GUSH + (ELCORD(1,I)-2.0*ELCORD(2,I)+ELCORD(3,I))**2
      NERROR = 2
      IF(ABS(GASH - GISH).GT.0.040*(GASH + GISH)) GO TO 99
      NERROR = 3
      IF(GUSH.GT.0.25*(GASH + GISH)) GO TO 99
C
C*** DEFINE THE INTEGRATING POINT, AND ALSO THE TANGENT ALONG THE ARC.
C
    8 NLOOF = NLOOF + 1
      XLOCAL = XILOOF(NLOOF)
   10 CALL SFRBEM(XLOCAL)
      DO 12 J = 1,3
      CALL SCALAR(ELCORD(1,J), WCORN(1,1), POINT(J))
   12 CALL SCALAR(ELCORD(1,J), WCORN(1,2), FRAME(J,1))
C
C*** USE VANISHING POINT IF APPROPRIATE TO DEFINE THE LOCAL AXIS SYSTEM.
C
      CALL SCALAR(FRAME(1,1), FRAME(1,1), SQ)
      SIDE = SQRT(SQ)
      CALL SCALAR(VANPOT(1), VANPOT(1), SQ)
      IF(SQ.EQ.0.0) GO TO 18
      DO 16 I = 1,3
   16 FRAME(I,2) = POINT(I) - VANPOT(I)
      GO TO 26
C
C*** IF THIS FAILS THEN ERECT AN AXIS NORMAL TO THE PLANE OF THE ELEMENT
C
   18 DO 20 I = 1,3
   20 FRAME(I,2) = ELCORD(1,I) - 2.0*ELCORD(2,I) + ELCORD(3,I)
      GO TO 26
C
C*** OR ELSE, FIND AXIS ALONG WHICH THE TANGENT HAS SMALLEST COMPONENT.
C
   22 SMALL = 1.0E20
      DO 24 I = 1,3
      FRAME(I,2) = 0.0
      IF(ABS(FRAME(I,1)).GT.SMALL) GO TO 24
      SMALL = ABS(FRAME(I,1))
      LITL = I
   24 CONTINUE
      FRAME(LITL,2) = SIDE
      GO TO 28
C
C*** NOW SEE IF IT REALLY WORKS OUT NUMERICALLY, ALLOWING FOR ROUNDOFF.
C
   26 CALL SCALAR(FRAME(1,2), FRAME(1,2), SQ)
      IF(SQ.LT.SIDE*SIDE*1.0E-16) GO TO 22
   28 CALL VECTOR(FRAME(1,1), FRAME(1,2), FRAME(1,3))
      CALL VECTOR(FRAME(1,3), FRAME(1,1), FRAME(1,2))
C
C*** NORMALISE THE LOCAL AXES AND STORE THEM IN FRALOF FOR A NEW ELEMENT
C
      DO 30 K = 1,3
      CALL SCALAR(FRAME(1,K), FRAME(1,K), SQ)
      SQ = SQRT(SQ)
      DO 30 I = 1,3
      FRAME(I,K) = FRAME(I,K)/SQ
      IF(NLOOF.GT.0) FRALOF(I,3*(NLOOF-1)+K) = FRAME(I,K)
   30 CONTINUE
      IF(NLOOF.EQ.1) GO TO 8
      IF(NLOOF.EQ.2) GO TO 2
C
C*** INTRODUCE THE DISPLACEMENT CONTRIBUTIONS IN VARIOUS WBEAM LOCATIONS
C
      DO 34 NOD = 1,3
      DO 34 IUVW = 1,3
      KOL = 3*(NOD-1)**2 + IUVW
      WBEAM(IUVW,KOL) = WCORN(NOD,1)
      WBEAM(4,KOL) = WCORN(NOD,2)*FRAME(IUVW,1)/SIDE
      DO 34 NSHEAR = 2,3
   34 WBEAM(NSHEAR+9,KOL) = WCORN(NOD,2)*FRAME(IUVW,NSHEAR)/SIDE
C
C*** ROTATIONS: THE LOOFS NEED TRANSFORMING, STORE THEM IN COLUMNS 22-27
C
      DO 38 NOD = 1,4
      DO 38 IUVW = 1,3
      KOL = (NOD*(9-2*NOD)-1)*NOD/2 + 12 + IUVW
      DO 36 IXYZ = 1,3
   36 WBEAM(IXYZ+4,KOL) = WLOOF(NOD,1)*FRAME(IUVW,IXYZ)
      WBEAM(8,KOL) = WLOOF(NOD,2)*FRAME(IUVW,3)/SIDE
      WBEAM(9,KOL) = -WLOOF(NOD,2)*FRAME(IUVW,2)/SIDE
      WBEAM(10,KOL) = WLOOF(NOD,2)*FRAME(IUVW,1)/SIDE
      WBEAM(11,KOL) = -WLOOF(NOD,1)*FRAME(IUVW,3)
   38 WBEAM(12,KOL) = WLOOF(NOD,1)*FRAME(IUVW,2)
C
C*** THE ROTATIONS AT THE LOOF NODES ARE THEMSELVES IN LOCAL DIRECTIONS.
C
      DO 42 KOL = 7,12
      NDEL = (KOL+14)/3*3
      DO 42 NROW = 1,12
      GASH = 0.0
      DO 40 J = 1,3
   40 GASH = GASH + WBEAM(NROW,J+NDEL)*FRALOF(J,KOL-6)
   42 WBEAM(NROW,KOL) = -GASH
C
C*** IF END NODE NUMBERS ARE IN DESCENDING ORDER, ADJUST LOOF ROTATIONS.
C
      IF(LNODS(1,NEL).LT.LNODS(3,NEL)) RETURN
      DO 44 NROW = 1,12
      GASH = WBEAM(NROW,7)
      WBEAM(NROW,7) = -WBEAM(NROW,10)
   44 WBEAM(NROW,10) = -GASH
      RETURN
   99 WRITE(6,620) NERROR
 620  FORMAT(//6H ERROR,I2,10H IN LOFBEM)
      STOP
      END
C
C
      SUBROUTINE SFRBEM(XLOCAL)
C4572
C*** ROUTINE TO COMPUTE 3-NODE AND 4-NODE SHAPE FUNCTIONS FOR NEW BEAM.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/BEAMS/SIDE, WBEAM(12,27), WCORN(3,2), WLOOF(4,2)
      DIMENSION COEF(43)
      DATA COEF/.5,-.5,0.0, 1.0,-.5, -1.0,0.0,1.0, -2.0,0.0, .5,.5,0.0,
     1	 1.0,.5, -.75,.75,.25,-.25, -2.25,1.5,.25, 1.299038106,-.75,
     2	 -1.299038106,.75, 3.897114318,-1.5,-1.299038106, -1.299038106,
     3	 -.75,1.299038106,.75, -3.897114318,-1.5,1.299038106, .75,.75,
     4	 -.25,-.25, 2.25,1.5,-.25/
      IF(ABS(XLOCAL).GT.1.0) GO TO 99
      NZ = 0
      DO 4 NOD = 1,7
      DO 4 IDIF = 1,2
      NA = NZ + 2
      NZ = NA + 2-IDIF + NOD/4
      GASH = COEF(NA-1)
      DO 2 N = NA,NZ
    2 GASH = GASH*XLOCAL + COEF(N)
      IF(NOD.LE.3) WCORN(NOD,IDIF) = GASH
      IF(NOD.GE.4) WLOOF(NOD-3,IDIF) = GASH
    4 CONTINUE
      RETURN
   99 WRITE(6,600)
 600  FORMAT(//18H ERROR 4 IN SFRBEM)
      STOP
      END
C
C
      SUBROUTINE SFR(LNODZ, LTYP, NDIM, NSTAGE, WCORN, XLOCAL)
C4607
C*** SHAPE FUNCTION SUBROUTINE CREATES ALL PARENT ISOPARAMETRIC ELEMENTS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/COEF/COEF(247)
      DIMENSION FACT(3), HAFXYZ(3,8), MD(4), TERMV(46), TURNER(2,3),
     .	 WCORN(10,4), WLOOF(10,3), XLOCAL(3)
      DATA MD/8, 43, 90, 171/, TERMV/0.0, 1.0, 44*0.0/
      DATA HAFXYZ/-.5,-.5,-.5, .5,-.5,-.5, .5,.5,-.5, -.5,.5,-.5,
     .	 -.5,-.5,.5, .5,-.5,.5, .5,.5,.5, -.5,.5,.5/
      DATA TURNER/1., 0., 0., 1., -1., -1./
C
C*** CREATE THE LIST OF POLYNOMIAL TERMS AND THEIR XI, ETA DERIVATIVES.
C
      XI = XLOCAL(1)
      ETA = XLOCAL(2)
      ZETA = XLOCAL(3)
      IF(ABS(XI).GT.1.0. OR .ABS(ETA).GT.1.0. OR .ABS(ZETA).GT.1.0. OR .
     .	((LNODZ.EQ.3.OR.LNODZ.EQ.6). AND .(XI.LT.0.0.OR.ETA.LT.0.0.OR.
     .	 XI+ETA.GT.1.00000001D0))) GO TO 99
      IF(LNODZ.EQ.3) GO TO 20
      IF(LNODZ.EQ.4. OR .LTYP.EQ.9) GO TO 24
      IA = 2
      NZ = (LNODZ+NSTAGE-3)/2
      DO 6 N = 1,NZ
      IAN = IA + N
      N2 = N + 15
      N3 = N + 30
      DO 4 J = IA,IAN
      TERMV(J+N) = TERMV(J)*XI
      TERMV(J+N2) = TERMV(J)*(IAN-J)
    4 TERMV(J+N3) = TERMV(J-1)*(J-IA)
      IA = IAN
    6 TERMV(IA+N) = TERMV(IA-1)*ETA
C
C*** CREATE SPECIAL COMBINATIONS FOR LOOF NODES, ETC.
C
      DO 8 I = 8, 38, 15
      IF(LNODZ.EQ.6) TERMV(I) =
     .	 2.0*(TERMV(I)-TERMV(I+3)) + 3.0*(TERMV(I+1)-TERMV(I+2))
      IF(LNODZ.EQ.8) TERMV(I) = TERMV(I+2)
      IF(LNODZ.EQ.8) TERMV(I+2) = TERMV(I+6)
    8 CONTINUE
C
C*** USE TERMV TO FIND WCORN AND WLOOF AND XI, ETA DERIVATIVES.
C
      NFOISZ = (NSTAGE+1)/2
      DO 18 NFOIS = 1, NFOISZ
      NZ = (3*LNODZ)/2 + NFOIS - 4
      IF(NZ.NE.10) GO TO 12
      NZ = 9
      DO 10 I = 10, 40, 15
   10 TERMV(I) = TERMV(I+3) - TERMV(I+5)
   12 NDEL = 0
      DO 18 I = 1,3
      DO 16 N = 1,NZ
      GASH = 0.0
      MDEL = MD(LNODZ+NFOIS-6) + N*NZ - 15*I
      MA = 16*I - 14
      MZ = 15*I+NZ-14
      DO 14 M = MA,MZ
   14 GASH = GASH + TERMV(M)*COEF(M+MDEL)
      IF(NFOIS.EQ.1) WCORN(N+NDEL,I) = GASH
      IF(NFOIS.EQ.2) WLOOF(N+NDEL,I) = GASH
   16 CONTINUE
   18 NDEL = 1
C
C*** TURNER'S LINEAR TRIANGLE, THE VERY SIMPLEST ISOPARAMETRIC ELEMENT.
C
      RETURN
   20 DO 22 I = 1,2
      WCORN(I,1) = XLOCAL(I)
      DO 22 J = 1,3
   22 WCORN(J+1,I+1) = TURNER(I,J)
      WCORN(3,1) = 1.0 - XI - ETA
      RETURN
C
C*** TAIG'S QUADRILATERAL OF ABOUT 1957 IS THE SIMPLEST NONTRIVIAL ISO-P
C
   24 DO 28 NOD = 1,LNODZ
      GASH = 1.0
      DO 26 IXYZ = 1,NDIM
      FACT(IXYZ) = 0.5 + XLOCAL(IXYZ)*HAFXYZ(IXYZ,NOD) + 1.0E-30
   26 GASH = GASH*FACT(IXYZ)
      WCORN(NOD,1) = GASH
      DO 28 IXYZ = 1,NDIM
   28 WCORN(NOD+1,IXYZ+1) = GASH*HAFXYZ(IXYZ,NOD)/FACT(IXYZ)
      RETURN
C
C*** ERROR DIAGNOSTICS, IF POINT LIES OUTSIDE ELEMENT.
C
   99 WRITE(0,610) XI, ETA, ZETA
 610  FORMAT(/30H ERROR 11 IN SEGMENT SFR, XI =,F15.9,3X,5HETA =,F15.9,
     .	 3X,6HZETA =,F15.9)
      STOP
      END
C
C
      BLOCK DATA
C4710
C*** TO INITIALIZE COEFFICIENTS FOR CORNER-MIDSIDE AND LOOF VERSIONS
C
C*** OF QUADRATIC TRIANGLE AND QUADRILATERAL FOR SEMILOOF SUBROUTINES.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION COEFA(166), COEFB(81)
      COMMON/COEF/COEF(247)
      COMMON/SYSTEM/MAXDIM(12,3), NDF(8,12)
      EQUIVALENCE (COEF(1),COEFA(1)), (COEF(167),COEFB(1))
      DATA COEFA/ 1.,-3.,-3., 2., 4., 2., 0., 4., 0.,-4.,-4., 0., 0.,
     1 -1., 0., 2., 0., 0., 0., 0., 0., 0., 4., 0., 0., 0.,-1., 0., 0.,
     2	2., 0., 0., 4., 0.,-4.,-4.,	       0.910683603, 1.577350269,
     3 -6.041451884,-6.196152423, 2.464101615, 8.928203230, 1.732050808,
     4 -0.244016936, 0.422649731, 2.041451884, 4.196152423,-4.464101615,
     5 -4.928203230,-1.732050808, 0.333333333,-1.422649731,-2.577350269,
     6 -1.464101615, 5.000000000, 5.464101615, 1.732050808, 0.333333333,
     7 -2.577350269,-1.422649731, 5.464101615, 5.000000000,-1.464101615,
     8 -1.732050808,-0.244016936, 2.041451884, 0.422649731,-4.928203230,
     9 -4.464101615, 4.196152423, 1.732050807, 0.910683602,-6.041451884,
     1	1.577350269, 8.928203230, 2.464101615,-6.196152422,-1.732050807,
     2 -1.,6.,6.,-6.,-6.,-6.,0.,-.25,0.,0.,.25,.25,.25,-.25,-.25,0.,
     3 .5,0.,-.5,-.5,0.,0.,0.,.5,0.,-.25,0.,0.,.25,-.25,.25,.25,-.25,0.,
     4 .5,.5,0.,0.,0.,-.5,-.5,0.,0.,-.25,0.,0.,.25,.25,.25,.25,.25,0.,
     5 .5,0.,.5,-.5,0.,0.,0.,-.5,0.,-.25,0.,0.,.25,-.25,.25,-.25,.25,0.,
     6	.5,-.5,0.,0.,0.,-.5,.5,0.,0.,1.,0.,0.,-1.,0.,-1.,0.,0.,1./
      DATA COEFB/    0.000000000, 0.216506351,-0.375000000,-0.093750000,
     1	0.216506351, 0.281250000,-0.649519053, 0.375000000,-0.324759526,
     2 -0.000000000,-0.216506351,-0.375000000,-0.093750000,-0.216506351,
     3	0.281250000, 0.649519053, 0.375000000, 0.324759526, 0.000000000,
     4	0.375000000, 0.216506351, 0.281250000,-0.216506351,-0.093750000,
     5 -0.375000000,-0.649519053,-0.324759526, 0.000000000, 0.375000000,
     6 -0.216506351, 0.281250000, 0.216506351,-0.093750000,-0.375000000,
     7	0.649519053, 0.324759526,-0.000000000,-0.216506351, 0.375000000,
     8 -0.093750000, 0.216506351, 0.281250000, 0.649519053,-0.375000000,
     9 -0.324759526, 0.000000000, 0.216506351, 0.375000000,-0.093750000,
     1 -0.216506351, 0.281250000,-0.649519053,-0.375000000, 0.324759526,
     2 -0.000000000,-0.375000000,-0.216506351, 0.281250000,-0.216506351,
     3 -0.093750000, 0.375000000, 0.649519053,-0.324759526,-0.000000000,
     4 -0.375000000, 0.216506351, 0.281250000, 0.216506351,-0.093750000,
     5 .375,-.649519053,.324759526,1.,0.,0.,-.75,0.,-.75,0.,0.,0./
C
C*** ALSO DEFINE DEGREES OF FREEDOM PER NODE, FOR ELEMENTS IN THE SYSTEM
C
      DATA NDF/1,1,1,1,1,1,1,1, 2,2,2,2,2,2,2,2, 1,1,1,1,1,1,1,1,
     .	 2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3, 1,1,1,1,1,1,1,1,
     .	 6,6,0,0,0,0,0,0, 2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,
     .	 3,3,3,3,0,0,0,0, 3,5,3,5,3,5,3,5, 3,5,3,3,3,0,0,0/
      DATA MAXDIM/2,2,2,2,2,2,3,2,3,2,3,3,
     .	 3,3,3,4,6,2,4,3,6,3,6,6,
     .	 7,7,3,7,4,3,9,6,5,7,7,9/
      END
