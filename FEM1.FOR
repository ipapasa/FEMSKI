C*** STUDENTS FRONTAL SOLUTION PACKAGE, WITH VERY EXTENSIVE DIAGNOSTICS.
C
C*** WRITTEN AT SWANSEA, 1973, BY BRUCE IRONS, REVISED IN CALGARY, 1978.
C
C*** SEMILOOF ASSEMBLED FIRST BY ABDELFATTAH ELSAWAF, U. OF CALGARY 1976
C
C	  LISTING OF SUBROUTINES IN FEMSKI			    LINE
C
C    MASTER SEGMENT - DEFINE BASIC DIMENSIONS, CALL ROUTINES	       1
C    NURSE - READ JOB DIMENSIONS, NODAL CONNECTIONS, PROPERTY LISTS  157
C    DOCTOR - COLLECT AND ACTUALLY PRINT DIAGNOSTICS, FROM NURSE ETC.352
C    INPUT - READ REMAINING INPUT DATA. 			     459
C    MATRON - DO MASSIVE DIAGNOSTIC TESTS.			     570
C    NFUNC - FUNCTION, ADDRESSES IN SYMMETRIC MATRICES, AS VECTORS.  822
C    ELFILE - CALL SUBROUTINES, COLLECT FILE OF ELEMENT MATRICES.    835
C    FRONT - ASSEMBLE AND SOLVE EQUATIONS: REAL-TIME DIAGNOSTICS.    947
C    STRESS - USE STRESS MATRICES, TO FIND AND PRINT STRESS VALUES. 1367
C    PRINPL - FIND PRINCIPAL STRESSES.				    1508
C    SCALAR - SCALAR PRODUCT OF TWO VECTORS.			    1616
C    VECTOR - VECTOR PRODUCT OF TWO VECTORS.			    1631
C    SUNDRY - ALL ISOPARAMETRIC ELEMENTS, TYPE 1 - 6.		    1648
C    ISOPAR - GENERAL SHAPE SUBROUTINE FOR ISOPARAMETRIC ELEMENTS.  1879
C    MATINV - UNSYMMETRICAL MATRIX INVERSION, IN VECTOR FORM.	    1951
C    BEAM - SIMPLE 3D BEAM, ELEMENT TYPE 7.			    2035
C    BEMSHA - SHAPE FUNCTION FOR SIMPLE BEAM.			    2097
C    HBRQD - HYBRID 4-NODE QUADRILATERAL, TYPE 8.		    2207
C    HBRBRK - HYBRID 8-NODE BRICK, TYPE 9			    2397
C    ISOQS  - SHAPE FUNCTION ROUTINE FOR BOTH HYBRID ELEMENTS.	    2592
C    FLEX   - FORMS GENERALIZED FLEXIBILITY MATRIX FOR HYBRIDS.     2697
C    ELCOND - CONDENSATION, RECOVERY, AND REDUCTION FOR HYBRIDS.    2726
C    HBRPLT - HYBRID 4-NODE PLATE BENDING ELEMENT, TYPE 10	    2821
C    PLATE - SHAPE FUNCTION SUBROUTINE FOR THE ABOVE		    2920
C    MOMNTS - GENERATES THE MOMENT FIELDS FOR BASIS OF ABOVE	    3204
C    PSHAPE - GENERATES CONFORMING SLOPES AND DISPLACEMENTS FOR IT  3260
C    TRIBEN - TRIANGLE IN PLATE BENDING, ALSO TYPE 10		    3362
C    NAGWA - SHAPE FUNCTION SUBROUTINE FOR THE ABOVE		    3446
C    SHELL - SEMILOOF CURVED SHELL ELEMENT, MAIN CALLING ROUTINE    3593
C    HALOOF - WICKED SHAPE FUNCTION SUBROUTINE, FOR SEMILOOF	    3707
C    SLBEAM - SEMILOOF, ASSOCIATED SPECIAL BEAM ELEMENT 	    4244
C    LOFBEM - SHAPE FUNCTION FOR THE SEMILOOF BEAM		    4426
C    SFRBEM - ALGEBRAIC SHAPE FUNCTIONS FOR THE ABOVE		    4572
C    SFR - ALGEBRAIC SHAPE FUNCTION GENERATOR, INCLUDING SEMILOOF.  4607
C    BLOCK DATA - MOSTLY COEFFICIENTS SEMILOOF ETC. ALSO DIMENSIONS.4710
C
C*** STATE THE OVERALL DIMENSIONS - THIS SECTION MUST BE KEPT CONSISTENT
C     PROGRAM FEMSKI
$NOFLOATCALLS
$DO66
      PROGRAM FEMSKI
$LARGE
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/DOC/NASTY(100)
      DIMENSION VEC(3500), NVEC(7000)
      CHARACTER TITLE*120
      EQUIVALENCE (VEC(1),NVEC(1))
      OPEN(1, FORM='UNFORMATTED',STATUS='NEW')
      OPEN(2, FORM='UNFORMATTED',STATUS='NEW')
      OPEN(3, FORM='UNFORMATTED',STATUS='NEW')
      OPEN(4, FORM='UNFORMATTED',STATUS='NEW')
      OPEN(5, FILE='FEM.DAT',FORM='FORMATTED',STATUS='OLD')
      OPEN(6, FILE='RESULTS',FORM='FORMATTED',STATUS='NEW')
      OPEN(7, FORM='UNFORMATTED',STATUS='NEW')
      OPEN(99,FILE='FEMBBOB',FORM = 'FORMATTED',STATUS='NEW')
      LENVEC = 3500
      INTEG = 2
      READ(5,500) TITLE
 500  FORMAT(A120)
      WRITE(6,600) TITLE
 600  FORMAT(1X,A120//)
      WRITE(6,601) LENVEC, INTEG
 601  FORMAT(/46H LENGTH OF VECTOR OF FLOATING WORDS = LENVEC =,I5/
     .	 52H NUMBER OF INTEGER WORDS PER FLOATING WORD = INTEG =,I2)
C
C*** WITH A NEW JOB, WE COMPLETELY RE-WORK HOUSEKEEPING AND DIAGNOSTICS.
C
    2 NEWJOB = 1
      IFCOEF = 1
C
C*** DIAGNOSE SOME ERRORS IN THE EARLY CARDS, AND START THE HOUSEKEEPING
C
      LENINT = LENVEC*INTEG
      CALL NURSE(INTEG, IPROP, ITERAT, I1, I2, I3, I4, JPROP, J1, J2,
     .	 J3, J4, J5, K1, K2, K3, LENINT, LENVEC, LNOMAX, MAXRHS,
     .	 MAXTRS, NDFMAX, NDIM, NELZ, NEWRHS, NEXTIF, NFIX, NLOAD,
     .	 NODMAX, NVEC(1), VEC(1))
C
C*** NOW INTERROGATE ERROR LIST IN DOCTOR, THE LIST AS IT EXISTS SO FAR.
C
      CALL DOCTOR(0,0)
C
C*** IF NO FATAL ERRORS, READ THE MAJORITY OF THE REMAINING DATA CARDS.
C
      CALL INPUT(VEC(J2), IPROP, JPROP, NVEC(I4), LENINT, LENVEC,
     .	 NVEC(I1), LNOMAX, NDFMAX, NDIM, NELZ, NEWRHS, NEXTIF, NFIX,
     .	 NLOAD, NVEC(I3), NVEC(K1), NVEC(K2), NODMAX, NVEC(1), VEC(1),
     .	 VEC(J3), VEC(J4), VEC(J1), VEC(J5))
C
C*** DIAGNOSE ALMOST ALL THE ERRORS AND PREPARE FOR THE FRONTAL SOLUTION
C
    4 CALL MATRON(VEC(J2), IFCOEF, INTEG, JPROP, J3, NVEC(I4), K3, K4,
     .	 LENVEC, LIMFRO, NVEC(I1), LNOMAX, NVEC(1), NVEC(I2), LVMAX,
     .	 L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14,
     .	 MAXRHS, MAXTRS, M1, M2, M3, NBUFZ, NDFMAX, NVEC(K3), NDIM,
     .	 NELZ, NEWJOB, NEWRHS, NEXTIF, NFIX, NLOAD, NVEC(I3),
     .	 NVEC(K1), NODMAX, NVEC(K2))
C
C*** WRITE ANY ERROR DIAGNOSTICS, WITH THE ASSOCIATED DESCRIPTIVE NUMBER
C
      CALL DOCTOR(0,0)
C
C*** TO AVOID HANDLING UNINITIALIZED QUANTITIES, SET MANY ARRAYS TO ZERO
C
      LW = J3 + NEWJOB*(L4-J3)
      DO 6 L = LW,L12
    6 VEC(L) = 0.0
C
C*** COMPUTE THE ELEMENT STIFFNESS FILE, AND ALSO THE ELEMENT LOAD FILE.
C
      LCOEF = NFUNC(LVMAX,LVMAX)
      IF(IFCOEF.EQ.1) CALL ELFILE(VEC(J2), VEC(L2), VEC(L1), IPROP,
     .	 JPROP, LCOEF, NVEC(I1), LNOMAX, NVEC(1), NVEC(I2),
     .	 LVMAX, MAXRHS, MAXTRS, NDIM, NELZ, NEWRHS, NODMAX, VEC(L3),
     .	 VEC(J1))
C
C*** MERGE AND SOLVE THE EQUATIONS, USING FRONTAL GAUSSIAN ELIMINATION.
C
      MCOEF = NFUNC(LIMFRO,LIMFRO)
      CALL FRONT(VEC(L10), VEC(L2), VEC(L1), VEC(L11), VEC(L12),
     .	 VEC(L14), VEC(L13), IFCOEF, ITERAT, JPROP, NVEC(I4), LCOEF,
     .	 NVEC(K4), LIMFRO, NVEC(I1), LNOMAX, NVEC(1), NVEC(I2), LVMAX,
     .	 MAXRHS, MAXTRS, MCOEF, NVEC(M2), NBUFZ, NVEC(M3), NDFMAX, NELZ,
     .	 NEWRHS, NEXTIF, NFIX, NLOAD, NVEC(I3), NVEC(K3), NVEC(K1),
     .	 NVEC(K2), NVEC(M1), VEC(L9), VEC(L7), VEC(L6), VEC(L8),
     .	 VEC(L3), VEC(L5), VEC(L4), VEC(J3), VEC(J4), VEC(J5))
C
C*** PRESENT THE FINAL REPORT, MENTIONING ANY PECULIARITIES ENCOUNTERED.
C
      CALL DOCTOR(0,0)
C
C*** NEXT IS A RE-SOLUTION, A NEW JOB, OR AN UPDATE OF THE COEFFICIENTS.
C
      READ(5,502, END = 8) NEWRHS, IFCOEF, NEWJOB
 502  FORMAT(40I2)
      WRITE(6,602) NEWJOB, IFCOEF, NEWRHS
 602  FORMAT(//32H NEW SOLUTION.  IS IT A NEW JOB.,I2/
     .	 28H ARE THERE NEW COEFFICIENTS.,I3,6X,
     .	 12H NOW WE HAVE,I3,18H RIGHT HAND SIDES.)
      NLOAD = 0
      NEXTIF = 0
      IF(NEWJOB.NE.0) GO TO 2
      IF(IFCOEF.NE.0) IFCOEF = 1
      GO TO 4
    8 CLOSE(1)
      CLOSE(2)
      CLOSE(3)
      CLOSE(4)
      CLOSE(7)
      STOP
      END
      SUBROUTINE NURSE(INTEG, IPROP, ITERAT, I1, I2, I3, I4, JPROP, J1,
     .		      J2, J3, J4, J5, K1, K2, K3, LENINT, LENVEC,
     .	 LNOMAX, MAXRHS, MAXTRS, NDFMAX, NDIM, NELZ, NEWRHS, NEXTIF,
     .	 NFIX, NLOAD, NODMAX, NVEC, VEC)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION NVEC(LENINT), NTEMP(21), TEMP(7), VEC(LENVEC)
      COMMON/SYSTEM/MAXDIM(12,3), NDF(8,12)
      CHARACTER GARB*13, JUNK*1, QUEST*64, WORD(7)*11, BLANK*11
      DATA BLANK/'           '/
C166
C*** READ THE FIRST CARD, AND ECHO IT IN THE PRINTOUT WITH MINIMUM DELAY
C
      DO 1 I = 1,2
    1 READ(5,501) JUNK
 501  FORMAT(A1)
      READ(5,*, ERR = 22, END = 22) NELZ, NFIX, NLOAD, NEXTIF, NEWRHS,
     .	 MAXRHS, ITERAT
      READ(5,501) JUNK
      IF(NEWRHS.EQ.0) NEWRHS = 1
      IF(ITERAT.EQ.0) MAXRHS = NEWRHS
      WRITE(6,601) NELZ, NFIX, NLOAD, NEXTIF, NEWRHS, MAXRHS, ITERAT
 601  FORMAT(/37H *** WE HAVE A NEW JOB, SO NEWJOB = 1//
     .	 56H FIRST WE CALL SUBROUTINE NURSE, FOR OBVIOUS DIAGNOSTICS//
     .	 39H IT IS NOT A RE-SOLUTION, SO IFCOEF = 1//
     .	 28H NUMBER OF ELEMENTS = NELZ =,I4/
     .	 48H NUMBER OF NODES WITH SOME FIXED VALUES = NFIX =,I3/
     .	 48H NUMBER OF NODES WITH ADDITIONAL LOADS = NLOAD =,I4/
     .	 55H NUMBER OF NODES WITH ADDITIONAL STIFFNESSES = NEXTIF =,I4/
     .	 38H NUMBER OF RIGHT HAND SIDES = NEWRHS =,I3/
     .	 52H MAXIMUM R.H.S. ENVISAGED IN RE-SOLUTIONS = MAXRHS =,I3/
     .	 37H IS IT AN ITERATIVE PROBLEM. ITERAT =,I2)
C
C*** CREATE THE FATAL DIAGNOSTIC MESSAGES, WHICH WILL STOP THE MACHINE.
C
      IF(NELZ.LE.0) CALL DOCTOR(-1,1)
      LENGTH = 21*NELZ
      IF(LENGTH.GT.LENINT) CALL DOCTOR(-2,LENGTH)
      IF(NEXTIF.LT.0. OR .NLOAD.LT.0. OR .NEWRHS.LT.0. OR .ITERAT.LT.0)
     .	 CALL DOCTOR(3,1)
C
C*** COMPUTE DIMENSIONAL QUANTITIES, WHICH MIGHT OTHERWISE BE INPUT DATA
C
      IPROP = 0
      JPROP = 0
      LNOMAX = 0
      MAXTRS = 0
      NDFMAX = 0
      NDIM = 0
      NODMAX = 0
C
C*** READ THE PROPERTY NUMBER OF EACH ELEMENT, AND THE NODAL CONNECTIONS
C
      MAXTYP = 12
      WRITE(6,602) MAXTYP
 602  FORMAT(/51H NUMBER OF ELEMENT TYPES NOW IMPLEMENTED = MAXTYP =,I3
     .	 //8H ELEMENT,6X,8HPROPERTY,4X,
     .	 20HNODE NUMBERS = LNODS/7H NUMBER,5X,7H= LPROP/)
      DO 4 L = 1,NELZ
      READ(5,*, ERR = 23, END = 23) NEL, LPOP, (NTEMP(NOD), NOD = 1,8)
      IF(NEL.NE.L) CALL DOCTOR(4,NEL)
      IF(LPOP.LE.0) CALL DOCTOR(5,NEL)
      IF(LPOP.GT.JPROP) JPROP = LPOP
      NVEC(L) = LPOP
      DO 2 NOD = 1,8
      NUMBER = NTEMP(NOD)
      IF(NUMBER.EQ.0) GO TO 3
      NVEC(NELZ+20*(L-1)+NOD) = NUMBER
      IF(NUMBER.GT.NODMAX) NODMAX = NUMBER
      IF(NOD.GT.LNOMAX) LNOMAX = NOD
    2 CONTINUE
    3 IF(NOD.EQ.1) CALL DOCTOR(6,NEL)
C
C*** PRINT IT AND PUT THE NODE NUMBERS IN THEIR FINAL LOCATIONS IN LNODS
C
    4 WRITE(6,604) NEL, LPOP, (NTEMP(NO), NO = 1,NOD-1)
 604  FORMAT(1X,I4,I13,6X,20I4)
      DO 6 L = 1,NELZ
      DO 6 NOD = 1,LNOMAX
    6 NVEC(NELZ+LNOMAX*(L-1)+NOD) = NVEC(NELZ+20*(L-1)+NOD)
C
C*** AND CORRESPONDING PROPERTY LIST HEADINGS IN THE DATA FILE, FILE05.
C
      DO 10 JP = 1,JPROP
      READ(5,503, ERR = 24, END = 24) GARB, JPRO
 503  FORMAT(A13,I2,A64)
      IF(JPRO.NE.JP) CALL DOCTOR(7,JPRO)
      READ(5,503, ERR = 25, END = 25) GARB, LTYP, QUEST
      WRITE(6,606) JPRO, LTYP, QUEST
 606  FORMAT(/21H PROPERTY LIST NUMBER,I3,4X,12HELEMENT TYPE,I3,9X,A64/)
      NVEC(NELZ*(LNOMAX+1)+JP) = LTYP
      IF(LTYP.LT.0. OR .LTYP.GT.MAXTYP) CALL DOCTOR(8,JPRO)
      NDF(1,LTYP) = -IABS(NDF(1,LTYP))
      IF(LTYP.EQ.6) NEWRHS = 3
      MAXRHS = NEWRHS
      MAXIP = MAXDIM(LTYP,3)
      DO 8 ISTART = 1,MAXIP,7
      DO 7 I = 1,2
      READ(5,505, END = 26) (WORD(J), J = 1,7)
 505  FORMAT(2X,7A11)
    7 WRITE(6,608) (WORD(J), J = 1,7)
 608  FORMAT(6X,7(5X,A11))
C
C*** ALSO THE PROPERTIES THEMSELVES, INTO TEMPORARY STORAGE LOCATIONS.
C
      READ(5,*, ERR = 26, END = 26) (TEMP(I), I = 1,7)
      WRITE(6,610) (TEMP(I), I = 1,7)
 610  FORMAT(7X,7E16.6)
      IDEL = (NELZ*(LNOMAX+1)+JPROP+2*NFIX+1)/INTEG
      DO 8 I = 1,7
      IPRO = ISTART - 1 + I
      IF(WORD(I).NE.BLANK) IWORD = IPRO
      IF(TEMP(I).NE.0.0) LASTNZ = IPRO
    8 VEC(IDEL+21*(JP-1)+IPRO) = TEMP(I)
      IF(IWORD.NE.MAXIP) CALL DOCTOR(100,JP)
      IF(LASTNZ.GT.MAXIP) CALL DOCTOR(9,JP)
      IF(LASTNZ.LT.MAXIP) CALL DOCTOR(101,JP)
C
C*** THESE ITEMS BECOME THE SOURCE OF SEVERAL OF THE BASIC JOB-DIMENSION
C
      IF(MAXIP.GT.IPROP) IPROP = MAXIP
      ND = MAXDIM(LTYP,1)
      IF(NDIM.NE.ND. AND .NDIM.NE.0) CALL DOCTOR(10,JP)
      NDIM = ND
      IF(MAXTRS.LT.MAXDIM(LTYP,2)) MAXTRS = MAXDIM(LTYP,2)
      DO 10 NOD = 1,8
      IF(NDF(NOD,LTYP).GT.NDFMAX) NDFMAX = NDF(NOD,LTYP)
   10 CONTINUE
      DO 12 JP = 1,JPROP
      DO 12 I = 1,IPROP
   12 VEC(IDEL+IPROP*(JP-1)+I) = VEC(IDEL+21*(JP-1)+I)
      WRITE(6,612) NODMAX, LNOMAX, NDFMAX, NDIM, IPROP, JPROP, MAXTRS
 612  FORMAT(/31H MAXIMUM NODE NUMBER = NODMAX =,I4/
     .	 37H MAXIMUM NODES PER ELEMENT = LNOMAX =,I2/
     .	 47H MAXIMUM DEGREES OF FREEDOM PER NODE = NDFMAX =,I2/
     .	 39H NUMBER OF DIMENSIONS, 2 OR 3, = NDIM =,I2/
     .	 56H NUMBER OF PROPERTIES, E.G. THICKNESS, DENSITY = IPROP =,I3/
     .	 49H NUMBER OF SETS OF PROPERTIES AVAILABLE = JPROP =,I4/
     .	 49H MAXIMUM NUMBER OF STRESSES AT A POINT = MAXTRS =,I4)
C
C*** SOME OTHER FATAL ERRORS NOW REVEAL THEMSELVES, MAINLY SYSTEM ERRORS
C
      IF(NDIM.LT.1. OR .NDIM.GT.4) CALL DOCTOR(11,1)
      IF(MAXRHS.LT.0) CALL DOCTOR(12,1)
      IF(NEWRHS.GT.MAXRHS) CALL DOCTOR(13,1)
      IF(NDFMAX.EQ.0) CALL DOCTOR(14,1)
      IF(IPROP.EQ.0) CALL DOCTOR(15,1)
      IF(NFIX.GT.NODMAX) CALL DOCTOR(16,1)
      IF(NLOAD.GT.NODMAX) CALL DOCTOR(17,1)
      IF(NEXTIF.GT.NODMAX) CALL DOCTOR(18,1)
      IF(LENVEC.LE.0) CALL DOCTOR(19,1)
      IF(INTEG.NE.1. AND .INTEG.NE.2) CALL DOCTOR(20,1)
C
C*** CREATE THE NON-FATAL ERROR MESSAGES, WHICH SHOULD MERELY WARN USER.
C
      IF(NELZ*LNOMAX.LT.NODMAX) CALL DOCTOR(102,1)
      IF(LNOMAX.LE.NDIM) CALL DOCTOR(103,1)
      IF(NDFMAX.GT.6) CALL DOCTOR(104,1)
      IF(NDIM.NE.2. AND .NDIM.NE.3) CALL DOCTOR(105,1)
      IF(NELZ*LNOMAX/10.GT.NODMAX) CALL DOCTOR(106,1)
      IF(IPROP.GT.10) CALL DOCTOR(107,1)
      IF(JPROP.GT.50) CALL DOCTOR(108,1)
      IF(NFIX.LT.NDIM) CALL DOCTOR(109,1)
      IF(LENVEC.LE.300. OR .LENVEC.GE.100000) CALL DOCTOR(110,1)
C
C*** CREATE NUMBERS FOR ENTRY ADDRESSES IN VEC OR NVEC FOR CALLING LISTS
C
      I1 = 1 + NELZ
      I2 = I1 + LNOMAX*NELZ
      I3 = I2 + JPROP
      I4 = I3 + NFIX
      IF(INTEG.EQ.0) CALL DOCTOR(-20,1)
      J1 = (I4 + NFIX)/INTEG + 1
      J2 = J1 + IPROP*JPROP
      J3 = J2 + NODMAX*NDIM
      J4 = J3 + NFIX*NDFMAX*NEWRHS
      J5 = J4 + NLOAD*NDFMAX*NEWRHS
      K1 = (J5 + NEXTIF*NDFMAX)*INTEG + 1
      IF(NEWRHS.LE.0) K1 = K1 + (1-NEWRHS)*(NFIX+NLOAD)*NDFMAX*INTEG
      K2 = K1 + NLOAD
      K3 = K2 + NEXTIF
      LENGTH = K3/INTEG + 1
      IF(LENGTH.GT.LENVEC) CALL DOCTOR(21,LENGTH)
      RETURN
   22 CALL DOCTOR(-22,1)
   23 CALL DOCTOR(-23,1)
   24 CALL DOCTOR(-24,1)
   25 CALL DOCTOR(-25,1)
   26 CALL DOCTOR(-26,1)
      END
      SUBROUTINE DOCTOR(NERR, NDELT)
C352
C*** TO RECORD DATA ERRORS, AND TO LIST THEM IF WE INTERROGATE IT LATER.
C
      DIMENSION NERROR(150)
      CHARACTER IMAGE*80, NERALF*4, NALF*4
      EQUIVALENCE (NA,NALF)
      DATA NERROR/150*0/, NONFAT/0/, MORTS/0/
C
C*** IF NERR IS ZERO, WE WRITE THE LIST OF ERRORS AND STOP IF NECESSARY.
C
      NER = IABS(NERR)
      IF(NERR.EQ.0) GO TO 3
      IF(NER.GT.150) GO TO 22
C
C*** OTHERWISE, WE SIMPLY RECORD THE ERROR THAT WE HAVE JUST ENCOUNTERED
C
      NERROR(NER) = NERROR(NER) + NDELT
      IF(NERROR(NER).EQ.0) NERROR(NER) = 1
    2 IF(NER.LE.99) MORTS = MORTS + 1
      IF(NER.GE.100) NONFAT = NONFAT + 1
      IF(NERR.GT.0) RETURN
C
C*** NONFATAL ERRORS ARE PRESENTED FIRST REGARDLESS OF THE VALUE OF NERR
C
    3 IF(NONFAT.EQ.0) GO TO 12
      WRITE(6,600) NONFAT
 600  FORMAT(//12H *** LIST OF,I4,22H NONFATAL DATA ERRORS ,3(1H*))
      NONFAT = 0
      NER = 100
    4 NER = NER + 1
      IF(NER.GT.150) GO TO 12
      IF(NERROR(NER).EQ.0) GO TO 4
      WRITE(6,602) NER, NERROR(NER)
 602  FORMAT(/10X,5HERROR,I4,6X,17HASSOCIATED NUMBER,I6/)
      NERROR(NER) = 0
      NONFAT = 0
C
C*** LOOK THROUGH 'FEMBOOB' TO FIND THE DETAILED ERROR MESSAGE.
C
    6  CONTINUE
C    6 IF(NER.LE.9) NA = 4303372336 + NER
C      IF(NER.GE.10. AND .NER.LE.99) NA = 4303380528 + 202*(NER/10) + NER
C      IF(NER.GT.100)
C     .   NA = 4307574832 + 257024*(NER/100) + 502*(NER/10) + NER
      REWIND 99
      DO 10 LINE = 1,1500
      READ(99,990, END = 11) NERALF
 990  FORMAT(A4)
      IF(NERALF.NE.NALF) GO TO 10
      READ(99,992, END = 11, ERR = 24) LINES, IMAGE
 992  FORMAT(I1,A80)
      WRITE(6,608) IMAGE
      IF(LINES.EQ.1) GO TO 11
      DO 8 L = 1, LINES-1
      READ(99,994, END = 11) IMAGE
 994  FORMAT(A80)
    8 WRITE(6,608) IMAGE
      GO TO 11
   10 CONTINUE
      WRITE(6,603)
 603  FORMAT(32H NO ERROR MESSAGE YET IN FEMBOOB)
   11 IF(NER.LT.99) GO TO 14
      IF(NER.LT.150) GO TO 4
C
C*** ONLY IF NERR WAS NEGATIVE OR ZERO, LIST THE FATAL ERRORS, AND STOP.
C
   12 IF(MORTS.EQ.0) RETURN
      WRITE(6,604) MORTS
 604  FORMAT(//12H *** LIST OF,I4,19H FATAL DATA ERRORS ,6(1H*))
      NER = 0
   14 NER = NER + 1
      IF(NER.GT.99) GO TO 16
      IF(NERROR(NER).EQ.0) GO TO 14
      WRITE(6,602) NER, NERROR(NER)
      GO TO 6
C
C*** PRINT ALL DATA CARDS FOLLOWING A FATAL ERROR, WHEN COMPUTING STOPS.
C
   16 DO 18 I = 1,99
   18 NERROR (I) = 0
      WRITE(6,606)
 606  FORMAT(//50H NOW FOLLOWS A LISTING OF POST-DISASTER DATA CARDS/)
   20 READ(5,500, END = 26) IMAGE
 500  FORMAT(A80)
      WRITE(6,608) IMAGE
 608  FORMAT(15X,A80)
      GO TO 20
C
C*** TELL THE USER THAT HE HAS INTRODUCED A NEW AND UNACCEPTABLE ERROR.
C
   22 NERROR(28) = NERR
      GO TO 2
   24 NERROR(29) = NERR
      WRITE(6,602) NER, NERROR(NER)
      WRITE(6,610)
 610  FORMAT(/10X,39HMESSAGE NOT AVAILABLE, ERROR IN FEMBOOB)
      NERROR(NER) = 0
      GO TO 2
   26 MORTS = 0
      DO 28 I = 1,150
   28 NERROR(I) = 0
      STOP
      END
      SUBROUTINE INPUT(COORD, IPROP, JPROP, KODFIX, LENINT, LENVEC,
     .		      LNODS, LNOMAX, NDFMAX, NDIM, NELZ, NEWRHS,
     .	 NEXTIF, NFIX, NLOAD, NODFIX, NODLOD, NOSTIF, NODMAX, NVEC, VEC,
     .	 VFIX, VLOAD, VPROP, VSTIF)
C462
C*** TO READ THE VAST BULK OF ANY STANDARD DATA THAT WILL BE REQUIRED.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION COORD(NODMAX,NDIM), KODFIX(NFIX), LNODS(LNOMAX,NELZ),
     .	 NODFIX(NFIX), NODLOD(NLOAD), NOSTIF(NEXTIF), NVEC(LENINT),
     .	 TEMP(3), VFIX(NFIX,NDFMAX,NEWRHS), VLOAD(NLOAD,NDFMAX,NEWRHS),
     .	 VEC(LENVEC), VPROP(IPROP,JPROP), VSTIF(NEXTIF,NDFMAX)
      CHARACTER JUNK
      SAVE
C
C*** LABEL ALL THE NODAL COORDINATES, PRIOR TO DEFINING CERTAIN OF THEM.
C
      DO 1 N = 1,NODMAX
      DO 1 ND = 1,NDIM
    1 COORD(N,ND) = 3.3E33
      IF(NFIX.EQ.0) GO TO 3
      DO 2 NF = 1,NFIX
      DO 2 ND = 1,NDFMAX
      DO 2 NR = 1,NEWRHS
    2 VFIX(NF,ND,NR) = 0.0
    3 NFIXED = 0
C
C*** READ CERTAIN NODAL COORDINATES FINISHING WITH A LONE NEGATIVE VALUE
C
      WRITE(6,606)
 606  FORMAT(/46H NOW CALL SUBROUTINE INPUT, FOR REMAINING DATA/
     .	 /5H NODE,3X,6HFIXING,7X,1HX,10X,1HY,10X,1HZ/8X,4HCODE/)
      READ(5,500, END = 30) JUNK
 500  FORMAT(A1)
      DO 6 NOD = 1,NODMAX
      READ(5,*, ERR = 30, END = 8) N, KOD, (TEMP(ND), ND = 1,NDIM)
      NO = IABS(N)
      WRITE(6,608) NO, KOD, (TEMP(ND), ND = 1,NDIM)
 608  FORMAT(1X,I3,I7,F14.4,2F11.4)
      IF(NO.EQ.0. OR .NO.GT.NODMAX) CALL DOCTOR(-31,NO)
      IF(COORD(NO,1).NE.3.3E33) CALL DOCTOR(32,NO)
      DO 4 ND = 1,NDIM
    4 COORD(NO,ND) = TEMP(ND)
      IF(KOD.EQ.0) GO TO 5
      NFIXED = NFIXED + 1
      IF(NFIXED.GT.NFIX) CALL DOCTOR(33,NO)
      NODFIX(NFIXED) = NO
      KODFIX(NFIXED) = KOD
    5 IF(N.LT.0) GO TO 8
    6 CONTINUE
C
C*** READ THE VALUES WHICH ARE PRESCRIBED.  IN GENERAL THEY ARE NONZERO.
C
    8 READ(5,500, END = 11) JUNK
      IF(NFIXED.EQ.NFIX) GO TO 11
      WRITE(6,610)
 610  FORMAT(//4H RHS,3X,6HFIXING,5X,4HNODE,7X,4HCODE,4X,
     .	 12HFIXED VALUES/7X,6HNUMBER,3X,8H(NODFIX),3X,8H(KODFIX),
     .	 5X,6H(VFIX)/)
      DO 10 NF = NFIXED+1,NFIX
      READ(5,*, ERR = 34, END = 34) NODFIX(NF), KODFIX(NF),
     .	 ((VFIX(NF,I,NR), I = 1,NDFMAX), NR = 1,NEWRHS)
      DO 10 NR = 1,NEWRHS
   10 WRITE(6,612) NR, NF, NODFIX(NF), KODFIX(NF),
     .	 (VFIX(NF,I,NR), I = 1,NDFMAX)
 612  FORMAT(1X,I2,I8,I9,I12,3X,6F14.7)
C
C*** READ THE SELECTED ADDITIONAL POINT LOADS, ACTING AT CERTAIN NODES.
C
   11 READ(5,500, END = 14) JUNK
      IF(NLOAD.EQ.0) GO TO 14
      WRITE(6,614)
 614  FORMAT(//4H RHS,3X,4HLOAD,5X,4HNODE,8X,14HEXTERNAL LOADS/
     .	 7X,3HNO.,4X,8H= NODLOD,4X,7H= VLOAD/)
      DO 12 N = 1,NLOAD
      READ(5,*, ERR = 35, END = 35) NODLOD(N),
     .	 ((VLOAD(N,I,NR), I = 1,NDFMAX), NR = 1,NEWRHS)
      DO 12 NR = 1,NEWRHS
   12 WRITE(6,616) NR, N, NODLOD(N), (VLOAD(N,I,NR), I = 1,NDFMAX)
 616  FORMAT(1X,I2,I7,I8,8X,6F16.7)
C
C*** READ THE SELECTED ADDITIONAL DIAGONAL STIFFNESSES, IF THERE ARE ANY
C
   14 READ(5,500, END = 20) JUNK
      IF(NEXTIF.EQ.0) GO TO 20
      WRITE(6,618)
 618  FORMAT(//11H STIFFENING,3X,4HNODE,8X,22HADDITIONAL STIFFNESSES/
     .	 12X,8H= NOSTIF,4X,7H= VSTIF/)
      DO 18 N = 1,NEXTIF
      READ(5,*, ERR = 36, END = 36) NOSTIF(N),
     .	 (VSTIF(N,I), I = 1,NDFMAX)
C
C*** THEY MAY NOT BE POSITIVE, SO RISKING A NON-POSITIVE-DEFINITE MATRIX
C
      DO 16 I = 1,NDFMAX
      IF(VSTIF(N,I).LT.0.0) CALL DOCTOR(37,N)
   16 CONTINUE
   18 WRITE(6,620) N, NOSTIF(N), (VSTIF(N,I), I = 1,NDFMAX)
 620  FORMAT(1X,I4,I11,4X,6F14.7)
   20 RETURN
   30 CALL DOCTOR(-30,1)
   34 CALL DOCTOR(-34,1)
   35 CALL DOCTOR(-35,1)
   36 CALL DOCTOR(-36,1)
      END
      SUBROUTINE MATRON(COORD, IFCOEF, INTEG, JPROP, J3, KODFIX, K3, K4,
     .		       LENVEC, LIMFRO, LNODS, LNOMAX, LPROP, LTYPE,
     .	 LVMAX, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13,
     .	 L14, MAXRHS, MAXTRS, M1, M2, M3, NBUFZ, NDFMAX, NDIFRO, NDIM,
     .	 NELZ, NEWJOB, NEWRHS, NEXTIF, NFIX, NLOAD,
     .	 NODFIX, NODLOD, NODMAX, NOSTIF)
C575
C*** TO CRITICIZE THE DATA FROM INPUT, AND TO COMPUTE A FEW MORE
C
C*** DIMENSIONS NEEDED BY FRONT.  ALSO TO MAKE NEGATIVE THE LAST
C
C*** APPEARANCE OF EACH NODE NUMBER, IN THE ARRAY LNODS.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION COORD(NODMAX,NDIM), KODFIX(NFIX), LNODS(LNOMAX,NELZ),
     .	 LPROP(NELZ), LTYPE(JPROP), NDIFRO(NELZ),
     .	 NODFIX(NFIX), NODLOD(NLOAD), NOSTIF(NEXTIF)
      COMMON/SYSTEM/MAXDIM(12,3), NDF(8,12)
      SAVE
C
C*** CHECK AGAINST ENTERING SEVERAL IDENTICAL SETS OF NODAL COORDINATES.
C
      WRITE(6,600)
 600  FORMAT(/49H CALL SUBROUTINE MATRON, FOR THOROUGH DIAGNOSTICS)
      IF(NEWJOB.EQ.0) GO TO 60
      DO 10 N = 2,NODMAX
      IF(COORD(N,1).EQ.3.3E33) GO TO 10
      MZ = N - 1
      DO 8 M = 1,MZ
      DO 6 ND = 1,NDIM
      IF(COORD(N,ND).NE.COORD(M,ND)) GO TO 8
    6 CONTINUE
      CALL DOCTOR(113,1)
    8 CONTINUE
   10 CONTINUE
C
C*** CHECK LNODS FOR IMPOSSIBLE NODE NUMBERS AND ENTIRELY ZERO ELEMENTS.
C
      MAXTYP = 0
      DO 14 L = 1,NELZ
      LP = LPROP(L)
      IF(LTYPE(LP).GT.MAXTYP) MAXTYP = LTYPE(LP)
      IF(LPROP(L).LE.0) CALL DOCTOR(40,1)
      NAXEPT = 0
      DO 12 N = 1,LNOMAX
      IF(LNODS(N,L).NE.0) NAXEPT = 1
      IF(LNODS(N,L).LT.0) CALL DOCTOR(41,1)
   12 CONTINUE
      IF(NAXEPT.EQ.0) CALL DOCTOR(42,1)
C
C*** ALSO FOR A ZERO BETWEEN ANY PAIR OF NONZERO NODES IN THIS ELEMENT.
C
      DO 14 N = 2,LNOMAX
      IF(LNODS(N-1,L).EQ.0. AND .LNODS(N,L).NE.0) CALL DOCTOR(43,1)
   14 CONTINUE
C
C*** CHECK THAT A PROPERTY LIST IS NOT USED FOR SEVERAL TYPES OF ELEMENT
C
      DO 18 J = 1,JPROP
      LTYP = 0
      DO 16 L = 1,NELZ
      LPOP = LPROP(L)
      IF(LPOP.NE.J) GO TO 16
      LTYP = LTYPE(LPOP)
   16 CONTINUE
      IF(LTYP.EQ.0) CALL DOCTOR(114,LPOP)
   18 CONTINUE
C
C*** DETERMINE THE MAXIMUM NUMBER OF VARIABLES POSSESSED BY ANY ELEMENT.
C
      LVMAX = 0
      DO 22 J = 1,MAXTYP
      IF(NDF(1,J).GT.0) GO TO 22
      NDF(1,J) =  - NDF(1,J)
      LV = 0
C
C*** CHECK FEASIBILITY OF NDF = NUMBER OF DEGREES OF FREEDOM PER NODE.
C
      DO 20 N = 1,LNOMAX
      ND = NDF(N,J)
      IF(ND.LT.0) CALL DOCTOR(44,1)
      IF(N.EQ.1) GO TO 20
      IF(ND.NE.0. AND .NDF(N-1,J).EQ.0) CALL DOCTOR(45,1)
   20 LV = LV + ND
      IF(LV.EQ.0) CALL DOCTOR(46,1)
      IF(LV.GT.LVMAX) LVMAX = LV
   22 CONTINUE
C
C*** CHECK THE FEASIBILITY OF THE DATA FOR THE PRESCRIBED DEFLECTIONS.
C
      IF(NFIX.EQ.0) GO TO 26
      DO 24 N = 1,NFIX
      NF = NODFIX(N)
      IF(NF.LE.0. OR .NF.GT.NODMAX) CALL DOCTOR(47,NF)
      IF(KODFIX(N).LT.0) CALL DOCTOR(48,NF)
      IF(KODFIX(N).EQ.0) CALL DOCTOR(115,NF)
      MZ = N-1
      DO 24 M = 1,MZ
      IF(N.NE.1. AND .NF.EQ.NODFIX(M)) CALL DOCTOR(49,NF)
   24 CONTINUE
C
C*** CONTINUE CHECKING THE DATA FOR THE ADDITIONAL POINT LOADS, IF ANY.
C
   26 IF(NLOAD.EQ.0) GO TO 30
      DO 28 N = 1,NLOAD
      NL = NODLOD(N)
      IF(NL.LE.0. OR .NL.GT.NODMAX) CALL DOCTOR(50,NL)
      MZ = N - 1
      DO 28 M = 1,MZ
      IF(N.NE.1. AND .NL.EQ.NODLOD(M)) CALL DOCTOR(51,NL)
   28 CONTINUE
C
C*** CONTINUE CHECKING THE ADDITIONAL DIAGONAL STIFFNESS DATA, IF ANY.
C
   30 IF(NEXTIF.EQ.0) GO TO 34
      DO 32 N = 1,NEXTIF
      NS = NOSTIF(N)
      IF(NS.LE.0. OR .NS.GT.NODMAX) CALL DOCTOR(52,NS)
      MZ = N - 1
      DO 32 M = 1,MZ
      IF(N.NE.1. AND .NS.EQ.NOSTIF(M)) CALL DOCTOR(53,NS)
   32 CONTINUE
C
C*** ENQUIRE IF THE CAPACITY OF VEC IS ADEQUATE FOR THE REMAINING CHECKS
C
   34 LENGTH = (K3+NELZ)/INTEG + 2
      IF(LENVEC.LT.LENGTH) CALL DOCTOR(-54,LENGTH)
      DO 36 L = 1,NELZ
   36 NDIFRO(L) = 0
C
C*** CHECK FOR ANY REPETITION OF A NODE NUMBER WITHIN THE SAME ELEMENT.
C
      DO 56 N = 1,NODMAX
      LSTART = 0
      DO 42 L = 1,NELZ
      NODUPL = 0
      DO 40 NOD = 1,LNOMAX
      IF(LNODS(NOD,L).NE.N) GO TO 40
      NODUPL = NODUPL + 1
      IF(NODUPL.GT.1) CALL DOCTOR(116,1)
C
C*** SEEK THE FIRST, LAST, AND INTERMEDIATE APPEARANCES OF THE NODE, N.
C
      LTYP = LTYPE(LPROP(L))
      IF(LSTART.NE.0) GO TO 38
      LSTART = L
C
C*** CREATE NDIFRO = INCREASE OR DECREASE OF FRONTWIDTH AT EACH ELEMENT.
C
      ND = NDF(NOD,LTYP)
      NDIFRO(L) = NDIFRO(L) + ND
C
C*** AND MEANWHILE, DO FURTHER CHECKS OF THE VALUES OF NDF ACTUALLY USED
C
      IF(ND.EQ.0) CALL DOCTOR(55,NOD)
   38 IF(NDF(NOD,LTYP).NE.ND) CALL DOCTOR(56,1)
      LFIN = L
      NFIN = NOD
   40 CONTINUE
   42 CONTINUE
C
C*** AND CHANGE THE SIGN OF EACH NODE NUMBER, THE LAST TIME IT APPEARS.
C
      IF(LSTART.EQ.0) GO TO 44
      IF(LFIN.LT.NELZ) NDIFRO(LFIN+1) = NDIFRO(LFIN+1)- ND
      LNODS(NFIN,LFIN) = -N
      GO TO 56
C
C*** CHECK THAT WE HAVE NOT SPECIFIED THE COORDINATES FOR AN UNUSED NODE
C
   44 WRITE(6,604) N
 604  FORMAT(/25H *** BETTER FIND WHY NODE,I4,14H NEVER APPEARS)
      CALL DOCTOR(117,1)
      IF(COORD(N,1).NE.3.3E33) CALL DOCTOR(118,1)
C
C*** CHECK THAT AN UNUSED NODE NUMBER NEVER OCCURS IN THE SPECIAL LISTS.
C
      IF(NFIX.EQ.0) GO TO 48
      DO 46 M = 1,NFIX
      IF(NODFIX(M).EQ.N) CALL DOCTOR(119,1)
   46 CONTINUE
   48 IF(NLOAD.EQ.0) GO TO 52
      DO 50 M = 1,NLOAD
      IF(NODLOD(M).EQ.N) CALL DOCTOR(120,1)
   50 CONTINUE
   52 IF(NEXTIF.EQ.0) GO TO 56
      DO 54 M = 1,NEXTIF
      IF(NOSTIF(M).EQ.N) CALL DOCTOR(121,1)
   54 CONTINUE
   56 CONTINUE
C
C*** INTERPRET THE VECTOR NDIFRO, TO FIND THE LARGEST FRONTWIDTH NEEDED.
C
      LFRO = 0
      LIMFRO = 0
      DO 58 L = 1,NELZ
      LFRO = LFRO + NDIFRO(L)
      IF(LFRO.GT.LIMFRO) LIMFRO = LFRO
   58 CONTINUE
C
C*** COMPUTE THE REMAINING ADDRESSES IN ORIGINAL VECTOR, VEC, ALIAS NVEC
C
   60 IF(NEWRHS.LE.0) CALL DOCTOR(57,1)
      IF(NEWJOB.NE.0) NBUFZ = 1000000
      LENGTH = 0
      IFCOF = 0
   62 MAXR = MAXRHS-IFCOF*(MAXRHS-NEWRHS)
      K3 = (J3 + NDFMAX*(NEXTIF*IFCOF + MAXR*(NFIX+NLOAD*IFCOF)))*INTEG
     .	 + 1 + (NEXTIF+NLOAD)*IFCOF
      K4 = K3 + LIMFRO
      L1 = (K4 + LVMAX)/INTEG + 1
      L2 = L1 + NFUNC(LVMAX,LVMAX)*IFCOF
      L3 = L2 + LVMAX*MAXR
      L4 = L3 + MAXTRS*(LVMAX+MAXRHS)
      L5 = L4 + NFUNC(LIMFRO,LIMFRO)*IFCOF
      L6 = L5 + LIMFRO*MAXR
      L7 = L6 + LIMFRO*IFCOF
      IFRHS = NEWRHS*IFCOF
      L8 = L7 + LIMFRO*IFRHS
      L9 = L8 + MAXR
      L10 = L9 + MAXR
      L11 = L10 + MAXR
C
C*** DISCOVER HOW MANY EQUATIONS WILL FIT INTO THE BUFFER AREA REMAINING
C
      LENEQ = LIMFRO + MAXR + IFRHS + 2 + 2/INTEG
      NBUF = (LENVEC-L11)/LENEQ
      IF(NBUF.LT.NBUFZ. AND .NEWJOB.NE.0) NBUFZ = NBUF
      IF(L11+LENEQ.GT.LENGTH) LENGTH = L11 + LENEQ
      IFCOF = IFCOF + 1
      IF(IFCOF.EQ.IFCOEF) GO TO 62
C
C*** TEST AGAINST STORAGE REQUIREMENTS IMPOSSIBLE TO FULFIL IN A NEW JOB
C
      IF(NBUFZ.LT.1) CALL DOCTOR(58,LENGTH)
      L12 = L11 + LIMFRO*NBUFZ
      L13 = L12 + NEWRHS*NBUFZ
      L14 = L13 + NBUFZ
      M1 = (L14 + IFRHS*NBUFZ)*INTEG + 1
      M2 = M1 + NBUFZ
      M3 = M2 + NBUFZ
C
C*** CHECK FOR HOPELESS STORAGE DEMANDS IN A RE-SOLUTION OR NEW SOLUTION
C
      MZ = M3 + NBUFZ-1
      IF(MZ.GT.LENVEC*INTEG) CALL DOCTOR(59,MZ)
      RETURN
      END
      FUNCTION NFUNC(I,J)
C822
C*** FUNCTION TO FIND A TERM IN VECTOR REPRESENTING THE SYMMETRIC MATRIX
C
      NFUNC = J*(J-1)/2 + I
      RETURN
      END
      SUBROUTINE ELFILE(COORD, ELOAD, ELSTIF, IPROP, JPROP, LCOEF,
     .		       LNODS, LNOMAX, LPROP, LTYPE, LVMAX, MAXRHS,
     .	 MAXTRS, NDIM, NELZ, NEWRHS, NODMAX, STRESM, VPROP)
C837
C*** TO SELECT THE ELEMENT SUBROUTINE, AND TO GENERATE THE ELEMENT FILE.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION COORD(NODMAX,NDIM), ELCORD(9,4), ELOAD(LVMAX,NEWRHS),
     .	 ELSTIF(LCOEF), FRAME(3,3), LNODS(LNOMAX,NELZ), LPROP(NELZ),
     .	 LTYPE(JPROP), VPROP(IPROP,JPROP)
      COMMON/SYSTEM/MAXDIM(12,3), NDF(8,12)
      SAVE
      WRITE(6,600)
 600  FORMAT(/42H CREATE ELEMENT FILE, IN SUBROUTINE ELFILE)
C
C*** THE STRESS MATRICES WILL BE PUT ON FILE IN EACH ELEMENT SUBROUTINE.
C
      REWIND 7
C
C*** ALSO THE STIFFNESS MATRICES, AND CONTRIBUTIONS TO RIGHT HAND SIDES.
C
      REWIND 1
      REWIND 3
C
C*** WE PREPARE TO ENTER THE SUBROUTINE FOR EACH OF THE ELEMENTS IN TURN
C
      DO 20 L = 1,NELZ
      NEL = L
      NFIRST = 1
      LPOP = LPROP(NEL)
      LTYP = LTYPE(LPOP)
      NSTRES = MAXDIM(LTYP,2)
      IF(NSTRES.GT.MAXTRS) CALL DOCTOR(-60,NEL)
      LVABZ = 0
      DO 2 NOD = 1,LNOMAX
      IF(LNODS(NOD,NEL).EQ.0) GO TO 2
      LNODZ = NOD
      LVABZ = LVABZ + NDF(NOD,LTYP)
    2 CONTINUE
C
C*** WE INITIALIZE EACH ELEMENT MATRIX TO ZERO FOR NUMERICAL INTEGRATION
C
      DO 4 I = 1,LCOEF
    4 ELSTIF(I) = 0.0
      DO 6 NR = 1,NEWRHS
      DO 6 J = 1,LVABZ
    6 ELOAD(J,NR) = 0.0
      DO 8 NOD = 1,LNODZ
      NUMBER = IABS(LNODS(NOD,NEL))
      DO 8 ND = 1,NDIM
    8 ELCORD(NOD,ND) = COORD(NUMBER,ND)
      IF(LNODZ.LE.5. OR .LTYP.EQ.9) GO TO 14
C
C*** THE MIDSIDE NODES ARE EXACTLY CENTRAL, IF THE COORDINATES WERE NOT
C
      MID = LNODZ
      DO 12 KORN = 1,LNODZ,2
      IF(ELCORD(KORN,1).EQ.3.3E33) CALL DOCTOR(-61,NEL)
      IF(ELCORD(MID,1).NE.3.3E33) GO TO 12
      DO 10 ND = 1,NDIM
   10 ELCORD(MID,ND) = 0.5*(ELCORD(KORN,ND)+ELCORD(MID-1,ND))
   12 MID = KORN + 1
C
C*** CALL THE VARIOUS ELEMENT SUBROUTINES, ACCORDING TO "LTYP".
C
   14 NROWST = LVMAX + MAXRHS
      IF(LTYP.LE.6) CALL SUNDRY(ELCORD, ELOAD, ELSTIF, IPROP, JPROP,
     .	 LCOEF, LNODZ, LPOP, LTYP, LVABZ, LVMAX, MAXTRS, NDIM, NEL,
     .	 NEWRHS, NFIRST, NROWST, NSTRES, STRESM, VPROP)
      IF(LTYP.EQ.7) CALL BEAM(ELCORD, ELOAD, ELSTIF, IPROP, JPROP,
     .	 LCOEF, LNODZ, LPOP, LVABZ, LVMAX, MAXTRS, NDIM,
     .	 NEL, NEWRHS, NFIRST, NODMAX, NROWST, NSTRES, STRESM,
     .	 VPROP)
      IF(LTYP.EQ.8) CALL HBRQD(ELCORD, ELOAD, ELSTIF, IPROP, JPROP,
     $	  LPOP,  LVMAX, MAXTRS, NDIM,
     $	 NEL, NEWRHS, NFIRST, NROWST, NSTRES, STRESM, VPROP)
      IF(LTYP.EQ.9) CALL HBRBRK(ELCORD, ELOAD, ELSTIF, IPROP, JPROP,
     $	  LPOP,  LVMAX, MAXTRS,
     $	 NDIM, NEL, NEWRHS, NFIRST, NROWST, NSTRES, STRESM, VPROP)
      IF(LTYP.EQ.10) CALL HBRPLT(COORD,ELCORD, ELOAD, ELSTIF, IPROP,
     $	 JPROP,LCOEF,LNODS, LNODZ,LNOMAX,LPOP, LVABZ, LVMAX, MAXTRS,
     $	 NDIM, NEL,NELZ,NEWRHS,NODMAX, NROWST, NSTRES, STRESM, VPROP)
      IF(LTYP.EQ.11) CALL SHELL(COORD,ELCORD, ELOAD, ELSTIF,IPROP,JPROP,
     $	 LCOEF, LNODS, LNODZ, LNOMAX, LPOP, LVABZ, LVMAX, MAXTRS, NDIM,
     $	 NEL, NELZ, NEWRHS, NFIRST, NODMAX, NROWST, NSTRES, STRESM,
     $	 VPROP)
      IF(LTYP.EQ.12) CALL SLBEAM(ELCORD, ELOAD, ELSTIF, IPROP, JPROP,
     $	 LCOEF, LNODS, LNODZ, LNOMAX, LPOP, LVABZ, LVMAX, MAXTRS, NDIM,
     $	 NEL, NELZ, NEWRHS, NFIRST, NODMAX, NROWST, NSTRES, STRESM,
     $	 VPROP)
C
C*** AND WE CONFIRM THE FEASIBILITY OF THE STIFFNESS MATRIX THAT EMERGES
C
      DO 18 N = 1,LVABZ
      DIAG = ELSTIF(NFUNC(N,N))
      IF(DIAG.EQ.0.0) CALL DOCTOR(-62,NEL)
      IF(DIAG.LT.0.0) CALL DOCTOR(-63,NEL)
   18 CONTINUE
      WRITE(1) ELSTIF
      WRITE(3) ELOAD
   20 CONTINUE
      RETURN
      END
C
      SUBROUTINE FRONT(DIAGY, ELOAD, ELSTIF, EQ, EQLOD, EQRTOT, EQSIG,
     .		      IFCOEF, ITERAT, JPROP, KODFIX, LCOEF, LDEST,
     .	 LIMFRO, LNODS, LNOMAX, LPROP, LTYPE, LVMAX, MAXRHS, MAXTRS,
     .	 MCOEF, NAMEQ, NBUFZ, NDFEQ, NDFMAX, NELZ, NEWRHS, NEXTIF, NFIX,
     .	 NLOAD, NODFIX, NODFRO, NODLOD, NOSTIF, NPIVEQ, POTEGY, RTOTAL,
     .	 SIGDIG, STREGY, STRESM, SUBLOD, SUSTIF, VFIX, VLOAD, VSTIF)
C952
C*** WITH VARIABLE DEGREES OF FREEDOM, VARIABLE R.H.S., AND RE-SOLUTION.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION DIAGY(NEWRHS), ELOAD(LVMAX,NEWRHS), ELSTIF(LCOEF),
     .	 EQ(LIMFRO,NBUFZ), EQLOD(NBUFZ,NEWRHS), EQRTOT(NBUFZ,NEWRHS),
     .	 EQSIG(NBUFZ), KODFIX(NFIX), LDEST(LVMAX), LNODS(LNOMAX,NELZ),
     .	 LPROP(NELZ), LTYPE(JPROP), NAMEQ(NBUFZ), NDFEQ(NBUFZ),
     .	 NODFIX(NFIX), NODFRO(LIMFRO), NODLOD(NLOAD), NOSTIF(NEXTIF),
     .	 NPIVEQ(NBUFZ), POTEGY(NEWRHS), RTOTAL(LIMFRO,NEWRHS),
     .	 SIGDIG(LIMFRO), STREGY(NEWRHS), STRESM(1,1),
     .	 SUBLOD(LIMFRO,NEWRHS), SUSTIF(MCOEF), VFIX(NFIX,NDFMAX,NEWRHS),
     .	 VLOAD(NLOAD,NDFMAX,NEWRHS), VSTIF(NEXTIF,NDFMAX)
      COMMON/SYSTEM/MAXDIM(12,3), NDF(8,12)
      SAVE
C
C*** ZERO THE VECTOR THAT WILL MONITOR THE FRONTAL HOUSEKEEPING PROCESS.
C
      WRITE(6,600)
 600  FORMAT(/49H ASSEMBLE AND SOLVE EQUATIONS IN SUBROUTINE FRONT/)
      DO 4 N = 1,LIMFRO
    4 NODFRO(N) = 0
C
C*** AND WE PREPARE FOR THE MAGNETIC TAPE READING AND WRITING OPERATIONS
C
      LENFRO = 0
      NBUF = 0
      IF(IFCOEF.EQ.0) NBUF = NBUFZ
      IF(IFCOEF.EQ.1) REWIND 1
      REWIND 2
      IF(IFCOEF.EQ.1) REWIND 3
      REWIND 4
C
C*** WE IMMEDIATELY SET UP THE MAIN ELEMENT ASSEMBLY-CUM-REDUCTION LOOP.
C
      DO 60 L = 1,NELZ
      NEL = L
      IF(IFCOEF.EQ.1) READ(1) ELSTIF
      IF(IFCOEF.EQ.0) BACKSPACE 3
      READ(3) ELOAD
      IF(IFCOEF.EQ.0) BACKSPACE 3
C
C*** TO ASSEMBLE THE ELEMENT WE FIRST LOOK FOR ANY EXISTING DESTINATIONS
C
      LVABZ = 0
      DO 10 NOD = 1,LNOMAX
      NIC = IABS(LNODS(NOD,NEL))
      IF(NIC.EQ.0) GO TO 10
      ND = 0
      DO 6 LN = 1,LENFRO
      IF(NIC.NE.NODFRO(LN)) GO TO 6
      LVABZ = LVABZ + 1
      LDEST(LVABZ) = LN
      ND = ND + 1
    6 CONTINUE
      IF(ND.NE.0) GO TO 10
C
C*** WE MUST NOW SEEK SOME NEW EMPTY PLACES, FOR THE DESTINATION VECTOR.
C
      DO 8 N = 1,LIMFRO
      IF(NODFRO(N).NE.0) GO TO 8
      ND = ND + 1
      LVABZ = LVABZ + 1
      NODFRO(N) = NIC
      LDEST(LVABZ) = N
C
C*** SEE WHETHER WE HAVE ENOUGH DESTINATIONS YET, FOR THE CURRENT NODE.
C
      IF(ND.EQ.NDF(NOD,LTYPE(LPROP(NEL)))) GO TO 9
    8 CONTINUE
C
C*** THE NEW PLACES MIGHT DEMAND AN INCREASE IN THE CURRENT FRONTWIDTH.
C
    9 IF(LDEST(LVABZ).GT.LENFRO) LENFRO = LDEST(LVABZ)
   10 CONTINUE
C
C*** THE EQUATION R.H.S. NOW ACCEPT THE CONTRIBUTIONS FROM THIS ELEMENT.
C
      DO 14 I = 1,LVABZ
      IDEST = LDEST(I)
      DO 11 NR = 1,NEWRHS
      IF(IFCOEF.EQ.1) RTOTAL(IDEST,NR) = RTOTAL(IDEST,NR) + ELOAD(I,NR)
   11 SUBLOD(IDEST,NR) = SUBLOD(IDEST,NR) + ELOAD(I,NR)
      IF(IFCOEF.EQ.0) GO TO 14
C
C*** ASSEMBLE THE ELEMENT STIFFNESSES
C
      DO 12 J = 1,I
      JDEST = LDEST(J)
      TERM = ELSTIF(NFUNC(J,I))
      IF(IDEST.EQ.JDEST. AND .I.NE.J) TERM = TERM + TERM
      IF(JDEST.GE.IDEST) NFUN = NFUNC(IDEST,JDEST)
      IF(JDEST.LT.IDEST) NFUN = NFUNC(JDEST,IDEST)
   12 SUSTIF(NFUN) = SUSTIF(NFUN) + TERM
   14 CONTINUE
C
C*** RE-EXAMINE EACH ELEMENT NODE, TO ENQUIRE WHICH CAN BE ELIMINATED.
C
      DO 58 NOD = 1,LNOMAX
      NIC = -LNODS(NOD,NEL)
      IF(NIC.LE.0) GO TO 58
C
C*** THIS IS A UNIQUE TIME, TO SEE WHETHER EXTRA STIFFNESSES ARE PRESENT
C
      NEXTF = 0
      IF(NEXTIF*IFCOEF.EQ.0) GO TO 18
      DO 16 N = 1,NEXTIF
      IF(NOSTIF(N).NE.NIC) GO TO 16
      NEXTF = N
      GO TO 18
   16 CONTINUE
C
C*** AND AT THE SAME TIME WE ALSO ENQUIRE IF ANY EXTRA LOADS ARE PRESENT
C
   18 LOAD = 0
      IF(NLOAD*IFCOEF.EQ.0) GO TO 22
      DO 20 N = 1,NLOAD
      IF(NODLOD(N).NE.NIC) GO TO 20
      LOAD = N
      GO TO 22
   20 CONTINUE
C
C*** ENQUIRE INTO THE CODE, FOR FIXING THE NODE ABOUT TO BE ELIMINATED.
C
   22 NDZ = NDF(NOD,LTYPE(LPROP(NEL)))
      ND = 0
      KEYFIX = 0
      IF(NFIX.EQ.0) GO TO 26
      DO 24 N = 1,NFIX
      IF(NODFIX(N).NE.NIC) GO TO 24
      KOD = KODFIX(N)
C
C*** FOR EXAMPLE IT IS WORTH INVESTIGATING IF NUMBER IS IMPOSSIBLY LARGE
C
      IF(KOD.GT.10**NDZ/9) CALL DOCTOR(-66,KOD)
      KEYFIX = N
      GO TO 26
   24 CONTINUE
C
C*** FIND THE POSITIONS OF ANY VARIABLES THAT ARE READY FOR ELIMINATION.
C
   26 DO 56 NFRO = 1,LIMFRO
      IF(NODFRO(NFRO).NE.NIC) GO TO 56
      ND = ND + 1
C
C*** ASSEMBLE THE EXTRA STIFFNESSES DIRECTLY INTO THE GLOBAL STIFFNESS.
C
      IF(NEXTF.NE.0) SUSTIF(NFUNC(NFRO,NFRO))
     .	 = SUSTIF(NFUNC(NFRO,NFRO)) + VSTIF(NEXTF,ND)
C
C*** AND ALSO THE OCCASIONAL LOADS CAN BE ACCUMULATED, AT THE SAME TIME.
C
      IF(LOAD.EQ.0) GO TO 30
      DO 28 NR = 1,NEWRHS
      VLOD = VLOAD(LOAD,ND,NR)
      RTOTAL(NFRO,NR) = RTOTAL(NFRO,NR) + VLOD
   28 SUBLOD(NFRO,NR) = SUBLOD(NFRO,NR) + VLOD
C
C*** WRITE EQUATIONS TO DISC OR TO TAPE, OR READ THEM IN A RE-SOLUTION.
C
   30 NBUF = NBUF + 1
      IF(NBUF.LE.NBUFZ) GO TO 32
      NBUF = 1
      IF(IFCOEF.EQ.1) WRITE(2) EQ, EQSIG, NPIVEQ, NAMEQ, NDFEQ
      IF(IFCOEF.EQ.0) READ (2) EQ, EQSIG, NPIVEQ, NAMEQ, NDFEQ
      IF(IFCOEF.EQ.1) WRITE(4) EQLOD, EQRTOT
      IF(IFCOEF.EQ.0) WRITE(4) EQLOD
C
C    The following section is added to correct errors in back-substitution
C    communicated by H.J. Pitz, Darmstadt, West Germany.
      IF(IFCOEF.EQ.0) GOTO 31
      DO 29 NB = 1,NBUFZ
       DO 27 LFRO = 1,LIMFRO
   27	EQ(LFRO,NB) = 0.0
       EQSIG(NB) = 0.0
       NPIVEQ(NB) = 0.0
       NAMEQ(NB) = 0.0
       NDFEQ(NB) = 0.0
       DO 29 NR = 1,NEWRHS
	EQRTOT(NB,NR) = 0.0
   29 CONTINUE
   31 DO 33 NR = 1,NEWRHS
      DO 33 NB = 1,NBUFZ
      EQLOD(NB,NR) = 0.0
   33 CONTINUE
C
C***********************************************************************
C*** EXTRACT THE COEFFICIENTS OF THE NEW EQUATION READY FOR ELIMINATION.
C
   32 IF(IFCOEF.EQ.0) GO TO 36
      DO 34 I = 1,LENFRO
      IF(NFRO.LT.I) NPOS = NFUNC(NFRO,I)
      IF(NFRO.GE.I) NPOS = NFUNC(I,NFRO)
      EQ(I,NBUF) = SUSTIF(NPOS)
   34 SUSTIF(NPOS) = 0.0
C
C*** AND EXTRACT THE CORRESPONDING RIGHT HAND SIDES, ALSO FOR REDUCTION.
C
   36 DO 37 NR = 1,NEWRHS
      EQLOD(NBUF,NR) = SUBLOD(NFRO,NR)
      SUBLOD(NFRO,NR) = 0.0
      IF(IFCOEF.EQ.0) GO TO 37
      EQRTOT(NBUF,NR) = RTOTAL(NFRO,NR)
      RTOTAL(NFRO,NR) = 0.0
   37 CONTINUE
C
C*** COLLECT INFORMATION NEEDED LATER, SO AS TO INTERPRET THE EQUATIONS.
C
      NDFEQ(NBUF) = ND
      NPIVEQ(NBUF) = NFRO
      PIVOT = EQ(NFRO,NBUF)
      EQ(NFRO,NBUF) = 0.0
C
C*** WE ENQUIRE WHETHER THE PRESENT VARIABLE WILL BE FREE OR PRESCRIBED.
C
      IF(KEYFIX.EQ.0) GO TO 40
      KODEL = 10**(NDZ-ND)
      DO 39 NR = 1,NEWRHS
      IF(KOD.LT.KODEL. AND .VFIX(KEYFIX,ND,NR).NE.0.0)
     .	 CALL DOCTOR(125,KEYFIX)
      IF(KOD.LT.KODEL) GO TO 39
C
C*** WHEN THERE IS A PRESCRIBED DEFLECTION, THE PROCEDURE IS DIFFERENT.
C
      DO 38 NF = 1,LENFRO
   38 SUBLOD(NF,NR) = SUBLOD(NF,NR) - VFIX(KEYFIX,ND,NR)*EQ(NF,NBUF)
      IF(LOAD.EQ.0) GO TO 39
      IF(VLOAD(LOAD,ND,NR).NE.0.0) CALL DOCTOR(126,LOAD)
   39 CONTINUE
C
C*** PUT MINUS ADDRESS IN VFIX INTO NAME, TO INTERPRET EQUATION LATER.
C
      IF(KOD.LT.KODEL) GO TO 40
      KOD = KOD - KODEL
      NAMEQ(NBUF) = -KEYFIX
      IF(NEXTF.EQ.0) GO TO 50
      IF(VSTIF(NEXTF,ND).NE.0.0) CALL DOCTOR(127,NEXTF)
      GO TO 50
C
C*** ESTIMATE THE DAMAGE DONE BY ROUNDOFF IN THE CURRENT FREE VARIABLE.
C
   40 IF(IFCOEF.EQ.0) GO TO 41
      SIG = SQRT(SIGDIG(NFRO))
      EQSIG(NBUF) = SIG
      SIGDIG(NFRO) = 0.0
      IF(PIVOT.GT.SIG*1.0E-4) GO TO 43
      WRITE(6,602) PIVOT, SIG, NEL, NIC, ND
 602  FORMAT(//21H *** ERROR IN PIVOT =,E20.10,5X,
     .	 31HROOT SUM OF DIAGONALS SQUARED =,E20.10/21X,
     .	 7HELEMENT,I4,9X,4HNODE,I3,9X,8HVARIABLE,I2)
      IF(PIVOT.LT.0.0) CALL DOCTOR(128,NIC)
      CALL DOCTOR(129,1)
      IF(PIVOT.EQ.0.0) CALL DOCTOR(-67,NIC)
      IF(ABS(PIVOT).LT.SIG*1.0E-10) CALL DOCTOR(-68,NIC)
      GO TO 43
C
C*** ELIMINATE A FREE VARIABLE, DEALING WITH THE RIGHT HAND SIDE FIRST.
C
   41 DO 42 NR = 1,NEWRHS
   42 STREGY(NR) = STREGY(NR) + 0.5*(EQLOD(NBUF,NR))**2/PIVOT
   43 NAMEQ(NBUF) = NIC
      DO 44 NR = 1,NEWRHS
      FACT = EQLOD(NBUF,NR)/PIVOT
      DO 44 NF = 1,LENFRO
   44 SUBLOD(NF,NR) = SUBLOD(NF,NR) - FACT*EQ(NF,NBUF)
      IF(IFCOEF.EQ.0) GO TO 50
C
C*** NOW DEAL WITH THE COEFFICIENTS IN CORE, UNLESS WE ARE IN RE-SOLVE.
C
      DO 48 I = 1,LENFRO
      FACT = EQ(I,NBUF)/PIVOT
      IF(FACT.EQ.0.0) GO TO 48
      SIGDIG(I) = SIGDIG(I) + SUSTIF(NFUNC(I,I))**2
      JDEL = NFUNC(0,I)
      JA = JDEL + 1
      JZ = JDEL + I
      DO 46 J = JA,JZ
   46 SUSTIF(J) = SUSTIF(J)-FACT*EQ(J-JDEL,NBUF)
   48 CONTINUE
   50 EQ(NFRO,NBUF) = PIVOT
C
C*** RECORD THE NEW VACANT SPACE, AND REDUCE THE FRONTWIDTH IF POSSIBLE.
C
      NODFRO(NFRO) = 0
   52 IF(NODFRO(LENFRO).NE.0) GO TO 54
      LENFRO = LENFRO - 1
      IF(LENFRO.GT.0) GO TO 52
      IF(NEL.NE.NELZ) CALL DOCTOR(130,NIC)
   54 IF(ND.EQ.NDZ) GO TO 58
C
C*** COMPLETE THE ELEMENT LOOP, AND HENCE ALSO THE FORWARD ELIMINATION.
C
   56 CONTINUE
   58 CONTINUE
   60 CONTINUE
C
C*** WE MUST RECORD THE LAST EQUATIONS, FOR USE LATER IN A RE-SOLUTION.
C
      IF(IFCOEF.EQ.1) WRITE(2) EQ, EQSIG, NPIVEQ, NAMEQ, NDFEQ
      BACKSPACE 2
C
C*** ENTER BACK-SUBSTITUTION PHASE, LOOP BACKWARDS THROUGH THE ELEMENTS.
C
      DO 76 LBACK = 1,NELZ
      NEL = NELZ + 1 - LBACK
      LTYP = LTYPE(LPROP(NEL))
C
C*** COUNT THE EQUATIONS NEEDED, BEFORE THE NEXT ELEMENT CAN BE OUTPUT.
C
      NEQ = 0
      DO 62 NOD = 1,LNOMAX
      IF(LNODS(NOD,NEL).LT.0) NEQ = NEQ + NDF(NOD,LTYP)
   62 CONTINUE
C
C*** TEST WHETHER WE ARE READY TO OUTPUT THE NEXT ELEMENT IMMEDIATELY.
C
      IF(NEQ.EQ.0) GO TO 70
   64 IF(NBUF.NE.0) GO TO 66
C
C*** READ IN A NEW BLOCK OF EQUATIONS, BUT ONLY WHEN THEY ARE REQUIRED.
C
      BACKSPACE 2
      READ(2) EQ, EQSIG, NPIVEQ, NAMEQ, NDFEQ
      BACKSPACE 2
      BACKSPACE 4
      IF(IFCOEF.EQ.1) READ(4) EQLOD, EQRTOT
      IF(IFCOEF.EQ.0) READ(4) EQLOD
      BACKSPACE 4
      NBUF = NBUFZ
   66 NFRO = NPIVEQ(NBUF)
C
C*** WE NOW PREPARE FOR THE BACK-SUBSTITUTION, IN THE CURRENT EQUATION.
C
      NAM = NAMEQ(NBUF)
      IF(NAM.GT.0) NIC = NAM
      KEYFIX = -NAM
      IF(KEYFIX.GT.0) NIC = NODFIX(KEYFIX)
      NODFRO(NFRO) = NIC
      ND = NDFEQ(NBUF)
C
C*** BACK SUBSTITUTE THE EXISTING VALUES, TIMES THE GIVEN COEFFICIENTS.
C
      PIVOT = EQ(NFRO,NBUF)
      IF(NAM.GT.0) EQ(NFRO,NBUF) = 0.0
      DO 69 NR = 1,NEWRHS
      GASH = EQLOD(NBUF,NR)
      IF(KEYFIX.GT.0) SUBLOD(NFRO,NR) = VFIX(KEYFIX,ND,NR)
      DO 68 N = 1,LIMFRO
   68 GASH = GASH - SUBLOD(N,NR)*EQ(N,NBUF)
C
C*** STORE THE NEW DEFLECTION IN THE VECTOR OF RUNNING VARIABLES, SUBLOD
C
      IF(NAM.GT.0) SUBLOD(NFRO,NR) = GASH/PIVOT
      IF(KEYFIX.GT.0) VFIX(KEYFIX,ND,NR) = -GASH
C
C*** INCREMENT THE STRAIN ENERGY, POTENTIAL ENERGY, AND DIAGONAL ENERGY.
C
      DISP = SUBLOD(NFRO,NR)
      IF(NAM.GT.0) DIAGY(NR) = DIAGY(NR) + EQSIG(NBUF)*DISP**2
      IF(IFCOEF.EQ.0) GO TO 69
      FORCE = EQRTOT(NBUF,NR)
      IF(KEYFIX.GT.0) FORCE = FORCE - GASH
      STREGY(NR) = STREGY(NR) + 0.5*FORCE*DISP
      IF(NAM.GT.0) FORCE = -FORCE
      POTEGY(NR) = POTEGY(NR) + 0.5*FORCE*DISP
   69 CONTINUE
      NBUF = NBUF - 1
      NEQ = NEQ - 1
      IF(NEQ.GT.0) GO TO 64
C
C*** NOW OUTPUT THE VALUES OF THE DEFLECTIONS, FOR THE CURRENT ELEMENT.
C
   70 LVABZ = 0
      WRITE (6,604) NEL
 604  FORMAT(/19H *** OUTPUT ELEMENT,I3//5H NODE,3X,3HRHS,10X,6HVALUES/)
      DO 74 NOD = 1,LNOMAX
      NIC = IABS(LNODS(NOD,NEL))
      IF(NIC.EQ.0) GO TO 74
      DO 72 N = 1,LIMFRO
      IF(NODFRO(N).NE.NIC) GO TO 72
      LVABZ = LVABZ + 1
      DO 71 NR = 1,NEWRHS
   71 ELOAD(LVABZ,NR) = SUBLOD(N,NR)
   72 CONTINUE
C
C*** TERMINATE THE ELEMENT LOOP, AND HENCE THE BACK-SUBSTITUTION PHASE.
C
      NA = LVABZ - NDF(NOD,LTYP) + 1
      DO 73 NR = 1,NEWRHS
   73 WRITE(6,606) NIC, NR, (ELOAD(N,NR), N = NA,LVABZ)
 606  FORMAT(1X,I3,I6,6E18.5)
   74 CONTINUE
      NROWST = LVMAX + MAXRHS
      IF(ITERAT.EQ.0)
     .	 CALL STRESS(ELOAD, LTYP, LVABZ, LVMAX, MAXTRS, NEWRHS, NROWST,
     .	 STRESM)
C     IF(ITERAT.EQ.1) CALL RESID
   76 CONTINUE
C
C*** WRITE OUT THE FINAL REACTIONS TO EARTH, REPLACING THE DEFLECTIONS.
C
      DO 80 NR = 1,NEWRHS
      WRITE(6,608) NR
 608  FORMAT(//16H RIGHT HAND SIDE,I2)
      IF(NFIX.EQ.0) GO TO 79
      WRITE(6,609)
 609  FORMAT(/5H NODE,3X,4HCODE,6X,
     .	 37HREACTIONS DUE TO PRESCRIBED VARIABLES/)
      DO 78 N = 1,NFIX
   78 WRITE(6,610) NODFIX(N), KODFIX(N), (VFIX(N,ND,NR), ND = 1,NDFMAX)
 610  FORMAT(1X,I4,I9,4X,6E15.7)
C
C*** CALCULATE VARIANCE ON STRAIN ENERGY DUE TO ROUNDOFF, AND COMMENT.
C
   79 IF(IFCOEF.EQ.0) POTEGY(NR) = -STREGY(NR)
      ERREGY = 1.0E-8*DIAGY(NR)*100.0/(STREGY(NR)+1.0E-30)
      WRITE(6,612) ERREGY, STREGY(NR), POTEGY(NR), DIAGY(NR)
 612  FORMAT(//49H *** RMS ERROR IN STRAIN ENERGY DUE TO ROUNDOFF =,
     .	 F10.5,9H PERCENT.//17H STRAIN ENERGY IS,D15.7,6X,
     .	 19HPOTENTIAL ENERGY IS,D15.7,6X,18HDIAGONAL ENERGY IS,D15.7)
      IF(DIAGY(NR).EQ.0.0) CALL DOCTOR(132,1)
      IF(STREGY(NR).LT.1.0E-8*ABS(POTEGY(NR))) CALL DOCTOR(133,1)
      IF(ERREGY.GT.0.1) CALL DOCTOR(134,1)
      IF(ERREGY.GT.5.0) CALL DOCTOR(70,1)
   80 CONTINUE
      RETURN
      END
      SUBROUTINE STRESS(ELDISP, LTYP, LVABZ, LVMAX, MAXTRS,
     .		       NEWRHS, NROWST, STRESM)
C1367
C*** TO CALCULATE AND PRINT THE STRESSES INTELLIGIBLY, FOR ALL ELEMENTS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ELDISP(LVMAX,NEWRHS), STRESM(NROWST,MAXTRS)
      DIMENSION DIREC(3,3), FRAME(3,3), POIN(3,4), PRIN(3), STRES(6)
      COMMON/SYSTEM/MAXDIM(12,3), NDF(8,12)
      SAVE
      NDIM = MAXDIM(LTYP,1)
      NSTRES = MAXDIM(LTYP,2)
      DO 54 N = 1,27
      BACKSPACE 7
      READ(7) NGAU, NS, LV, STRESM, POIN, FRAME, DET
      BACKSPACE 7
      IF(NS.NE.NSTRES) CALL DOCTOR(-73,NS)
      IF(LV.NE.LVABZ) CALL DOCTOR(-74,LV)
      WRITE(6,604) (POIN(I,1), I = 1,NDIM)
 604  FORMAT(/21H STRESSING POINT, X =,F10.6,6X,3HY =,F10.6:
     .	 6X,3HZ =,F10.6)
      IF(NDIM*NDF(2,LTYP).GE.15) WRITE(6,606) FRAME
 606  FORMAT(/53H THE STRESSES WILL BE IN THE LOCAL AXES, GIVEN BY THE,
     .	 10H ROWS OF (,3F8.5,1H)/(62X,1H(,3F8.5,1H)))
C
C*** STRESS MATRIX RETRIEVED - SO MULTIPLY IT BY THE ELEMENT DEFLECTIONS
C
      DO 52 NR = 1,NEWRHS
      DO 6 I = 1,NSTRES
      GASH = STRESM(LVABZ+NR,I)
      DO 4 J = 1,LVABZ
    4 GASH = GASH + STRESM(J,I)*ELDISP(J,NR)
    6 STRES(I) = GASH
      GO TO (8, 10, 12, 14, 16, 50, 32, 10, 34, 38, 44, 50), LTYP
C
C*** DEFLECTIONS AND SLOPES FOR THE SIMPLE MEMBRANE ELEMENT, TYPE 1.
C
    8 CALL PRINPL(1, THETA, DEGREE, DIREC, PRIN, STRES(2))
      WRITE(6,608) STRES(1), PRIN(1), DEGREE
 608  FORMAT(4X,12HDEFLECTION =,F7.4,2X,7HSLOPE =,F7.4,
     .	 13H, AT AN ANGLE,F8.2,31H DEGREES ANTICLOCKWISE FROM OX./)
      GO TO 52
C
C*** PLANE STRESS OR PLANE STRAIN, BOTH ELEMENT TYPE 2, OR HYBRID TYPE 8
C
   10 CALL PRINPL(2, THETA, DEGREE, DIREC, PRIN, STRES(1))
      WRITE(6,610) PRIN(1), DEGREE, PRIN(2)
 610  FORMAT(31H THE LARGER PRINCIPAL STRESS IS,E13.6,
     .	 13H, AT AN ANGLE,F8.2,36H DEGREES TO OX.  THE OTHER PRINCIPAL,
     .	 10H STRESS IS,E13.6)
      GO TO 52
C
C*** AXISYMMETRIC OBJECT, IN TORSION ONLY, ELEMENT TYPE 3.
C
   12 CALL PRINPL(1, THETA, DEGREE, DIREC, PRIN, STRES(2))
      ROT = STRES(1)/POIN(2,1)
      WRITE(6,612) ROT, PRIN(1), DEGREE
 612  FORMAT(4X,20HROTATION (RADIANS) =,E13.6,4X,7HSHEAR =,E12.5,
     .	 16H, AT AN ANGLE OF,F6.1,6H TO OX)
      GO TO 52
C
C*** AXISYMMETRIC OBJECT UNDER PRESSURE, ETC. ELEMENT TYPE 4.
C
   14 CALL PRINPL(2, THETA, DEGREE, DIREC, PRIN, STRES)
      WRITE(6,614) PRIN(1), DEGREE, PRIN(2), STRES(4)
 614  FORMAT(19H PRINCIPAL STRESS =,E12.5,10H, AT ANGLE,F6.1,
     .	 28H TO OX.  OTHER PRIN STRESS =,E12.5,4X,14H HOOP STRESS =,
     .	 E12.5)
      GO TO 52
C
C*** AXISYMMETRIC OBJECT IN BENDING, ELEMENT TYPE 5.
C
   16 CALL PRINPL(2, THETA, DEGREE, DIREC, PRIN, STRES)
      WRITE(6,614) PRIN(1), DEGREE, PRIN(2), STRES(4)
      CALL PRINPL(1, THETA, DEGREE, DIREC, PRIN, STRES(5))
      WRITE(6,616) PRIN(1), DEGREE
 616  FORMAT(4X,45HTHIS IS FOR TOP OF BEAM - NOW SHEAR AT SIDE =,
     .	 E12.5,10H, AT ANGLE,F6.1,6H TO OX)
      GO TO 52
C
C*** THE SIMPLE BEAM ELEMENT IN 3D, TYPE 7.
C
   32 WRITE(6,632) (STRES(I), I = 1,4)
 632  FORMAT(15H TENSILE LOAD =,F10.2,4X,18HB.M. HORIZ.PLANE =,F10.2,
     1	 4X,14HB.M. Z-PLANE =,F10.2,4X,14HTORSION MOM. =,F10.2)
      GO TO 52
C
C*** THE HYBRID 8-NODE BRICK, ELEMENT TYPE 9.
C
   34 WRITE(6,634)
 634  FORMAT(10H LOAD CASE,3X,35HPRINCIPAL STRESSES IN GLOBAL SYSTEM)
      CALL PRINPL(3, THETA, DEGREE, DIREC, PRIN, STRES)
      WRITE(6,636) PRIN(1), (DIREC(J,1), J = 1,3),
     $	 PRIN(2), (DIREC(J,2), J = 1,3),
     $	 PRIN(3), (DIREC(J,3), J = 1,3)
 636  FORMAT(8H PRIN1 =,G10.4,2X,9HDIREC1= (,3F8.5,1H)/
     $	 8H PRIN2 =,G10.4,2X,9HDIREC2 =(,3F8.5,1H)/
     $	 8H PRIN3 =,G10.4,9HDIREC3= (,3F8.5,1H))
      GO TO 52
C
C*** HYBRID PLATE BENDING ELEMENTS, TYPE 10.
C
   38 WRITE(6,638)
 638  FORMAT(33H PRINCIPAL MOMENTS PER UNIT WIDTH)
      CALL PRINPL(2, THETA, DEGREE, DIREC, PRIN, STRES)
      WRITE(6,660) PRIN(1), DEGREE, (DIREC(J,1), J = 1,3),
     $	 PRIN(2), DEGREE, (DIREC(J,2), J = 1,3)
      GO TO 52
C
C*** THE SEMILOOF SHELL ELEMENT, TYPE 11.
C
   44 WRITE(6,656) NR
 656  FORMAT(10H LOAD CASE,I3,3X,19HPRINCIPAL TENSIONS,,
     .	 37H THEN BENDING MOMENTS, PER UNIT WIDTH)
      DO 48 I = 1,4,3
      CALL PRINPL(2, THETA, DEGREE, DIREC, PRIN, STRES(I))
      COSE = COS(THETA)
      SINE = SIN(THETA)
      DO 46 J = 1,3
      DIREC(J,1) = COSE*FRAME(J,1) + SINE*FRAME(J,2)
   46 DIREC(J,2) = -SINE*FRAME(J,1) + COSE*FRAME(J,2)
   48 WRITE(6,660) PRIN(1), DEGREE, (DIREC(J,1), J = 1,3),
     .	 PRIN(2), (DIREC(J,2), J = 1,3)
 660  FORMAT(8H PRIN1 =,F10.5,1H,,F5.1,22H DEGREES TO OX, I.E. (,
     .	 3F8.5,11H),  PRIN2 =,F10.5,5H AT (,3F8.5,1H))
      GO TO 52
C
C*** THE SEMILOOF BEAM ELEMENT, TYPE 12.
C
   50 WRITE(6,654) NR, STRES
 654  FORMAT(/10H LOAD CASE,8X,1HT,17X,2HQY,16X,2HQZ,16X,2HMY,16X,
     .	 2HMZ,15X,3HTOR//2X,I3,6F18.6)
      GO TO 52
   52 CONTINUE
      IF(NGAU.EQ.1) RETURN
   54 CONTINUE
      END
      SUBROUTINE PRINPL(NSTYL, THETA, DEGREE, DIREC, PRIN, SIG)
C1508
C*** TO FIND PRINCIPAL STRESSES AND THEIR DIRECTIONS IN THREE DIMENSIONS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ADJ(3,3), DIREC(3,3), PRIN(3), SIG(6), TENS(3,3)
      DATA PI/3.14159265359/, ONE/1.0/
      S1 = SIG(1)
      S2 = SIG(2)
      S3 = SIG(3)
      GO TO (2, 4, 10), NSTYL
    2 THETA = ATAN(S2/(S1+1.0E-30))
      PRIN(1) = SQRT(S1*S1+S2*S2)
      IF(S1.LT.0.0. AND .S2.GT.0.0) THETA = THETA + PI
      IF(S1.LT.0.0. AND .S2.LE.0.0) PRIN(1) = -PRIN(1)
      GO TO 8
    4 THETA = 0.5*ATAN(2.0*S3/(S1-S2+1.0E-30))
    6 IF(THETA.LT.0.0) THETA = THETA + PI
      SINE = SIN(THETA)
      COSE = COS(THETA)
      PRIN(1) = S1 + SINE*(2.0*COSE*S3 + SINE*(S2-S1))
      PRIN(2) = S1 + S2 - PRIN(1)
C
C*** MAKE THE FIRST PRINCIPAL STRESS THE LARGER OF THE TWO IN EVERY CASE
C
      IF(ABS(PRIN(1)).GE.0.99999*ABS(PRIN(2))) GO TO 8
      THETA = THETA - 0.5*PI
      GO TO 6
    8 DEGREE = THETA*180.0/PI
      RETURN
C
C*** RAPID AND FOOLPROOF ANALYTIC PROCEDURE, FOR 3X3 EIGENVALUES.
C
   10 J = 3
      DO 12 I = 1,3
      TENS(I,I) = SIG(I)
      TENS(J,6-I-J) = SIG(3+I)
      TENS(6-I-J,J) = SIG(3+I)
   12 J = I
      B = 0.0
      C = 0.0
      DO 14 I = 1,3
      B = B + TENS(I,I)
      J = I + 1
      IF(J.EQ.4) J = 1
   14 C = C - TENS(I,I)*TENS(J,J) + TENS(I,J)**2
      CALL VECTOR(TENS, TENS(1,2), ADJ)
      CALL SCALAR(ADJ, TENS(1,3), D)
C
C*** SOLVE CUBIC, -P**3 + B*P**2 - C*P + D = 0 BY TRIGONOMETRICAL METHOD.
C
      DEL = B/3.0
      C = C + B*DEL + 1.0E-35
      IF(C.LT.0.0) C = -C
      D = D + DEL*(C - DEL*DEL)
      R = SQRT(0.75/C)
      ARG = 3.0*D*R/C
      IF(ARG.GT.ONE) ARG = ONE
      IF(ARG.LT.-ONE) ARG = -ONE
      THETA = ACOS(ARG)/3.0
C
C*** PUT THE THREE ROOTS INTO DESCENDING ORDER OF MAGNITUDE.
C
      DO 16 I = 1,3
   16 PRIN(I) = COS(THETA+(I-2)*PI*2.0/3.0)/R + DEL
      DO 20 I = 1,2
      DO 18 J = I,3
      IF(ABS(PRIN(J)).LE.ABS(PRIN(I))) GO TO 18
      GASH = PRIN(I)
      PRIN(I) = PRIN(J)
      PRIN(J) = GASH
   18 CONTINUE
   20 CONTINUE
C
C*** HAVING THE THREE EIGENVALUES, NOW FIND THE EIGENVECTORS.
C
      DO 34 I = 1,3
      DEL = PRIN(1)
      IF(I.GT.1) DEL = PRIN(I) - PRIN(I-1)
      DO 22 J = 1,3
   22 TENS(J,J) = TENS(J,J) - DEL
      DO 24 J = 1,3
      K = J + 1
      IF(K.EQ.4) K = 1
   24 CALL VECTOR(TENS(1,J), TENS(1,K), ADJ(1,6-J-K))
      BIG = 0.0
      DO 28 J = 1,3
      DO 26 K = 1,3
      IF(ABS(ADJ(J,K)).LT.BIG) GO TO 26
      BIG = ABS(ADJ(J,K))
      MAXCOL = K
   26 CONTINUE
   28 CONTINUE
      DO 30 J = 1,3
      DIREC(J,I) = 0.0
      DO 30 K = 1,3
   30 DIREC(J,I) = DIREC(J,I) + ADJ(J,K)*ADJ(K,MAXCOL)/(BIG*BIG)
      CALL SCALAR(DIREC(1,I), DIREC(1,I), SCALE)
      DO 32 J = 1,3
   32 DIREC(J,I) = DIREC(J,I)/SQRT(SCALE)
      DO 34 J = 1,3
      DO 34 K = 1,3
   34 TENS(J,K) = TENS(J,K) + PRIN(I)*DIREC(J,I)*DIREC(K,I)
      RETURN
      END
