$NOFLOATCALLS
$DO66
      SUBROUTINE SCALAR(U, V, PROD)
C1616
$LARGE
C*** TO COMPUTE SCALAR PRODUCT OF VECTORS U AND V.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION U(3), V(3)
      PROD = 0.0
      DO 2 I = 1,3
    2 PROD = PROD + U(I)*V(I)
      RETURN
      END
      SUBROUTINE VECTOR(U, V, W)
C1631
C*** TO COMPUTE VECTOR PRODUCT U*V INTO AREA W.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION U(3), V(3), W(3)
      K = 3
      DO 2 I = 1,3
      W(6-I-K) = U(K)*V(I)-U(I)*V(K)
    2 K = I
      RETURN
      END
C
      SUBROUTINE SUNDRY(ELCORD, ELOAD, ELSTIF, IPROP, JPROP, LCOEF,
     .		       LNODZ, LPOP, LTYP, LVABZ, LVMAX, MAXTRS, NDIM,
     .	 NEL, NEWRHS, NFIRST, NROWST, NSTRES, STRESM, VPROP)
C1648
C*** TO CREATE VARIOUS ISOPARAMETRIC MODELS, USING THE SUBROUTINE ISOPAR
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION B(6,24), BODY(3,3), CGAUS(18), CJACIN(3,3), D(6,6),
     .	 ELCORD(9,4), ELOAD(LVMAX,NEWRHS), ELSTIF(LCOEF), FRAME(3,3),
     .	 POIN(3,4), STRESM(NROWST,MAXTRS), TEMP(6), THERM(6,3),
     .	 VPROP(IPROP,JPROP), WCORN(10,4), XGAUS(2,18), XITA(3)
      EQUIVALENCE (D(1,1),D11), (D(1,2),D12), (D(1,3),D13),
     .	 (D(2,2),D22), (D(2,3),D23), (D(3,3),D33), (D(4,4),D44),
     .	 (D(5,5),D55), (D(6,6),D66)
C
C*** DESCRIBE THE INTEGRATION RULES, AND INITIALISE THE ARRAYS.
C
      DATA XGAUS/2*0., 2*.3333333333333, 3*.577350269189626,
     .	  4*-.577350269189626,.577350269189626,
     .	 .5,2*0.,3*.5, 3*-.774596669241483,
     .	 4*.774596669241483,-.774596669241483,0.,
     .	 2*-.774596669241483,2*0.,2*.774596669241483,3*0./,CGAUS/4.,
     .	 .5, 4*1.,3*.1666666666666667,4*.308641975308642,
     .	 4*.493827160493828,.790123456790124/, FRAME/9*0.0/
      DO 2 I = 1,3
      DO 1 J = 1,3
    1 BODY(I,J) = 0.0
      DO 2 J = 1,6
    2 THERM(J,I) = 0.0
      DO 4 I = 1,6
      DO 3 J = 1,6
    3 D(I,J) = 0.0
      DO 4 J = 1,24
    4 B(I,J) = 0.0
      NRHS = 1
      GO TO (6, 8, 12, 14, 14, 28), LTYP
C
C*** ELEMENT PROPERTIES, THE FLAT MEMBRANE ELEMENT, OF TYPE 1.
C
    6 THIK = VPROP(1,LPOP)
      STIF = VPROP(2,LPOP)
      SIGXX = VPROP(3,LPOP)
      SIGYY = VPROP(4,LPOP)
      SIGXY = VPROP(5,LPOP)
      PRESS = VPROP(6,LPOP)
      NGAUS = VPROP(7,LPOP)
      D22 = SIGXX*THIK
      D33 = SIGYY*THIK
      D23 = SIGXY*THIK
      D11 = STIF
      GO TO 24
C
C*** ELEMENT PROPERTIES, THE PLANE STRESS ELEMENT, OF TYPE 2
C
    8 YOUNG = VPROP(1,LPOP)
      POIS = VPROP(2,LPOP)
      DENSTY = VPROP(3,LPOP)
      THIK = VPROP(4,LPOP)
      NGAUS = VPROP(5,LPOP)
      THRM = VPROP(6,LPOP)*VPROP(7,LPOP)
      IF(THIK.EQ.0.0) GO TO 10
      D11 = YOUNG/(1.0-POIS*POIS)
      D22 = D11
      D12 = D11*POIS
      D33 = D11*(1.0-POIS)/2.0
      GO TO 24
C
C*** ELEMENT PROPERTIES FOR THE PLANE STRAIN ELEMENT, ALSO TYPE 2.
C
   10 FACT = YOUNG/(1.0+POIS)/(1.0-POIS-POIS)
      D11 = FACT*(1.0-POIS)
      D22 = D11
      D12 = FACT*POIS
      D33 = FACT*(0.5-POIS)
      GO TO 24
C
C*** PROPERTIES, TORSION OF AN AXISYMMETRIC BODY, TYPE 3.
C
   12 SHEMOD = VPROP(1,LPOP)*0.5/(1.0+VPROP(2,LPOP))
      NGAUS = VPROP(3,LPOP)
      D11 = 0.0
      D22 = SHEMOD
      D33 = SHEMOD
      GO TO 24
C
C*** PROPERTIES, AXISYMMETRIC BODY, PRESSURE LOADS ETC., TYPE 4 OR 5.
C
   14 YOUNG = VPROP(1,LPOP)
      POIS = VPROP(2,LPOP)
      DENSTY = VPROP(3,LPOP)
      NGAUS = VPROP(4,LPOP)
      THRM = VPROP(5,LPOP)*VPROP(6,LPOP)
      FACT = YOUNG/(1.0+POIS)/(1.0-POIS-POIS)
      D11 = FACT*(1.0-POIS)
      D12 = FACT*POIS
      D14 = D12
      D22 = D11
      D24 = D12
      D33 = FACT*(0.5-POIS)
      D44 = D11
      ANGVEL = VPROP(7,LPOP)
      IF(LTYP.EQ.4) GO TO 24
      D55 = D33
      D66 = D33
      GO TO 24
C
C*** NOW PREPARE FOR THE GAUSS INTEGRATION LOOP FOR STIFFNESS AND LOADS.
C
   24 DO 26 I = 1,NSTRES
      DO 26 J = I,NSTRES
   26 D(J,I) = D(I,J)
      IF(NGAUS.EQ.0) NGAUS = 2
      IF(NGAUS.LT.0. OR .NGAUS.GT.3) CALL DOCTOR(98,1)
      IF((LNODZ.EQ.6.OR.LNODZ.EQ.3). AND .NGAUS.EQ.2) NGAUS = 3
      IF(LNODZ.EQ.4. OR .LNODZ.EQ.8) NGAUS = NGAUS*NGAUS
      IF(NGAUS.EQ.1) NDEL = 0
      IF(NGAUS.EQ.1. AND .(LNODZ.EQ.3.OR.LNODZ.EQ.6)) NDEL = 1
      IF(NGAUS.EQ.3) NDEL = 6
      IF(NGAUS.EQ.4) NDEL = 2
      IF(NGAUS.EQ.9) NDEL = 9
C
C*** ENTER GAUSS LOOP; DON'T DIFFERENTIATE YET BETWEEN VARIOUS ELEMENTS.
C
      DO 80 NGAU = 1,NGAUS
      DO 28 IXY = 1,2
   28 XITA(IXY) = XGAUS(IXY,NGAU+NDEL)
      CALL ISOPAR(CJACIN, DETJ, ELCORD, LNODZ, LTYP, NDIM, NEL, NFIRST,
     .	 POIN, WCORN, XITA)
      RAD = POIN(2,1)
      CIRC = 6.2831853*RAD
      DV = DETJ*CGAUS(NGAU+NDEL)
      GO TO (30, 34, 38, 42, 46, 70), LTYP
C
C*** MEMBRANE ELEMENT, CREATE B-MATRIX.
C
   30 DO 32 NOD = 1,LNODZ
      DO 32 I = 1,3
   32 B(I,NOD) = WCORN(NOD,I)
      BODY(1,1) = PRESS
      GO TO 60
C
C*** PLANE STRESS OR PLANE STRAIN ELEMENTS.
C
   34 DO 36 NOD = 1, LNODZ
      B(1,2*NOD-1) = WCORN(NOD,2)
      B(2,2*NOD) = WCORN(NOD,3)
      B(3,2*NOD-1) = WCORN(NOD,3)
   36 B(3,2*NOD) = WCORN(NOD,2)
      IF(THIK.NE.0.0) DV = DV*THIK
      BODY(2,1) = DENSTY
      THERM(1,1) = THRM
      THERM(2,1) = THRM
      GO TO 60
C
C*** AXISYMMETRIC ELEMENT IN TORSION, Y = RADIUS.
C
   38 DO 40 NOD = 1,LNODZ
      B(1,NOD) = WCORN(NOD,1)
      B(2,NOD) = WCORN(NOD,2)
   40 B(3,NOD) = WCORN(NOD,3) - WCORN(NOD,1)/RAD
      DV = DV*CIRC
      GO TO 60
C
C*** AXISYMMETRIC ELEMENT, PRESSURE ETC., Y = RADIUS.
C
   42 DO 44 NOD = 1,LNODZ
      B(1,2*NOD-1) = WCORN(NOD,2)
      B(2,2*NOD) = WCORN(NOD,3)
      B(3,2*NOD-1) = WCORN(NOD,3)
      B(3,2*NOD) = WCORN(NOD,2)
   44 B(4,2*NOD) = WCORN(NOD,1)/RAD
      BODY(1,1) = 0
      OMSQOG = ANGVEL**2/9.81
      BODY(2,1) = -OMSQOG*RAD*DENSTY
      DV = DV*CIRC
      THERM(1,1) = THRM
      THERM(2,1) = THRM
      THERM(4,1) = THRM
      GO TO 60
C
C*** AXISYMMETRIC ELEMENT IN BENDING, Y = RADIUS.
C
   46 DO 48 NOD = 1,LNODZ
      B(1,3*NOD-2) = WCORN(NOD,2)
      B(2,3*NOD-1) = WCORN(NOD,3)
      B(3,3*NOD-2) = WCORN(NOD,3)
      B(3,3*NOD-1) = WCORN(NOD,2)
      B(4,3*NOD-1) = WCORN(NOD,1)/RAD
      B(4,3*NOD) = WCORN(NOD,1)/RAD
      B(5,3*NOD-2) = -WCORN(NOD,1)/RAD
      B(5,3*NOD) = WCORN(NOD,2)
      B(6,3*NOD-1) = -WCORN(NOD,1)/RAD
   48 B(6,3*NOD) = -WCORN(NOD,1)/RAD + WCORN(NOD,3)
      BODY(2,1) = DENSTY
      BODY(3,1) = DENSTY
      DV = DV*0.5*CIRC
      GO TO 60
C
C*** CONTRIBUTIONS TO LOAD MATRIX AND TO ELEMENT STIFFNESS MATRIX
C
   60 NDZ = LVABZ/LNODZ
      DO 66 NOD = 1,LNODZ
      DO 66 ND = 1,NDZ
      NVAB = (NOD-1)*NDZ + ND
   66 ELOAD(NVAB,NRHS) = ELOAD(NVAB,NRHS)
     .	 - WCORN(NOD,1)*BODY(ND,NRHS)*DV
      NST = 0
      DO 76 IVAB = 1,LVABZ
      DO 72 N = 1,NSTRES
      GASH = 0.0
      DO 70 I = 1,NSTRES
   70 GASH = GASH + B(I,IVAB)*D(I,N)
      STRESM(IVAB,N) = GASH
      IF(LTYP.EQ.1. OR .LTYP.EQ.3) STRESM(IVAB,1) = WCORN(IVAB,1)
      TEMP(N) = GASH*DV
   72 ELOAD(IVAB,NRHS) = ELOAD(IVAB,NRHS) + TEMP(N)*THERM(N,NRHS)
      DO 76 JVAB = 1,IVAB
      NST = NST + 1
      GASH = ELSTIF(NST)
      DO 74 I = 1,NSTRES
   74 GASH = GASH + TEMP(I)*B(I,JVAB)
   76 ELSTIF(NST) = GASH
      DO 78 N = 1,NSTRES
      GASH = 0.0
      DO 77 I = 1,NSTRES
   77 GASH = GASH - THERM(I,NRHS)*D(I,N)
   78 STRESM(LVABZ+NRHS,N) = GASH
   80 WRITE(7) NGAU, NSTRES, LVABZ, STRESM, POIN, FRAME, DETJ
      RETURN
      END
CC
CC
CC
      SUBROUTINE ISOPAR(CJACIN, DETJ, ELCORD, LNODZ, LTYP, NDIM, NEL,
     .		       NFIRST, POIN, WCORN, XITA)
C1879
C*** TO TEST GEOMETRY, AND TRANSFORM SHAPE FUNCTIONS FOR ISO-P ELEMENTS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION CJACIN(3,3), ELCORD(9,4), POIN(3,4), WCORN(10,4),
     .	 XINOD(8,11), XITA(3), XLOCAL(3)
      DATA XINOD/1.,0.,0.,0.,0.,0.,0.,0., 0.,1.,0.,0.,0.,0.,0.,0.,
     .	 -1.,1.,1.,-1.,0.,0.,0.,0., -1.,-1.,1.,1.,0.,0.,0.,0.,
     .	 1.,.5,0.,0.,0.,.5,0.,0., 0.,.5,1.,.5,0.,0.,0.,0.,
     .	 -1.,0.,1.,1.,1.,0.,-1.,-1., -1.,-1.,-1.,0.,1.,1.,1.,0.,
     .	 -1.,1.,1.,-1.,-1.,1.,1.,-1., -1.,-1.,1.,1.,-1.,-1.,1.,1.,
     .	 -1.,-1.,-1.,-1.,1.,1.,1.,1./
      IF(NFIRST.EQ.1) GO TO 22
    2 NFIRST = 0
      XLOCAL(3) = 0.0
      DO 4 ND = 1,NDIM
    4 XLOCAL(ND) = XITA(ND)
    6 CALL SFR(LNODZ, LTYP, NDIM, 1, WCORN, XLOCAL)
C
C*** CREATE THE JACOBIAN MATRIX, AND INVERT IT, AND FIND THE DETERMINANT
C
      NDEL = 0
      DO 12 J = 1, NDIM+1
      DO 10 I = 1,NDIM
      GASH = 0.0
      DO 8 NOD = 1,LNODZ
    8 GASH = GASH + WCORN(NOD+NDEL,J)*ELCORD(NOD,I)
   10 POIN(I,J) = GASH
   12 NDEL = 1
      IF(NDIM.EQ.2) GO TO 14
      CALL MATINV(POIN(1,2), CJACIN, NDIM, DETJ)
      GO TO 16
   14 DETJ = POIN(1,2)*POIN(2,3) - POIN(1,3)*POIN(2,2)
      CJACIN(1,1) = POIN(2,3)/DETJ
      CJACIN(2,2) = POIN(1,2)/DETJ
      CJACIN(1,2) = -POIN(1,3)/DETJ
      CJACIN(2,1) = -POIN(2,2)/DETJ
   16 IF(DETJ.LE.0.0) GO TO 99
      IF(NFIRST.EQ.1) GO TO 24
C
C*** NOW WE CAN TRANSFORM SHAPE FUNCTION DERIVATIVES FROM XI-ETA TO X-Y
C
      DO 20 NOD = 1,LNODZ
      DO 20 I = 1,NDIM
      GASH = 0.0
      DO 18 J = 1,NDIM
   18 GASH = GASH + WCORN(NOD+1,J+1)*CJACIN(J,I)
   20 WCORN(NOD,I+1) = GASH
      RETURN
C
C*** AT THE FIRST ENTRY, CHECK THE DETERMINANT IS POSITIVE AT EVERY NODE
C
   22 IDEL = 0
      IF(LNODZ.GE.4) IDEL = LNODZ - 2
      IF(LTYP.EQ.9) IDEL = 8
      NODTRY = 0
   24 NODTRY = NODTRY + 1
      IF(NODTRY.GT.LNODZ) GO TO 2
      DO 26 I = 1,NDIM
   26 XLOCAL(I) = XINOD(NODTRY,I+IDEL)
      GO TO 6
   99 WRITE(0,600) NEL
 600  FORMAT(/26H FAILED IN ISOPAR: ELEMENT,I3,16H IS A DAFT SHAPE)
      STOP
      END
C C
CCC
C C
      SUBROUTINE MATINV(AVEC, BVEC, N, DET)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION AVEC(36), BVEC(36), MEMORY(6)
      IF(N.LE.1. OR .N.GT.6) GO TO 18
      DO 2 I = 1, N*N
    2 BVEC(I) = AVEC(I)
      DET = 1.0
C1957
C*** CHOOSE THE PIVOT, IN THE NEXT ROW DOWN.
C
      DO 10 J = 1, N
      PIVOT = 0.0
      DO 4 K = J, N
      BJK = BVEC(J+(K-1)*N)
      IF(ABS(BJK).LE.ABS(PIVOT)) GO TO 4
      PIVOT = BJK
      KP = K
    4 CONTINUE
      IF(PIVOT.EQ.0.0) GO TO 20
      DET = DET*PIVOT
      MEMORY(J) = KP
C
C*** ELIMINATE, LIKE PART-INVERTING THE TRANSPOSED MATRIX.
C
      KPDEL = (KP-1)*N
      BVEC(J+KPDEL) = 0.0
      DO 8 K = 1,N
      KDEL = (K-1)*N
      FACT = BVEC(J+KDEL)/PIVOT
      IF(FACT.EQ.0.0) GO TO 8
      IDEL = (KP-K)*N
      DO 6 I = KDEL+1, KDEL+N
    6 BVEC(I) = BVEC(I) - FACT*BVEC(I+IDEL)
      BVEC(J+KDEL) = FACT
    8 CONTINUE
C
C*** COMPLETE THE PART-INVERSION, AND INTERCHANGE THE COLUMNS.
C
      BVEC(J+KPDEL) = -1.0
      DO 10 I = 1, N
      CHANGE = -BVEC(I+KPDEL)/PIVOT
      BVEC(I+KPDEL) = BVEC(I+(J-1)*N)
   10 BVEC(I+(J-1)*N) = CHANGE
C
C*** THE INVERSION IS NOW COMPLETED - NOW INTERCHANGE THE ROWS.
C
      DO 14 JJ = 1, N
      J = N + 1 - JJ
      JP = MEMORY(J)
      IF(JP.EQ.J) GO TO 14
      DET = -DET
      DO 12 K = 1, N
      KDEL = (K-1)*N
      CHANGE = BVEC(JP+KDEL)
      BVEC(JP+KDEL) = BVEC(J+KDEL)
   12 BVEC(J+KDEL) = CHANGE
   14 CONTINUE
C
C*** NOW DO ALL THE DIAGNOSTICS, FOR THE CALL FOR INVERSION.
C
      ERROR = 0.0
      I = 0
      DO 16 JA = 1, N
      DO 16 J = JA, N*N, N
      I = I + 1
   16 ERROR = ERROR + ABS(AVEC(I)*BVEC(J))
      IF(ERROR/N.GT.1.0E5) WRITE(6,600)
 600  FORMAT(/' YOU SEEM TO HAVE AN ILL-CONDITIONED MATRIX.'/)
      RETURN
   18 WRITE(6,602) N
 602  FORMAT(/' NXN MATRIX - N =',I3,' IS NOT ACCEPTABLE.')
      STOP
   20 WRITE(6,604)
 604  FORMAT(' YOU ARE TRYING TO INVERT A SINGULAR MATRIX.')
      STOP
      END
C
C
      SUBROUTINE BEAM(ELCORD, ELOAD, ELSTIF, IPROP, JPROP, LCOEF,
     .		     LNODZ, LPOP, LVABZ, LVMAX, MAXTRS, NDIM, NEL,
     .	 NEWRHS, NFIRST, NODMAX, NROWST, NSTRES, STRESM, VPROP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION B(4,12), CGAUS(3), ELCORD(9,4), ELOAD(LVMAX),
     .	 ELSTIF(LCOEF), FRAME(3,3), POIN(3,4), STRESM(NROWST,MAXTRS),
     .	 TEMP(4), VPROP(IPROP,JPROP), WBEM(10,13), XGAUS(3)
      DATA XGAUS/-1.0, 1.0, 0.0/, CGAUS/2*.333333333, 1.333333333/,
     .	 DET/0.0/
C2044
C*** ENTER SIMPSON INTEGRATION LOOP, AND EXTRACT PHYSICAL PROPERTIES.
C
      DO 8 NGAU = 1,3
      XI = XGAUS(NGAU)
      CALL BEMSHA(ELCORD, FRAME, HALF, LNODZ, LVABZ, NFIRST, POIN, WBEM,
     .	 XI)
      DLENTH = HALF*CGAUS(NGAU)
      YMOD = VPROP(1,LPOP)
      SHEMOD = VPROP(2,LPOP)
      AREA = VPROP(3,LPOP)
      ZZMOM = VPROP(4,LPOP)
      XXMOM = VPROP(5,LPOP)
      POLMOM = VPROP(6,LPOP)
      DENSTY = VPROP(7,LPOP)
      THERM = VPROP(8,LPOP)*VPROP(9,LPOP)
      STRESM(13,1) = -THERM*YMOD*AREA
      NCOEF = 0
C
C*** CREATE THE MATRIX AND EFFECTIVELY MULTIPLY BY B = MODULUS MATRIX.
C
      DO 6 IVAB = 1,12
      ELOAD(IVAB) = ELOAD(IVAB) - AREA*DLENTH*DENSTY*WBEM(3,IVAB)
      B(1,IVAB) = WBEM(7,IVAB)
      B(2,IVAB) = WBEM(8,IVAB)
      B(3,IVAB) = WBEM(10,IVAB)
      B(4,IVAB) = WBEM(9,IVAB)
      STRESM(IVAB,1) = B(1,IVAB)*YMOD*AREA
      STRESM(IVAB,2) = B(2,IVAB)*YMOD*XXMOM
      STRESM(IVAB,3) = B(3,IVAB)*YMOD*ZZMOM
      STRESM(IVAB,4) = B(4,IVAB)*SHEMOD*POLMOM
      DO 2 I = 1,4
    2 TEMP(I) = STRESM(IVAB,I)*DLENTH
      ELOAD(IVAB) = ELOAD(IVAB) + THERM*TEMP(1)
C
C*** LOOP OVER ALL THE TERMS OF UPPER TRIANGLE OF THE STIFFNESS MATRIX
C
      DO 6 JVAB = 1,IVAB
      NCOEF = NCOEF + 1
      GASH = ELSTIF(NCOEF)
      DO 4 I = 1,4
    4 GASH = GASH + B(I,JVAB)*TEMP(I)
    6 ELSTIF(NCOEF) = GASH
      IF(NGAU.NE.3) WRITE(7) NGAU, NSTRES, LVABZ, STRESM, POIN,
     .	 FRAME, DET
    8 CONTINUE
      RETURN
      END
CC C
CC C
CC C
      SUBROUTINE BEMSHA(ELCORD, FRAME, HALF, LNODZ, LVABZ, NFIRST, POIN,
     .		       WBEM, XI)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION COEF(36), ELCORD(9,4), FRAME(3,3), POIN(3,4),
     .	 SHAPS(3,6), WBEM(10,13)
C2101
C*** SHAPE FUNCTION SUBROUTINE FOR SIMPLE BEAM, BUT IN 3 DIMENSIONS
C
      COMMON/SYSTEM/NDF(8,12)
      DATA COEF/.25,0.,-.75,.5, .75,0.,-.75, 1.5,0.,  .25,-.25,-.25,.25,
     .	 .75,-.5,-.25, 1.5,-.5,  -.25,0.,.75,.5, -.75,0.,.75, -1.5,0.,
     .	 .25,.25,-.25,-.25, .75,.5,-.25, 1.5,.5/
C
C*** DO DIAGNOSTIC TESTS, TO ASCERTAIN WHETHER THE ELEMENT IS FEASIBLE.
C
      NERROR = 1
      IF(LNODZ.NE.2. OR .LVABZ.NE.12) GO TO 99
      NERROR = 2
      IF(ABS(XI).GT.1.0) GO TO 99
      DO 2 N = 1,10
      DO 2 I = 1,13
    2 WBEM(N,I) = 0.0
      IF(NFIRST.EQ.0) GO TO 8
C
C*** THE LOCAL DIRECTION Y, THE SECOND COLUMN OF FRAME IS ALONG THE BEAM
C
      DO 4 I = 1,3
    4 FRAME(I,2) = ELCORD(2,I) - ELCORD(1,I)
      FRAME(2,2) = FRAME(2,2) + 1.0E-19
      FRAME(3,3) = 1.0E15
      CALL SCALAR(FRAME(1,2), FRAME(1,2), GASH)
      HALF = 0.5*SQRT(GASH)
C
C*** Z IS IN VERTICAL PLANE; IF BEAM IS VERTICAL, X LIES ALONG GLOBAL X.
C
      J = 1
      DO 6 I = 1,3
      K = J
      J = 4 - I
      CALL VECTOR(FRAME(1,6-J-K), FRAME(1,J), FRAME(1,K))
      CALL SCALAR(FRAME(1,K), FRAME(1,K), GASH)
      NERROR = 3
      IF(GASH.LE.1.0E-37) GO TO 99
      DO 6 N = 1,3
    6 FRAME(N,K) = FRAME(N,K)/SQRT(GASH)
C
C*** COMPUTE THE BEAM SHAPE FUNCTIONS AND DERIVATIVES IN TERMS OF XI
C
    8 NFIRST = 0
      NZ = 0
      DO 12 NVAB = 1,4
      DO 12 NDIF = 1,3
      NA = NZ + 2
      NZ = NA + 3 - NDIF
      GASH = COEF(NA-1)
      DO 10 N = NA,NZ
   10 GASH = GASH*XI + COEF(N)
      IF(NVAB.EQ.2. OR .NVAB.EQ.4) GASH = GASH*HALF
   12 SHAPS(NDIF,NVAB) = GASH*HALF**(1-NDIF)
      DO 13 I = 1,3
   13 POIN(I,1) = 0.0
C
C*** COMPUTE THE LINEAR SHAPE FUNCTIONS TO DEAL WITH TENSION AND TORSION
C
      SIGN = 1.0
      DO 14 NOD = 1,2
      SIGN = -SIGN
      SHA = (1.0+XI*SIGN)*0.5
      SHADIF = SIGN*0.5/HALF
      DO 14 NXYZ = 1,3
      POIN(NXYZ,1) = POIN(NXYZ,1) + SHA*ELCORD(NOD,NXYZ)
      COMP = FRAME(NXYZ,2)
      KDEF = 6*(NOD-1) + NXYZ
      KROT = KDEF + 3
      WBEM(2,KDEF+1) = COMP*SHA
      WBEM(5,KROT) = COMP*SHA
      WBEM(7,KDEF) = COMP*SHADIF
      WBEM(9,KROT) = COMP*SHADIF
C
C*** USE BENDING FUNCTIONS JUDICIOUSLY FOR BENDING, WITH VECTOR ROTATION
C
      NROT = 2*NOD
      NDEF = NROT - 1
      DO 14 KXZ = 1,3,2
      COMP = FRAME(NXYZ,KXZ)
      OTHER = FRAME(NXYZ,4-KXZ)*(KXZ-2)
      WBEM(KXZ,KDEF+1) = WBEM(KXZ,KDEF+1) + COMP*SHAPS(1,NDEF)
      WBEM(KXZ+3,KDEF) = WBEM(KXZ+3,KDEF) - OTHER*SHAPS(2,NDEF)
      WBEM(KXZ+7,KDEF) = WBEM(KXZ+7,KDEF) + COMP*SHAPS(3,NDEF)
      WBEM(KXZ,KROT+1) = WBEM(KXZ,KROT+1) + OTHER*SHAPS(1,NROT)
      WBEM(KXZ+3,KROT) = WBEM(KXZ+3,KROT) + COMP*SHAPS(2,NROT)
   14 WBEM(KXZ+7,KROT) = WBEM(KXZ+7,KROT) + OTHER*SHAPS(3,NROT)
      DO 18 NVAB = 1,12
      DO 18 NXYZ = 1,3
      GASH = 0.0
      DO 16 I = 1,3
   16 GASH = GASH + WBEM(I,NVAB+1)*FRAME(NXYZ,I)
   18 WBEM(NXYZ,NVAB) = GASH
      RETURN
   99 WRITE(0,699)NERROR
 699  FORMAT(/10H *** ERROR,I2,32H IN SIMPLE BEAM ROUTINE, BEMSHA.)
      STOP
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE HBRQD (ELCORD,ELOAD,ELSTIF,IPROP,JPROP,LPOP,LVMAX,
     .			MAXTRS,NDIM,NEL,NEWRHS,NFIRST,NROWST,NSTRES,
     .			STRESM,VPROP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C2210
C 4-NODE HYBRID QUADRILATERAL (LOIKKANEN)
C
      DIMENSION ELOAD(LVMAX,NEWRHS),ELSTIF(36),STRESM(NROWST,MAXTRS),
     .		VPROP(IPROP,JPROP),ELCORD(9,4),
     .		GAUSS(12),C(6),GPC(2,4),SHAPE(12),XJAC(3,3),
     .		XJACI(3,3),AK(91),AS(60),SP(3,5),POIN(3,4)
      DATA GAUSS/-.5773502691D0,-.5773502691D0,1.D0,
     .		 -.5773502691D0, .5773502691D0,1.D0,
     .		  .5773502691D0,-.5773502691D0,1.D0,
     .		  .5773502691D0, .5773502691D0,1.D0/,
     .	   SP/1.D0,6*0.D0,1.D0,6*0.D0,1.D0/
C
      NDIM=2
      DO 10 I=1,91
  10  AK(I)=0.D0
      INAS=0
C
C IDENTIFY MATERIAL PROPERTIES AND FORM COMPLIANCE MATRIX
C
      YMOD=VPROP(1,LPOP)
      POIS=VPROP(2,LPOP)
      DENS=VPROP(3,LPOP)
      THIK=VPROP(4,LPOP)
      ALPH=VPROP(5,LPOP)
      TEMP=VPROP(6,LPOP)
      WRITE (6,600) NEL,YMOD,POIS,DENS,ALPH,THIK,TEMP
 600  FORMAT (//,' ELEMENT NO.',I5,/,' Y MOD =',E12.6,5X,'POIS R =',
     .	      F6.3,5X,'W DENS =',E12.6,/,' ALPH =',E12.6,5X,'THICK =',
     .	      E12.6,5X,'ELEMENT TEMP =',E12.6)
C
      IF (THIK) 15,15,25
C
C PLANE STRAIN
C
  15  C(1)=(1.D0-POIS**2)/YMOD
      C(2)=(-POIS-POIS**2)/YMOD
      C(3)=C(1)
      C(4)=0.D0
      C(5)=0.D0
      C(6)=2.D0*(1.D0+POIS)/YMOD
      THIK=1.D0
      GO TO 35
C
C PLANE STRESS
C
  25  C(1)=1.D0/YMOD
      C(2)=-C(1)*POIS
      C(3)=C(1)
      C(4)=0.D0
      C(5)=0.D0
      C(6)=C(1)*2.D0*(1.D0+POIS)
C
C LOCAL BASE VECTOR COMPONENTS FOR STRESS MATRIX
C
  35  XC=0.D0
      YC=0.D0
      DO 40 I=1,4
      XC=XC+ELCORD(I,1)*.25D0
  40  YC=YC+ELCORD(I,2)*.25D0
      XI=(ELCORD(2,1)+ELCORD(3,1))/2-XC
      XJ=(ELCORD(2,2)+ELCORD(3,2))/2-YC
      YI=(ELCORD(3,1)+ELCORD(4,1))/2-XC
      YJ=(ELCORD(3,2)+ELCORD(4,2))/2-YC
C
C BEGIN AREA NUMERICAL INTEGRATION FOR STIFFNESS AND LOADING
C
      DO 120 IGP=1,4
      IG3=IGP*3
      XII=GAUSS(IG3-2)
      ETA=GAUSS(IG3-1)
      WGT=GAUSS(IG3  )
C
      CALL ISOQS (SHAPE,12,ELCORD,XJAC,XJACI,4,XII,ETA,DUM,DETJ,NEL)
C
      GPC(1,IGP)=0.D0
      GPC(2,IGP)=0.D0
      DO 50 I=1,4
      GPC(1,IGP)=GPC(1,IGP)+SHAPE(8+I)*ELCORD(I,1)
  50  GPC(2,IGP)=GPC(2,IGP)+SHAPE(8+I)*ELCORD(I,2)
C
C STRESS MATRIX AT PRESENT GAUSS POINT
C
      SP(1,2)=ETA*XI*XI
      SP(2,2)=ETA*XJ*XJ
      SP(3,2)=ETA*XI*XJ
      SP(1,4)=XII*YI*YI
      SP(2,4)=XII*YJ*YJ
      SP(3,4)=XII*YI*YJ
C
      DVOLU=WGT*DETJ*THIK
C
C GENERALIZED FLEXIBILITY MATRIX
C
      CALL FLEX (AK,91,C,6,SP,3,5,8,DVOLU,ELSTIF)
C
C LEVERAGE MATRIX
C
      I1=35
      I2=44
      I4=55
      I5=65
      I7=77
      DO 80 J=1,4
      J2=J*2
      J2M1=J2-1
      I1=I1+2
      I2=I2+2
      I3=I2+1
      I4=I4+2
      I5=I5+2
      I6=I5+1
      I7=I7+2
      I8=I7+1
      AK(I1)=AK(I1)+	     SHAPE(J2M1)		     *DVOLU
      AK(I2)=AK(I2)+(SP(1,2)*SHAPE(J2M1)+SP(3,2)*SHAPE(J2  ))*DVOLU
      AK(I3)=AK(I3)+(SP(2,2)*SHAPE(J2  )+SP(3,2)*SHAPE(J2M1))*DVOLU
      AK(I4)=AK(I4)+	     SHAPE(J2  )		     *DVOLU
      AK(I5)=AK(I5)+(SP(1,4)*SHAPE(J2M1)+SP(3,4)*SHAPE(J2  ))*DVOLU
      AK(I6)=AK(I6)+(SP(2,4)*SHAPE(J2  )+SP(3,4)*SHAPE(J2M1))*DVOLU
      AK(I7)=AK(I7)+	     SHAPE(J2  )		     *DVOLU
      AK(I8)=AK(I8)+	     SHAPE(J2M1)		     *DVOLU
  80  CONTINUE
C
C STORE STRESS MATRIX FOR USE IN STRESS RECOVERY MATRICES
C
      DO 90 IR=1,3
      DO 90 JC=1,5
      INAS=INAS+1
  90  AS(INAS)=SP(IR,JC)
C
C ELEMENT GRAVITY LOADING (Y-DIRECTION) . . . THERMAL LOADING LATER
C
      DVOL=DVOLU*DENS
      DO 100 I=1,4
 100  ELOAD(2*I,1)=ELOAD(2*I,1)-DVOL*SHAPE(8+I)
C
C END OF NUMERICAL INTEGRATION
C
 120  CONTINUE
C
C CONDENSE STRESS FIELDS TO FORM STIFFNESS MATRIX
C
      CALL ELCOND (AK,91,AK,0,0,13,5,1)
      DO 130 I=1,36
 130  ELSTIF(I)=AK(I)
C
C FORM STRESS RECOVERY MATRICES AND COMPUTE THERMAL LOADING - ALSO
C STORE ELEMENT DATA ON FILE
C
      CALL ELCOND (AK,91,AK,0,0,13,5,4)
      INAS=0
      DO 200 IGP=1,4
      DO 140 IR=1,3
      DO 140 JC=1,5
      INAS=INAS+1
 140  SP(IR,JC)=AS(INAS)
      INAK=37
      DO 170 IVAB=1,8
      DO 160 ISTRES=1,3
      INAKK=INAK
      SUM=0.D0
      DO 150 K=1,5
      SUM=SUM+SP(ISTRES,K)*AK(INAKK)
 150  INAKK=INAKK+8+K
 160  STRESM(IVAB,ISTRES)=-SUM
 170  INAK=INAK+1
C
C THERMAL LOADING
C
      E0=-ALPH*TEMP
      DVOLU=DETJ*THIK
      DO 180 I=1,8
 180  ELOAD(I,1)=ELOAD(I,1)-(STRESM(I,1)+STRESM(I,2))*E0*DVOLU
C
      POIN(1,1)=GPC(1,IGP)
      POIN(2,1)=GPC(2,IGP)
      WRITE (7) IGP,NSTRES,8,STRESM,POIN,XJAC,DETJ
 200  CONTINUE
C
      RX=((YMOD/(1-POIS**2))*(1.D0+POIS))*E0
      WRITE (6,810) RX
 810  FORMAT (1X,'INITIAL NORMAL STRESS DUE TO TEMPERATURE =',E12.6)
C
      RETURN
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE HBRBRK (ELCORD,ELOAD,ELSTIF,IPROP,JPROP,LPOP,LVMAX,
     .			 MAXTRS,NDIM,NEL,NEWRHS,NFIRST,NROWST,NSTRES,
     .			 STRESM,VPROP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C2401
C 8-NODE HYBRID SOLID (LOIKKANEN)
C
      DIMENSION ELOAD(LVMAX,NEWRHS),ELSTIF(300),STRESM(NROWST,MAXTRS),
     .		VPROP(IPROP,JPROP),ELCORD(9,4),
     .		GAUSS(32),C(21),GPC(3,8),SHAPE(32),XJAC(3,3),XJACI(3,3),
     .		AK(903),AS(864),P(6,18),POIN(3,4),Q(4),SM(12),LQ(12,2),
     .		LJAC(12,2),INP(3,3),INS(3,3),SV(3),SHIFT(3)
      DATA P/1.D0,6*0.D0,1.D0,6*0.D0,1.D0,6*0.D0,1.D0,6*0.D0,1.D0,
     .	     6*0.D0,1.D0,72*0.D0/,
     .	   Q/4*1.D0/,  LQ/3*1,3*2,3*3,2,3,1,9*4,3,1,2/,
     .	   SM/-1.D0,0.D0,1.D0,-1.D0,0.D0,1.D0,-1.D0,0.D0,1.D0,3*0.D0/,
     .	   LJAC/3*2,3*3,4*1,2,3,3*3,3*1,3*2,1,2,3/,
     .	   INP/1,2,3,4,4,5,6,5,6/,   INS/2,1,0,1,2,1,0,0,2/,
     .	   GAUSS/-.5773502691D0,-.5773502691D0,-.5773502691D0,1.D0,
     .		 -.5773502691D0,-.5773502691D0, .5773502691D0,1.D0,
     .		 -.5773502691D0, .5773502691D0,-.5773502691D0,1.D0,
     .		 -.5773502691D0, .5773502691D0, .5773502691D0,1.D0,
     .		  .5773502691D0,-.5773502691D0,-.5773502691D0,1.D0,
     .		  .5773502691D0,-.5773502691D0, .5773502691D0,1.D0,
     .		  .5773502691D0, .5773502691D0,-.5773502691D0,1.D0,
     .		  .5773502691D0, .5773502691D0, .5773502691D0,1.D0/
      NROW(I,J)=(J*J-J)/2+I
C
      NDIM=3
      DO 10 I=1,903
  10  AK(I)=0.D0
      INAS=0
      FAC=SQRT(3.D0)
C
C IDENTIFY MATERIAL PROPERTIES AND FORM COMPLIANCE MATRIX
C
      YMOD=VPROP(1,LPOP)
      POIS=VPROP(2,LPOP)
      DENS=VPROP(3,LPOP)
      ALPH=VPROP(4,LPOP)
      TEMP=VPROP(5,LPOP)
      IF (THIK.EQ.0.) THIK=1.D0
      WRITE (6,601) NEL,YMOD,POIS,DENS,ALPH,TEMP
 601  FORMAT (//,' ELEMENT NO.',I5,/,' Y MOD =',E12.6,5X,'POIS R =',
     .	      F6.3,5X,'W DENS =',E12.6,/,' ALPH =',E12.6,5X,
     .	      'ELEMENT TEMP =',E12.6)
C
      DO 20 I=7,21
  20  C(I)=0.D0
      C(1)=1.D0/YMOD
      C(2)=-C(1)*POIS
      C(3)=C(1)
      C(4)=C(2)
      C(5)=C(2)
      C(6)=C(1)
      C(10)=C(1)*2.D0*(1.D0+POIS)
      C(15)=C(10)
      C(21)=C(10)
C
C SHIFT ORIGIN TO CENTER OF ELEMENT AND EVALUATE CENTRAL JACOBIAN
C
      DO 40 I=1,3
      SHIFT(I)=0.D0
      DO 30 J=1,8
  30  SHIFT(I)=SHIFT(I)+ELCORD(J,I)*.125D0
      DO 40 J=1,8
  40  ELCORD(J,I)=ELCORD(J,I)-SHIFT(I)
C
      XII=0.D0
      CALL ISOQS (SHAPE,32,ELCORD,XJAC,XJACI,8,XII,XII,XII,DETJ,NEL)
C
C BEGIN VOLUME NUMERICAL INTEGRATION FOR STIFFNESS AND LOADING
C
      DO 500 IGP=1,8
      IG4=IGP*4
      XII =GAUSS(IG4-3)
      ETA =GAUSS(IG4-2)
      ZETA=GAUSS(IG4-1)
      WGT =GAUSS(IG4  )
C
      CALL ISOQS (SHAPE,32,ELCORD,ELSTIF,ELSTIF(10),8,XII,ETA,ZETA,
     .		  DETJ,NEL)
C
      PX=0.D0
      PY=0.D0
      PZ=0.D0
      DO 320 I=1,8
      PX=PX+SHAPE(24+I)*ELCORD(I,1)
      PY=PY+SHAPE(24+I)*ELCORD(I,2)
 320  PZ=PZ+SHAPE(24+I)*ELCORD(I,3)
      GPC(1,IGP)=PX+SHIFT(1)
      GPC(2,IGP)=PY+SHIFT(2)
      GPC(3,IGP)=PZ+SHIFT(3)
      DVOLU=WGT*DETJ
C
C STRESS MATRIX AT XII,ETA,ZETA - STORE IN AS
C
      DO 330 I=1,3
 330  Q(I)=XJACI(1,I)*PX+XJACI(2,I)*PY+XJACI(3,I)*PZ
      DO 360 ICOL=7,18
      ICM6=ICOL-6
      DO 340 I=1,3
 340  SV(I)=XJAC(LJAC(ICM6,1),I)+SM(ICM6)*FAC*XJAC(LJAC(ICM6,2),I)
      DO 350 JROW=1,3
 350  P(JROW,ICOL)=SV(JROW)*SV(JROW)*Q(LQ(ICM6,1))*Q(LQ(ICM6,2))
      JJ=12
      DO 360 JROW=4,6
      ISV1=LQ(JJ,1)
      ISV2=LQ(JJ,2)
      JJ=6+JROW
 360  P(JROW,ICOL)=SV(ISV1)*SV(ISV2)*Q(LQ(ICM6,1))*Q(LQ(ICM6,2))
      DO 380 IR=1,6
      DO 380 JC=1,18
      INAS=INAS+1
 380  AS(INAS)=P(IR,JC)
C
C GENERALIZED FLEXIBILITY MATRIX
C
      CALL FLEX (AK,903,C,21,P,6,18,24,DVOLU,ELSTIF)
C
C LEVERAGE MATRIX
C
      INAK=301
      DO 460 INOD=1,8
      IN3=INOD*3
      DO 440 ICOL=1,3
      INAKK=INAK
      DO 420 JROW=1,18
      SUM=0.D0
      DO 400 K=1,3
 400  SUM=SUM+P(INP(ICOL,K),JROW)*SHAPE(IN3-INS(ICOL,K))
      AK(INAKK)=AK(INAKK)+SUM*DVOLU
 420  INAKK=INAKK+24+JROW
 440  INAK =INAK+1
 460  CONTINUE
C
C GRAVITY LOADING (Z-DIRECTION) . . .  THERMAL LOADING LATER
C
      DVOL=DVOLU*DENS
      DO 480 I=1,8
 480  ELOAD(3*I,1)=ELOAD(3*I,1)-DVOL*SHAPE(24+I)
C
C END OF NUMERICAL INTEGRATION
C
 500  CONTINUE
C
C CONDENSE STRESS FIELDS TO FORM STIFFNESS MATRIX
C
      CALL ELCOND (AK,903,AK,0,0,42,18,1)
      DO 510 I=1,300
 510  ELSTIF(I)=AK(I)
C
C FORM STRESS RECOVERY MATRICES AND COMPUTE THERMAL LOADING - ALSO
C STORE ELEMENT DATA
C
      CALL ELCOND (AK,903,AK,0,0,42,18,4)
      INAS=0
      DO 600 IGP=1,8
      DO 520 IR=1,6
      DO 520 JC=1,18
      INAS=INAS+1
 520  P(IR,JC)=AS(INAS)
      INAK=301
      DO 570 IVAB=1,24
      DO 560 ISTRES=1,6
      INAKK=INAK
      SUM=0.D0
      DO 550 K=1,18
      SUM=SUM+P(ISTRES,K)*AK(INAKK)
 550  INAKK=INAKK+24+K
 560  STRESM(IVAB,ISTRES)=-SUM
 570  INAK=INAK+1
C
C THERMAL LOADING
C
      E0=-ALPH*TEMP
      DVOLU=DETJ
      DO 580 I=1,24
 580  ELOAD(I,1)=ELOAD(I,1)-(STRESM(I,1)+STRESM(I,2)+STRESM(I,3))*E0
     .		*DVOLU
C
      POIN(1,1)=GPC(1,IGP)
      POIN(2,1)=GPC(2,IGP)
      POIN(3,1)=GPC(3,IGP)
      WRITE (7) IGP,NSTRES,24,STRESM,POIN,XJAC,DETJ
 600  CONTINUE
C
      RX=(YMOD*(1.D0-POIS))/((1.D0+POIS)*(1.D0-2.D0*POIS))
     .	*(1.D0+2.D0*POIS/(1.D0-POIS))*E0
      WRITE (6,810) RX
 810  FORMAT (1X,'INITIAL NORMAL STRESS DUE TO TEMPERATURE =',E12.6)
C
      RETURN
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE ISOQS (SHAPE,NTS,COORD,XJAC,XJACI,ISHAPE,XII,ETA,
     .			ZETA,DETJ,NELMT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C2595
C SHAPE FUNCTION ROUTINE FOR 4-NODE QUAD (ISHAPE=4) AND 8-NODE SOLID
C (ISHAPE=8)
C
      DIMENSION SHAPE(NTS),COORD(9,4),XJAC(3,3),XJACI(3,3),
     .		IX(4),IE(4),IS(24),INV(3)
      DATA IS/1,1,1, -1,1,1, -1,-1,1, 1,-1,1, 1,1,-1, -1,1,-1, -1,-1,-1,
     .	      1,-1,-1/,
     .	   IX/-1,1,1,-1/,	IE/-1,-1,1,1/,	    INV/2,3,1/
C
      IF (ISHAPE.NE.4) GO TO 290
C
C 4-NODE QUAD
C
 160  DO 170 I=1,4
      SHAPE( 8+I )=(1.D0+IX(I)*XII)*(1.D0+IE(I)*ETA)*.25D0
      SHAPE(2*I-1)=	 IX(I)	   *(1.D0+IE(I)*ETA)*.25D0
 170  SHAPE(2*I  )=(1.D0+IX(I)*XII)*	  IE(I)     *.25D0
C
 240  DO 260 I=1,2
      DO 260 J=1,2
      II=I
      DUM=0.D0
      DO 250 K=1,4
      DUM=DUM+SHAPE(II)*COORD(K,J)
 250  II=II+2
 260  XJAC(I,J)=DUM
      DETJ=XJAC(1,1)*XJAC(2,2)-XJAC(1,2)*XJAC(2,1)
      IF (DETJ.GT.1.E-10) GO TO 270
      WRITE(6,810) NELMT,DETJ
      STOP
C
 270  DUM=1.D0/DETJ
      XJACI(1,1)= XJAC(2,2)*DUM
      XJACI(1,2)=-XJAC(1,2)*DUM
      XJACI(2,1)=-XJAC(2,1)*DUM
      XJACI(2,2)= XJAC(1,1)*DUM
      DO 280 I=1,4
      K=2*I
      J=K-1
      DUM     =XJACI(1,1)*SHAPE(J)+XJACI(1,2)*SHAPE(K)
      SHAPE(K)=XJACI(2,1)*SHAPE(J)+XJACI(2,2)*SHAPE(K)
 280  SHAPE(J)=DUM
      RETURN
C
C 8-NODE SOLID
C
 290  DO 300 I=1,8
      I3=I*3
      I2=I3-1
      I1=I3-2
      XXX=1.D0+IS(I1)*XII
      EEE=1.D0+IS(I2)*ETA
      ZZZ=1.D0+IS(I3)*ZETA
      SHAPE(24+I)= XXX	   *  EEE     *  ZZZ	 *.125D0
      SHAPE(  I1)= IS(I1)  *  EEE     *  ZZZ	 *.125D0
      SHAPE(  I2)= XXX	   *  IS(I2)  *  ZZZ	 *.125D0
 300  SHAPE(  I3)= XXX	   *  EEE     *  IS(I3)  *.125D0
C
 450  DO 470 I=1,3
      DO 470 J=1,3
      II=I
      JJ=J
      DUM=0.D0
      DO 460 K=1,8
      DUM=DUM+SHAPE(II)*COORD(K,J)
      II=II+3
 460  JJ=JJ+3
 470  XJAC(I,J)=DUM
      DETJ=XJAC(1,1)*XJAC(2,2)*XJAC(3,3)+XJAC(2,1)*XJAC(3,2)*XJAC(1,3)
     .	  +XJAC(1,2)*XJAC(2,3)*XJAC(3,1)-XJAC(1,3)*XJAC(2,2)*XJAC(3,1)
     .	  -XJAC(1,2)*XJAC(2,1)*XJAC(3,3)-XJAC(2,3)*XJAC(3,2)*XJAC(1,1)
      IF (DETJ.GT.1.E-10) GO TO 480
      WRITE(6,810) NELMT,DETJ
      STOP
C
 480  DINV=1.D0/DETJ
      DO 490 I=1,3
      J=INV(I)
      K=INV(J)
      XJACI(I,I)=(XJAC(J,J)*XJAC(K,K)-XJAC(K,J)*XJAC(J,K))*DINV
      XJACI(I,J)=(XJAC(K,J)*XJAC(I,K)-XJAC(I,J)*XJAC(K,K))*DINV
 490  XJACI(J,I)=(XJAC(J,K)*XJAC(K,I)-XJAC(J,I)*XJAC(K,K))*DINV
      DO 500 I=1,8
      L =I*3
      K =L-1
      J =L-2
      DUM     =XJACI(1,1)*SHAPE(J)+XJACI(1,2)*SHAPE(K)
     .				  +XJACI(1,3)*SHAPE(L)
      DUMM    =XJACI(2,1)*SHAPE(J)+XJACI(2,2)*SHAPE(K)
     .				  +XJACI(2,3)*SHAPE(L)
      SHAPE(L)=XJACI(3,1)*SHAPE(J)+XJACI(3,2)*SHAPE(K)
     .				  +XJACI(3,3)*SHAPE(L)
      SHAPE(J)=DUM
 500  SHAPE(K)=DUMM
      RETURN
C
 810  FORMAT (//,16X,'EXECUTION ERROR (SUBROUTINE "ISOQS") - ELEMENT ',
     .	     'NO. ',I5,'  HAS A ZERO OR NEGATIVE JACOBIAN DETERMINANT',
     .	       /,16X,'DETERMINANT = ',F22.16)
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE FLEX (AK,NTAK,C,NTC,S,NSTRES,NCOND,NDOF,DVOLU,A)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C FORM GENERALIZED FLEXIBILITY AND SUBTRACT INTO AK
C
      DIMENSION AK(NTAK),C(NTC),S(NSTRES,NCOND),A(NSTRES,NCOND)
      NROW(I,J)=(J*J-J)/2+I
C
      DO 20 I=1,NSTRES
      DO 20 J=1,NCOND
      SUM=0.D0
      DO 10 K=1,NSTRES
      II=MIN0(I,K)
      KK=MAX0(I,K)
  10  SUM=SUM+C(NROW(II,KK))*S(K,J)
  20  A(I,J)=SUM
C
      DO 40 I=1,NCOND
      IPN=I+NDOF
      DO 40 J=I,NCOND
      SUM=0.D0
      DO 30 K=1,NSTRES
  30  SUM=SUM+S(K,I)*A(K,J)
      INAK=NROW(IPN,(J+NDOF))
  40  AK(INAK)=AK(INAK)-SUM*DVOLU
C
      RETURN
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE ELCOND (A,NTA,X,NTX,NLCASE,NUMEQ,NCOND,MODEX)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C2728
C CONDENSATION OF LAST 'NCOND' EQUATIONS IN A SQUARE SYMMETRIC MATRIX, A
C AND VECTOR(S) X, RECOVERY OF PREVIOUSLY CONDENSED UNKNOWNS AND
C REDUCTION OF UPPER RIGHT MATRIX PARTITION
C     A(NTA)	   =  STIFFNESS MATRIX
C     X(NTX,NLCASE)=  RIGHT-HAND-SIDE VECTOR(S) - IF NTX.EQ.1,
C		      CONDENSATION OF VECTOR X IS SKIPPED
C     NLCASE	   =  NO. OF RIGHT-HAND-SIDE LOAD VECTOR(S)
C     NUMEQ	   =  NO. OF EQUATIONS (ORDER OF MATRICES)
C     NCOND	   =  NO. OF EQUATIONS TO BE CONDENSED - CONDENSATION
C		      BEGINS WITH THE LAST EQUATION (NCOND<NUMEQ)
C     MODEX	   =  EXECUTION MODE
C		      .EQ. 1  CONDENSE MATRIX A
C		      .EQ. 2  CONDENSE NEW X VECTOR(S)
C		      .EQ. 3  RECOVER PREVIOUSLY CONDENSED UNKNOWNS
C		      .EQ. 4  REDUCE UPPER RIGHT MATRIX PARTITION
C
      DIMENSION A(NTA),X(NTX,NLCASE)
      IDIAG(J)=(J*J-J)/2+J
C
      IF (MODEX-3) 10,100,200
C
C REVERSE GAUSS FACTORIZATION OF COEFFICIENT MATRIX AND SIMULTANEOUS
C REDUCTION OF RIGHT-HAND-SIDE VECTOR(S)
C
  10  NTXM1=NTX-1
      NEQ=NUMEQ
      DO 90 I=1,NCOND
      ID=IDIAG(NEQ)
      AA=A(ID)
      JE=NUMEQ-I
      JEQ=JE
      DO 80 J=1,JE
      JD=IDIAG(JEQ)+1
      IDMJ=ID-J
      IF (MODEX.EQ.2) GO TO 60
      PIVOT=A(IDMJ)/AA
      KR=IDMJ+1
      DO 50 K=1,JEQ
      FAC=PIVOT*A(KR-K)
      KL=JD-K
  50  A(KL)=A(KL)-FAC
      A(IDMJ)=PIVOT
      IF (NTXM1) 80,80,60
  60  DO 70 ILC=1,NLCASE
  70  X(JEQ,ILC)=X(JEQ,ILC)-A(IDMJ)*X(NEQ,ILC)
  80  JEQ=JEQ-1
  90  NEQ=NEQ-1
      RETURN
C
C RECOVERY OF PREVIOUSLY CONDENSED UNKNOWNS
C
 100  NEQ=NUMEQ-NCOND+1
      DO 120 I=NEQ,NUMEQ
      ID=IDIAG(I)
      AA=A(ID)
      DO 110 ILC=1,NLCASE
 110  X(I,ILC)=X(I,ILC)/AA
      JE=I-1
      IDMI=ID-I
      DO 120 J=1,JE
      JD=IDMI+J
      DO 120 ILC=1,NLCASE
 120  X(I,ILC)=X(I,ILC)-A(JD)*X(J,ILC)
      RETURN
C
C REDUCE UPPER RIGHT MATRIX PARTITION
C
 200  NROW=NUMEQ-NCOND
      IB  =NROW+2
      IS  =0
      DO 230 I=IB,NUMEQ
      IA=IDIAG(I-1)-IS
      JS=1
      DO 220 J=I,NUMEQ
      JA=IDIAG(J)-JS
      FAC=A(JA)
      KS=IS
      DO 210 K=1,NROW
      KS=KS+1
      KA=JA-KS
 210  A(KA)=A(KA)-FAC*A(IA-K)
 220  JS=JS+1
 230  IS=IS+1
      RETURN
      END
C
C
      SUBROUTINE HBRPLT(COORD,ELCORD,ELOAD,ELSTIF,IPROP, JPROP, LCOEF,
     .		  LNODS,LNODZ,LNOMAX, LPOP, LVABZ, LVMAX, MAXTRS, NDIM,
     .	 NEL,NELZ, NEWRHS,NODMAX, NROWST, NSTRES, STRESM, VPROP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C2824
C*** 4-NODE HYBRID PLATE BENDING ELEMENT
C*** WRITTEN BY MATTI J. LOIKKANEN, UNIVERSITY OF CALGARY, APRIL 1981.
C
      DIMENSION ELOAD(LVMAX,NEWRHS), ELSTIF(LCOEF),COORD(NODMAX,NDIM),
     .	LNODS(LNOMAX,NELZ),STRESM(NROWST,MAXTRS), VPROP(IPROP,JPROP)
C
      DIMENSION DMOD(3,3), ELCORD(9,4), FRAME(3,3), POINT(3),FRAM(2,2),
     .	SHAP(12,6), XITA(2),XGAUSS(2), PRESS(5), TEMPR(5,2),POIN(2)
C
      DATA XGAUSS/ -0.57735026918963, 0.57735026918963/,
     .	   FRAME / 1.0, 3*0.0, 1.0, 4*0.0/
C
C*** RE-SET THE DIMENSIONS
C
      LTYP   = 10
      NDIM   = 2
C
C*** RETRIEVE ISOTROPIC MATERIAL PROPERTIES AND FORM MODULUS MATRIX
C
      IF(LNODZ.EQ.3) CALL TRIBEN(ELCORD, ELOAD, ELSTIF, IPROP, JPROP,
     .	 LCOEF, LPOP, LVABZ, MAXTRS, NDIM, NEL, NEWRHS, NODMAX,
     .	 NROWST, NSTRES, STRESM, VPROP)
      IF(LNODZ.EQ.3) RETURN
      YMOD = VPROP(1,LPOP)
      POIS = VPROP(2,LPOP)
      DENS = VPROP(3,LPOP)
      THIK = VPROP(4,LPOP)
      PRES = VPROP(5,LPOP)
      ALPHA = VPROP(6,LPOP)
      DELT = VPROP(7,LPOP)
      IF(THIK.EQ.0.0)  THIK = 1.0
C
      DO 2 I = 1,9
    2 DMOD(I,1) = 0.0
      D =(YMOD*THIK**3)/(12.*(1.-POIS**2))
      DMOD(1,1) = D
      DMOD(1,2) = D*POIS
      DMOD(2,1) = D*POIS
      DMOD(2,2) = D
      DMOD(3,3) = D*(1.0-POIS)/2.0
      WRITE(6,600) YMOD, POIS, DENS, THIK,ALPHA
  600 FORMAT(/' Y MOD =',E12.6,5X,'POIS R =',F6.3,5X,'W DENS =',E12.6,
     . 5X,'THIK =',E12.6,5X,'ALPHA=',E12.6)
C
C*** COLLECT NODAL COORDINATES TO ELCORD(  ),ETC
C
      DO 4 NOD = 1,LNODZ
      PRESS(NOD) = PRES
      DO 4 I = 1,2
      NODE = IABS(LNODS(NOD,NEL))
    4 TEMPR(NOD,I) = COORD(NODE,3+I)
      WRITE(6,604)
  604 FORMAT(/ ' NODE',9X,1HX,14X,1HY,14X,5HPRESS,10X,5HTEMP1,10X,
     .	5HTEMP2 )
      DO 10 NOD = 1,LNODZ
   10 WRITE(6,606) LNODS(NOD,NEL), (ELCORD(NOD,J), J = 1,2), PRESS(NOD),
     .	(TEMPR(NOD,I), I = 1,2)
  606 FORMAT(1X,I5, 8(2X,F13.4))
C
C*** CALL THE HYBRID SHAPE FUNCTION SUBROUTINE
C
      DO 100 JGAUS = 1,2
      XITA(2) = XGAUSS(JGAUS)
      DO 100 IGAUS = 1,2
      XITA(1) = XGAUSS(IGAUS)
C
      CALL PLATE(D,DETJ,DMOD,ELSTIF,ELCORD,FRAM,LCOEF,LNODZ,
     . LNODZZ,LTYP,LVABZ,LVMAX,MAXTRS,NDIM,NEL,NROWST,NSTRES,POIN,
     . POIS,PRESS,SHAP,STRESM,TEMPR,THIK,XITA)
C
C*** NODAL LOADS FROM PRESSURE, GRAVITY AND TEMPERATURE VIA 2X2 GAUSS
C
      FORCE = DETJ*(PRESS(5)+DENS*THIK)
      DELT = TEMPR(5,1)-TEMPR(5,2)
      XMOMNT = ALPHA*DELT*D*(1.0+POIS)/THIK
      DO 20 JVAB = 1,LVABZ
      GASH = FORCE*SHAP(JVAB,1)
      GUSH = XMOMNT*SHAP(JVAB,4)
      GISH = XMOMNT*SHAP(JVAB,5)
   20 ELOAD(JVAB,1) = ELOAD(JVAB,1) + GASH + GUSH + GISH
      DO 22 I = 1,2
   22 POINT(I) = POIN(I)
      POINT(3) = 0.0
C
      WRITE(7) NSTRES, LVABZ, STRESM, POINT, FRAME
  100 CONTINUE
      RETURN
      END
C
C
      SUBROUTINE PLATE(D,DETJ,DMOD,ELSTIF,ELCORD,FRAME,LCOEF,LNODZ,
     . LNODZZ,LTYP,LVABZ,LVMAX,MAXTRS,NDIM,NEL,NROWST,NSTRES,POINT,
     . POIS,PRESS,SHAP,STRESM,TEMPR,THIK,XITA)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C2923
C*** MAIN SHAPE FUNCTION SUBROUTINE FOR THE 4-NODE HYBRID PLATE
C*** OUTPUTS ELSTIF, STRESM, DEFLECTIONS, SLOPES AND CURVATURES
C
      DIMENSION  ELSTIF(LCOEF),ELCORD(9,4),POINT(2),PRESS(5),
     . STRESM(NROWST,MAXTRS),CJAC(2,2),CJACI(2,2),FRAME(2,2)
C
      DIMENSION  DMOD(3,3),DMODI(3,3),STRESS(5,10),UPPER(9,21),
     . UPVEC(189),SHAP(12,6),SHIFT(2),W(5),WDIF(2,5),XGAUSS(3),
     . XIBOUN(12,2),XITA(2),XIUSED(2),TEMPR(5,2),XXXX(9),TEMP(5),
     . WEIGHT(3)
C
      EQUIVALENCE(UPPER,UPVEC)
C
      DATA XGAUSS /-0.77459666924148,0.0,0.77459666924148/
      DATA XIBOUN
     .	 /-.6, 0.0, .6, 1., 1., 1., .6, 0.0, -.6, -1., -1., -1.,
     .	  -1., -1., -1., -.6, 0.0, .6, 1., 1., 1., .6, 0.0, -.6/
      DATA WEIGHT
     . /0.55555555555555,0.88888888888888,0.55555555555555/
C
C*** FORM NSTAGE, CLEAR WORKING AREAS, SOME EARLY DIAGNOSTIC CHECKS
C
      NSTAGE = 1
      IF(NFIRST.EQ.1) NSTAGE = 2
      IF(NSTAGE.EQ.2) GO TO 50
      NELPRE = NEL
C
      DO 2 I = 1,9
    2 DMODI(I,1) = 0.0
      DO 4 I = 1,189
    4 UPVEC(I) = 0.0
C
      N ERROR = 1
      IF(NDIM.NE.2 .OR. LNODZ.NE.4)		  GO TO 999
      N ERROR = 2
      IF(LVABZ.NE.(3*LNODZ))			GO TO 999
      N ERROR = 3
      IF(NSTRES.NE.3)				GO TO 999
      N ERROR = 4
      IF(LCOEF.NE.((LVABZ**2+LVABZ)/2)) 	GO TO 999
C
      CALL MATINV(DMOD, DMODI, 3, DETMOD)
      N ERROR = 5
      IF(DETMOD.LE.0.0) 			GO TO 999
C     WRITE(6,604) ((DMODI(I,J), J = 1,3), I = 1,3)
C 604 FORMAT( /' DMODI '/,3(3X,G18.8))
C
C*** RELATE COORD TO CENTER ; CHECK THE OBLIQUENESS
C
      DO 6 I = 1,NDIM
      SHIFT(I) = 0.0
      DO 8 J = 1,LNODZ
    8 SHIFT(I) = SHIFT(I)+ELCORD(J,I)/FLOAT(LNODZ)
      DO 6 J = 1,LNODZ
    6 ELCORD(J,I) = ELCORD(J,I)-SHIFT(I)
C
      N ERROR = 6
      DO 10 NO = 2,4,2
      LA = NO-1
      NE = NO
      IF(NO.EQ.4) NE = 1
      X = SQRT((ELCORD(LA,1)-ELCORD(NO,1))**2
     .	  +    (ELCORD(LA,2)-ELCORD(NO,2))**2)
      Y = SQRT((ELCORD(NE,1)-ELCORD(NO,1))**2
     .	  +    (ELCORD(NE,2)-ELCORD(NO,2))**2)
      Z = SQRT((ELCORD(NE,1)-ELCORD(LA,1))**2
     .	  +    (ELCORD(NE,2)-ELCORD(LA,2))**2)
      COSN = (X**2+Y**2-Z**2)/(2.0*X*Y)
      IF(ABS(COSN) .GT. 0.9396926)   GO TO 999
   10 CONTINUE
C
C*** FIND NORMALIZED BASE VECTORS  XI-ETA AT CENTER
C
      N ERROR = 7
      DO 12 I = 1,NDIM
   12 XIUSED(I) = 0.0
      CALL ISOP(FRAME,CJACI,DETJ,ELCORD,LNODZ,LNODZZ,LTYP,
     . NDIM,NEL,NSTAGE,POINT,TEMP,W,WDIF,XIUSED)
      IF(DETJ.LE.0.0)				GO TO 999
      DO 14 J = 1,NDIM
      GASH = 0.0
      DO 16 I = 1,NDIM
   16 GASH = GASH + FRAME(J,I)**2
      DO 14 I = 1,NDIM
   14 FRAME(J,I) = FRAME(J,I)/SQRT(GASH)
C
C     WRITE(6,610) NEL,XIUSED,POINT
C 610 FORMAT(/' FRAME, NEL,XIUSED,POINT=',I5,4F12.6)
C     WRITE(6,612) ((FRAME(I,J), J = 1,2),I = 1,2)
C 612 FORMAT(10X, 2F15.6)
C
C*** START INTEGRATING 'CURLY F', WE USE 3X3 GAUSS RULE THRU AREA
C
   50 NFIRST = 0
      DO 70 JGAUS = 1,3
      XIUSED(2) = XGAUSS(JGAUS)
      DO 70 IGAUS = 1,3
      XIUSED(1) = XGAUSS (IGAUS)
C
      IF(NSTAGE.EQ.1)	GO TO 54
      DO 52 I = 1,NDIM
   52 XIUSED(I) = XITA(I)
C
   54 CALL ISOP(CJAC,CJACI,DETJ,ELCORD,LNODZ,LNODZZ,LTYP,
     . NDIM,NEL,NSTAGE,POINT,TEMP,W,WDIF,XIUSED)

      IF(DETJ.LE.0.0)				GO TO 999
      FACT = DETJ*WEIGHT(IGAUS)*WEIGHT(JGAUS)
C
C*** ON THE SECOND PASS FIND THE DEFLECTIONS AND SLOPES
C
      IF(NSTAGE.EQ.2)
     . CALL PSHAPE(CJAC,CJACI,DETJ,ELCORD,LNODZ,LNODZZ,LTYP,
     . NDIM,NEL,NSTAGE,POINT,TEMPR,PRESS,SHAP,XIUSED)
C
C*** ASSUMED MOMENTS AT THIS POINT, THEN TRIPLE PRODUCT
C
      CALL MOMNTS(D,FRAME,POINT,POIS,STRESS,NDIM,2)
      IF(NSTAGE.EQ.2)  GO TO 200
C
      DO 70 K = 1,9
      DO 72 J = 1,3
      GASH = 0.0
      DO 74 I = 1,3
   74 GASH = GASH + DMODI(J,I)*STRESS(I,K)
   72 XXXX(J) = GASH
      DO 70 L = 1,9
      GASH = 0.0
      DO 76 I = 1,3
   76 GASH = GASH + STRESS(I,L)*XXXX(I)
   70 UPPER(L,K) = UPPER(L,K)-GASH*FACT
C
C*** NOW 'CURLY L' INTO UPPER, WE USE 3-POINT GAUSS RULE ON EACH SIDE
C
      DO 100 ISD = 1,4
      NXT = ISD
      IF(NXT.EQ.5) NXT = 1
      SIDE = SQRT((ELCORD(NXT,1) - ELCORD(ISD,1))**2
     .		 +(ELCORD(NXT,2) - ELCORD(ISD,2))**2 )
      COSN = (ELCORD(NXT,2) - ELCORD(ISD,2))/SIDE
      SINN = (ELCORD(ISD,1) - ELCORD(NXT,1))/SIDE
C     WRITE(6,620) NEL,ISD,SIDE,COSN,SINN
C 620 FORMAT(/' NORMAL VECTOR, NEL,ISD ', 2I5,3F15.5)
C
      DO 100 INTP=1,3
      IRW = 3*ISD-3+INTP
      DO 82 I = 1,2
      XIUSED(I) = XIBOUN(IRW,I)
      IF(ABS(XIUSED(I)).EQ.0.6)
     . XIUSED(I) = (XIUSED(I)/0.6)*SQRT(0.6)
   82 CONTINUE
      CALL PSHAPE(CJAC,CJACI,DETJ,ELCORD,LNODZ,LNODZZ,LTYP,
     . NDIM,NEL,NSTAGE,POINT,TEMPR,PRESS,SHAP,XIUSED)
      CALL MOMNTS(D,FRAME,POINT,POIS,STRESS,NDIM,1)
C
C*** ROTATE MOMNTS ETC; COMP VIRTUAL WORK TERM BY TERM
C
      KOL = 9
      DO 100 IDOF = 1,12
      KOL = KOL
      DEFL = SHAP(IDOF,1)
      SLOPEN = SHAP(IDOF,2)*COSN + SHAP(IDOF,3)*SINN
      SLOPET = -SHAP(IDOF,2)*SINN + SHAP(IDOF,3)*COSN
C
      DO 100 ISS = 1,9
      XMOMNN = STRESS(1,ISS)*(COSN**2) + STRESS(2,ISS)*(SINN**2)
     .	       + 2.0*STRESS(3,ISS)*(COSN*SINN)
      XMOMNT = -(STRESS(1,ISS)-STRESS(2,ISS))*(COSN*SINN)
     .	       + STRESS(3,ISS)*(COSN**2-SINN**2)
      QN = STRESS(4,ISS)*COSN + STRESS(5,ISS)*SINN
      WORK = -(XMOMNN*SLOPEN + XMOMNT*SLOPET - QN*DEFL)
  100 UPPER(ISS,KOL) = UPPER(ISS,KOL) + WORK*(SIDE*0.5)*WEIGHT(INTP)
C
C     WRITE(6,622) NEL
C 622 FORMAT(//'  FULL UPPER, NEL = ',I5)
C     WRITE(6,624) ((UPPER(I,J) ,I = 1,9), J = 1,21)
C 624 FORMAT( 9(1X,G13.6))
C
C*** INTEGRATIONS FINISHED; PSEUDO-REDUCTION FOR TRIPLE PRODUCT
C
      N ERROR = 8
      DO 106 I = 1,9
      PIVOT = UPPER(I,I)
C     IF(ABS(PIVOT) .LT. 1.0)	WRITE(6,626) I, PIVOT
C 626 FORMAT(10X, ' I =',I5, ' PIVOT =', G15.6)
      IF(I.EQ.9)  GO TO 106
      IF(ABS(PIVOT) .LT. 0.000001)   GO TO 999
      IZ = I
      DO 104 J = IZ,9
  104 UPVEC(J) = UPPER(I,J)/PIVOT
      IZ = I
      DO 102 K = IZ,21
      JDEL = 9-9*K
      JZ = 9
      IF(K.LT.9) JZ = K
      GASH = UPPER(I,K)
      K1 = I-JDEL
      K2 = JZ-JDEL
      DO 102 J = K1,K2
  102 UPVEC(J) = UPVEC(J)-GASH*UPVEC(J+JDEL)
  106 CONTINUE
C
C*** FORM NODAL STIFF USING XXXX AS WORKING AREA
C
      NSTIF = 0
      DO 112 I = 10,21
      DO 114 K = 1,9
  114 XXXX(K) = UPPER(K,I)/UPPER(K,K)
      DO 112 J = 10,I
      GASH = 0.0
      KDEL = (J-1)*9
      DO 116 K = 1,9
  116 GASH = GASH - XXXX(K)*UPVEC(K+KDEL)
      NSTIF = NSTIF
  112 ELSTIF(NSTIF) = GASH
C     WRITE(6,630) NEL,ELSTIF
C 630 FORMAT(// ' NODAL STIFF, NEL = ',I5/(6(1X,G12.6)))
C
C*** UPWARDS REDUCTION FOR 'GENERALIZED FORCES'
C
      DO 140 II = 1,9
      I = 10-II
      DO 146 J = 1,9
  146 XXXX(J) = UPPER(I,J)
      DO 140 N = 10,21
      GASH = UPPER(I,N)
      JDEL = (N-1)*9
      IF(I.EQ.9)  GO TO 140
      JZ = I
      DO 144 J = JZ,9
  144 GASH = GASH - XXXX(J)*UPVEC(J+JDEL)
  140 UPPER(I,N) = GASH/UPPER(I,I)
C
      NSTAGE = 2
      GO TO 50
C
C*** COMPUTE ELEM STRESS MATRIX AT THIS POINT
C
  200 DO 202 I = 1,12
      DO 204 J = 1,3
      GASH = 0.0
      DO 206 K = 1,9
  206 GASH = GASH + STRESS(J,K)*UPPER(K,I)
  204 STRESM(I,J) = -GASH
C
C*** COMPUTE B-MATRIX AND PLACE IT IN 'SHAP'
C
      DO 202 J = 1,3
      GASH = 0.0
      DO 208 K = 1,3
  208 GASH = GASH + DMODI(J,K)*STRESM(I,K)
  202 SHAP(I,J) = GASH
C
C*** FINALLY SHIFT ORIGIN BACK TO ZERO
C
      DO 210 I = 1,2
  210 POINT(I) = POINT(I)+SHIFT(I)
C
C     WRITE(6,680) NEL,XIUSED
C 680 FORMAT(//' FINAL CHECK, NEL =',I5,'XI ETA =',2F12.6)
C     WRITE(6,684) ((STRESM(I,J), I = 1,12), J = 1,3)
C 684 FORMAT(//  ' STRESM '/(12(1X,F10.5)))
C     WRITE(6,686) ((SHAP(I,J),J = 1,6),I = 1,12)
C 686 FORMAT(// ' SHAPE'/(6(1X,F10.5)))
C
      RETURN
C
C*** WE WRITE DIAGNOSTICS IN THE CASE OF FAILURE
C
  999 WRITE(6,699) NEL, N ERROR
  699 FORMAT(///' ERROR IN SEGMENT PLATE; ELEMENT=',I5,
     .	' ERROR NO=',I2////)
      STOP 433
      END
CC
CC
      SUBROUTINE MOMNTS (D,FRAME,POINT,POIS,STRESS,NDIM,IKEY)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION FRAME(NDIM,NDIM), POINT(NDIM), STRESS(5,10)
C3207
C*** ASSUM. MOMNTS AND SHEARS IN GLOBAL DIR.
C
      DO 1 I = 1,50
    1 STRESS(I,1) = 0.0
      DO 2 I = 1,2
    2 STRESS(I,I) = 2.0
      STRESS(3,3) = 1.0
      STRESS(1,4) = 2.0*POINT(2)
      STRESS(1,6) = 6.0*POINT(1)
      STRESS(2,5) = 2.0*POINT(1)
      STRESS(2,7) = 6.0*POINT(2)
      STRESS(3,4) = 2.0*POINT(1)
      STRESS(3,5) = 2.0*POINT(2)
      STRESS(4,5) = 2.0
      STRESS(4,6) = 6.0
      STRESS(5,4) = 2.0
      STRESS(5,7) = 6.0
C
C*** FOR THE 8TH AND 9TH MOMENT FIELD WE USE THE "MEAN AXIS"
C
      DO 4 I = 1,2
      C = FRAME(I,1)
      S = FRAME(I,2)
      XPR = POINT(1)*C + POINT(2)*S
      YPR = -POINT(1)*S + POINT(2)*C
C
      STRESS(1,10) = 6.0*XPR*YPR
      STRESS(2,10) = 0.0
      STRESS(3,10) = 3.0*(XPR**2)
      STRESS(4,10) = 6.0*YPR
      STRESS(5,10) = 6.0*XPR
C
      STRESS(1,I) = STRESS(1,10)*(C**2) - 2.0*STRESS(3,10)*(C*S)
      STRESS(2,I) = STRESS(1,10)*(S**2) + 2.0*STRESS(3,10)*(C*S)
      STRESS(3,I) = STRESS(1,10)*(C*S) + STRESS(3,10)*(C**2-S**2)
      STRESS(4,I) = STRESS(4,10)*C - STRESS(5,10)*S
    4 STRESS(5,I) = STRESS(4,10)*S + STRESS(5,10)*C
C
C     WRITE(6,600) POINT
C 600 FORMAT( '  MOM FIELDS AT POINT= ',2F12.5)
C     WRITE(6,602) ((STRESS(I,J), J = 1,9),I = 1,5)
C 602 FORMAT(10X, 9F12.5)
C
      RETURN
      END
