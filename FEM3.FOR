C
$NOFLOATCALLS
$DO66
      SUBROUTINE PSHAPE(CJAC,CJACI,DETJ,ELCORD,LNODZ,LNODZZ,LTYP,
     . NDIM,NEL,NSTAGE,POINT,TEMPR,PRESS,SHAP,XITA)
$LARGE
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C3262
C*** SHAPE(INTERPOLATION) FUNCTION SUBROUTINE FOR THE PLATE BENDING
C
      DIMENSION CJAC(2,2),CJACI(2,2),ELCORD(9,4),POINT(2),TEMPR(5,2),
     . PRESS(5),SHAP(12,6),XITA(2),W(5),WDIF(2,5),TEMP(5)
      DIMENSION D(2), DEF(3), DS(2), KEY(2,8), NDO(2,4),P(2), PERP(2),
     . R(2), RS(2), SIDE(2), SLOPES(3,2), XINOD(2,4)
C
      DATA KEY/1,2,1,4, 1,2,2,3,  4,3,2,3, 4,3,1,4/,
     .	   NDO/1,2, 1,1, 2,2, 1,1/,
     .	   XINOD/-1.0,-1.0, 1.0,-1.0, 1.0,1.0, -1.0,1.0/
C
      CALL ISOP(CJAC,CJACI,DETJ,ELCORD,LNODZ,LNODZZ,LTYP,
     . NDIM,NEL,NSTAGE,POINT,TEMP,W,WDIF,XITA)
C
C*** INTERPOLATE FOR TEMPERATURES AND PRESSURES AT THIS POINT
C
      DO 2 I = 1,2
    2 TEMPR(5,I) = 0.0
      PRESS(5)	 = 0.0
      DO 4 NOD = 1,4
      DO 6 I = 1,2
    6 TEMPR(5,I) = TEMPR(5,I) + W(NOD)*TEMPR(NOD,I)
    4 PRESS(5)	 = PRESS(5) + W(NOD)*PRESS(NOD)
C     WRITE(6,600) XITA, POINT,  (TEMPR(5,I),I = 1,2), PRESS(5)
C 600 FORMAT(/' XITA=',2F10.4,' POINT=',2G10.4,' TEMP=',2G10.4,' PRES=',
C    . G10.4)
C
C*** CALCULATE OR UPDATE THE SHAPE FUNCTIONS FOR THE TWO FAMILIES OF BE
C
      DO 16 NOD = 1,4
      N1 = NDO(1,NOD)
      N2 = NDO(2,NOD)
      DO 8 N = N1,N2
      Q = XITA(N)
      QNOD = XINOD(N,NOD)
      P(N) = 0.5 + 0.5*Q*QNOD
      D(N) = 0.5 + 0.25*Q*QNOD*(3.0-Q*Q)
      DS(N) = 0.75*QNOD*(1.0-Q*Q)
      R(N) = 0.25*(QNOD+Q)*(Q*Q-1.0)
    8 RS(N) = (0.75*Q + 0.5*QNOD)*Q-0.25
C
C*** DETERMINE THE RELEVANT EDGE BEAMS IN TURN; AS THEY ARE CONSIDERED
C
      DO 16 ISIDE = 1,2
      NSIDE = 2*(NOD-1) + ISIDE
      SIDESQ = 0.0
      DO 10 NXY = 1,2
      SIDE(NXY)
     . = 0.5*(ELCORD(KEY(2,NSIDE),NXY) - ELCORD(KEY(1,NSIDE),NXY))
   10 SIDESQ = SIDESQ+SIDE(NXY)**2
      PERP(1) = SIDE(2)
      PERP(2) = -SIDE(1)
C
C*** CHART THE BEHAVIOUR OF A POINT ON AN EDGE; CONSIDERING IT AS BEAM
C
      DEF(1) = D(ISIDE)
      DO 12 NXY = 1,2
      SLOPES(1,NXY) = DS(ISIDE)*SIDE(NXY)/SIDESQ
      DEF(NXY) = R(ISIDE)*SIDE(NXY)
      DO 12 MXY = 1,2
      SLOPES(MXY,NXY) = (RS(ISIDE)*SIDE(MXY)*SIDE(NXY)
     .	       +P(ISIDE)*PERP(MXY)*PERP(NXY))/SIDESQ
   12 CONTINUE
C
C*** CHART THE EFFECT OF THE RESPONSE OF EDGE BEAM ON INTERNAL BEAMS
C
      IBEAM = 3-ISIDE
      DO 16 N3 = 1,3
      NV = 3*(NOD-1) + N3
      S = 0.0
      DO 14 N = 1,2
   14 S = S+SLOPES(N3,N)*CJAC(IBEAM,N)
      SHAP(NV,IBEAM) = D(IBEAM)*DEF(N3)+R(IBEAM)*S
   16 SHAP(NV,IBEAM) = DS(IBEAM)*DEF(N3)+RS(IBEAM)*S
C
C*** TRANSFORM "SHAP"
C
      DO 20 NV = 1,12
      SHAP(NV,1) = 0.5*(SHAP(NV,1)+SHAP(NV,2))
      DO 20 M = 1,2
      GASH = 0.0
      DO 18 N = 1,2
   18 GASH = GASH + SHAP(NV,N)*CJACI(M,N)
   20 SHAP(NV,M) = GASH
C
C     WRITE(6,602) NEL, XITA,  ((SHAP(NV, I), I = 1,3), NV = 1,12)
C 602 FORMAT(//' SHAPE FUNCT. AND DERIVAT. ***NEL XITA =',I5,2F10.5/
C    . (6X,3F12.7))
C
      RETURN
      END
CC
CC
      SUBROUTINE TRIBEN(ELCORD, ELOAD, ELSTIF, IPROP, JPROP, LCOEF,
     .		       LPOP, LVABZ, MAXTRS, NDIM, NEL,
     .	 NEWRHS, NODMAX, NROWST, NSTRES, STRESM, VPROP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION XGAUS(3,2), DB(3), EXLOAD(55), XITA(3), DMOD(3,3),
     .	 STREM(30,3), EXSTIF(55), ELSTIF(LCOEF), VPROP(IPROP,JPROP),
     .	 POIN(2,3), STRESM(LVABZ,NSTRES), W(18,7)
      DATA XGAUS/0., 4*0.5, 0./, ZERO/0.0/
C3369
C*** BENDING TRIANGLE, A HYBRID ELEMENT WITH AN ADDED BUBBLE FUNCTION.
C
      YOUNG = VPROP(1,LPOP)
      POISS = VPROP(2,LPOP)
      DENS = VPROP(3,LPOP)
      THIK = VPROP(4,LPOP)
      PRESS = VPROP(5,LPOP)
      ALPHA = VPROP(6,LPOP)
      DELT = VPROP(7,LPOP)
      BEND = YOUNG*THIK**3/(12.0*(1.0-POISS**2))
      WEIGHT = THIK*DENS
      DO 2 I = 1,55
    2 EXSTIF(I) = 0.0
C
C*** ENTER GAUSS INTEGRATION LOOP, AND CALL SHAPE FUNCTION ROUTINE.
C
      DO 21 IGAUS = 1,3
      DO 4 IXY = 1,2
    4 XITA(IXY) = XGAUS(IGAUS,IXY)
      CALL NAGWA(DET, ELCORD, W, XITA, EXE, WYE)
      POIN(1,IGAUS) = EXE
      POIN(2,IGAUS) = WYE
      DMOD(1,1) = BEND
      DMOD(2,2) = BEND
      DMOD(1,2) = BEND*POISS
      DMOD(2,1) = BEND*POISS
      DMOD(3,3) = BEND*0.5*(1.0-POISS)
      NV = 1
      DO 19 IVAB = 1,10
      EXLOAD(IVAB) = EXLOAD(IVAB) + (PRESS+WEIGHT)
      DO 14 I = 1,3
      GASH = 0.0
      DO 12 J = 1,3
   12 GASH = GASH + DMOD(I,J)*W(IVAB,J+3)
      DB(I) = GASH*DET/6.0
   14 STREM(10*(IGAUS-1)+IVAB,I) = GASH
      DO 19 JVAB = 1,IVAB
      GASH = EXSTIF(NV)
      DO 18 I = 1,3
   18 GASH = GASH + DB(I)*W(JVAB,I+3)
      EXSTIF(NV) = GASH
   19 NV = NV + 1
   21 CONTINUE
C
C*** RELAX OUT THE BUBBLE FUNCTION.
C
      PIVOT = EXSTIF(55)
      NV = 1
      DO 24 IVAB = 1,9
      FACT = EXSTIF(45+IVAB)/PIVOT
      EXLOAD(IVAB) = EXLOAD(IVAB) - FACT*EXLOAD(10)
      DO 22 JVAB = 1,IVAB
      EXSTIF(NV) = EXSTIF(NV) - FACT*EXSTIF(45+JVAB)
   22 NV = NV + 1
      DO 24 I = 1,3
      DO 24 IGAUS = 1,3
      STREM(10*(IGAUS-1)+IVAB,I) = STREM(10*(IGAUS-1)+IVAB,I)
     .	 - FACT*STREM(I*(IGAUS-1)+10,I)
   24 CONTINUE
      NSTRES = 3
      DO 30 NGAU = 1,3
   30 WRITE(7) NGAU, NSTRES, LVABZ,
     .	 ((STREM(10*(NGAU-1)+IV,J), J = 1,3), IV = 1,10),
     .	 (POIN(I,NGAU), I = 1,2), (ZERO, I = 1,19), DET
      DO 32 NV = 1,45
   32 ELSTIF(NV) = EXSTIF(NV)
      RETURN
      END
C
C
      SUBROUTINE NAGWA(DET, ELCORD, W, XITA, EXE, WYE)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ELCORD(9,4), W(18,7), X(6), Y(6), XITA(3)
C3449
C*** BASICALLY RAZZAQUE'S STRESS-SMOOTHED BENDING TRIANGLE.
C
      DO 2 I = 2,18
      DO 2 J = 1,7
    2 W(I,J) = 0.0
      DO 4 I = 1,3
      X(I) = ELCORD(I,1)
      X(I+3) = X(I)
      Y(I) = ELCORD(I,2)
    4 Y(I+3) = Y(I)
      EXE = 0.0
      WYE = 0.0
      DET = 0.0
      DO 12 I = 1,3
      IW = 3*I - 1
      I1 = I + 1
      I4 = I + 4
      I10 = I + 10
      MULT1 = I + 12
      EI = XITA(I)
      EI2 = EI + EI
      EIS = EI*EI
      W(IW,1) = EI
      W(IW,I1) = 1.0
      W1 = EI + EIS
      W(MULT1,1) = W1
      W(MULT1,I1) = 1.0 + EI2
      EXE = EXE + EI*X(I)
      WYE = WYE + EI*Y(I)
      X(I+3) = X(I)
      Y(I+3) = Y(I)
      DO 10 ID = 1,2
      J = I + ID
      IF(J.GT.3) J = J - 3
      J1 = J + 1
      J4 = J + 4
      K = 6 - I - J
      ISL = IW + ID
      MULT2 = K + 15
      DET = -DET + X(J)*Y(I)
      EJ = XITA(J) + 1.0E-20
      EIJ = EI + EJ
      EK = XITA(K)
      W(ISL,1) = EIS*EJ
      W(ISL,I1) = EI2*EJ
      W(ISL,J1) = EIS
      W(ISL,I4) = EJ + EJ - EI2
      W(ISL,J4) = -EI2
      W(ISL,K+4) = EI2
      W2 = EJ*EJ/EIJ
      W(MULT2,1) = W2
      W(MULT2,I1) = -1.0/EIJ
      W(MULT2,J1) = (1.0 + EI/EIJ)/EJ
      DO 6 L = 2,4
      W(MULT2,L) = W2*W(MULT2,L)
      W(I10,L) = W1*W(MULT2,L) + W(MULT1,L)*W2
    6 W(MULT1,L) = W(I10,L)
      W1 = W1*W2
   10 W(I10,1) = W1
   12 W(I10,I4) = EI + EI - 1.0
      DO 18 ISL = 1,12
      ISL1 = ISL + 1
      WX = 0.0
      WY = 0.0
      WXX = 0.0
      WXY = 0.0
      WYY = 0.0
      DO 16 J = 2,4
      DXJ = (X(J+1) - X(J))/DET
      DYJ = (Y(J+1) - Y(J))/DET
      WX = WX - DYJ*W(ISL1,J)
      WY = WY + DXJ*W(ISL1,J)
      WJ = W(ISL1,J+3)
      WXX = WXX + WJ*DYJ*DYJ
      WXY = WXY - WJ*DXJ*DYJ
   16 WYY = WYY + WJ*DXJ*DXJ
      W(ISL,2) = W(ISL1,1)
      W(ISL,3) = WX
      W(ISL,4) = WY
      W(ISL,5) = WXX
      W(ISL,6) = WYY
   18 W(ISL,7) = 2.0*WXY
      DO 22 I = 1,3
      DO 22 ID = 1,2
      J = I + ID
      IF(J.GT.3) J = J - 3
      DXI = X(J) - X(I)
      DYI = Y(J) - Y(I)
      K = 6 - I - J
      IW = 3*I - 2
      ISL = IW + ID
      JW = 3*J - 2
      CONST = 2.0 +
     .	 3.0*(DXI*(X(I)-X(K)) + DYI*(Y(I)-Y(K)))/(DXI*DXI + DYI*DYI)
      DO 22 L = 2,7
      BEND = W(ISL,L) + W(J+9,L) + CONST*W(K+9,L)
      W(ISL,L) = BEND
      W(IW,L) = W(IW,L) + BEND
   22 W(JW,L) = W(JW,L) - BEND
      DO 26 I = 1,3
      IJ = 3*I - 2
      DX1 = X(I+1) - X(I)
      DX2 = X(I+2) - X(I)
      DY1 = Y(I+1) - Y(I)
      DY2 = Y(I+2) - Y(I)
      DO 26 L = 1,6
      L1 = L + 1
      W(IJ,L) = W(IJ,L1)
      W(IJ+1,L) = DX1*W(IJ+1,L1) + DX2*W(IJ+2,L1)
   26 W(IJ+2,L) = DY1*W(IJ+1,L1) + DY2*W(IJ+2,L1)
C
C*** NAGWA KHALIL'S EXTRA BUBBLE FUNCTION, TO RELAX ELEMENT.
C
      E12 = XITA(1)*XITA(2)
      E23 = XITA(2)*XITA(3)
      E31 = XITA(3)*XITA(1)
      Y23 = Y(2) - Y(3)
      Y31 = Y(3) - Y(1)
      Y12 = Y(1) - Y(2)
      X32 = X(3) - X(2)
      X13 = X(1) - X(3)
      X21 = X(2) - X(1)
C      D12 = -4.0 + 6.0*XITA(1) + 6.0*XITA(2)
C      D23 = -4.0 + 6.0*XITA(2) + 6.0*XITA(3)
C      D13 = -4.0 + 6.0*XITA(1) + 6.0*XITA(3)
      D12 = 6.0*(XITA(1)-XITA(2))
      D23 = 6.0*(XITA(2)-XITA(3))
      D13 = 6.0*(XITA(3)-XITA(1))
      W(10,1) = 0.0
      W(10,2) = 0.0
      W(10,3) = 0.0
      W(10,4) = (D23*Y23*Y23 + D13*Y31*Y31 + D12*Y12*Y12)/(DET*DET)
      W(10,5) = (D23*X32*X32 + D13*X13*X13 + D12*X21*X21)/(DET*DET)
      W(10,6) = (D23*Y23*X32 + D13*Y31*X13 + D12*Y12*X21)/(DET*DET)*2.0
      RETURN
      END
C
C
C
      SUBROUTINE SHELL(COORD,ELCORD, ELOAD, ELSTIF, IPROP, JPROP, LCOEF,
     .		      LNODS, LNODZ, LNOMAX, LPOP, LVABZ, LVMAX, MAXTRS,
     .	 NDIM, NEL, NELZ, NEWRHS, NFIRST, NODMAX, NROWST, NSTRES,
     .	 STRESM, VPROP)
C3596
C*** THE SEMILOOF ELEMENT WITH 2X2 GAUSS AND STRESSES AT THE SAME POINTS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ELCORD(9,4), ELOAD(LVMAX,NEWRHS), ELSTIF(LCOEF),
     .	 LNODS(LNOMAX,NELZ), STRESM(NROWST,MAXTRS), VPROP(IPROP,JPROP),
     .	 COORD(NODMAX,NDIM)
      COMMON/SHEL/AREA, FRAM(3,3), POIN(3), SIDE, THIK,
     .	 WCORN(10,3), WLOOF(10,3), WSHEL(13,45)
      DIMENSION B(6,32), BV(192), DB(6), DMOD(6,6), XGAUS(4,4), XITA(2)
      EQUIVALENCE (B(1,1),BV(1)), (DB(1),P), (DB(2),Q), (DB(3),R),
     .	 (DB(4),S), (DB(5),T), (DB(6),H)
      DATA XGAUS/0., 4*.5, 0., 2*.5, -.577350269, 2*.577350269,
     .	 3*-.577350269, 2*.577350269/
C
C*** EXTRACT ALL THE RELEVANT MATERIAL PROPERTIES, FROM THE GIVEN LISTS.
C
      YMOD = VPROP(1,LPOP)
      POIS = VPROP(2,LPOP)
      DENSTY = VPROP(3,LPOP)
      PRESS = VPROP(4,LPOP)
      WRITE(6,600) YMOD, POIS, DENSTY, PRESS
 600  FORMAT(/17H YOUNGS MODULUS =,F13.6,10X,17H POISSONS RATIO =,F5.3,
     .	 10X,9HDENSITY =,F10.8,10X,10HPRESSURE =,F12.6)
C
C*** FOR DEMONSTRATION PURPOSES ONLY, WE PUT THE NODAL THICKNESSES EQUAL
C
      DO 4 NOD = 1,LNODZ
      ELCORD(NOD,4) = VPROP(5,LPOP)
C
C*** WE COLLECT THE NODAL COORDINATES FOR THE ELEMENT ALSO IN THIS ARRAY
      DO 4 ND = 1,NDIM
      NODE = IABS(LNODS(NOD,NEL))
    4 ELCORD(NOD,ND) = COORD(NODE,ND)
      WRITE(6,602) (LNODS(NOD,NEL),
     .	 (ELCORD(NOD,J), J = 1,4), NOD = 1,LNODZ)
 602  FORMAT(/5H NODE,6X,1HX,12X,1HY,12X,1HZ,8X,9HTHICKNESS//
     .	 (1X,I3,4F13.7))
C
C*** CALL THE SHAPE FUNCTION SUBROUTINE AT THE CURRENT INTEGRATING POINT
C
      IGAUSZ = LVABZ/8
      DO 22 IGAUS = 1,IGAUSZ
      DO 8 IXY = 1,2
    8 XITA(IXY) = XGAUS(IGAUS,IXY+LNODZ-6)
      CALL HALOOF(ELCORD, LNODS, LNODZ, LVABZ, LNOMAX, NEL, NELZ, XITA)
C
C*** CREATE MODULUS MATRIX, ALREADY MULTIPLIED BY ITS INTEGRATING FACTOR
C
      DO 10 N = 1,36
   10 DMOD(N,1) = 0.0
      PLANE = YMOD*THIK*AREA/(1.0-POIS*POIS)
      DMOD(1,1) = PLANE
      DMOD(2,1) = PLANE*POIS
      DMOD(1,2) = PLANE*POIS
      DMOD(2,2) = PLANE
      DMOD(3,3) = PLANE*0.5*(1.0-POIS)
      BEND = PLANE*THIK*THIK/12.0
      DMOD(4,4) = BEND
      DMOD(5,4) = BEND*POIS
      DMOD(4,5) = BEND*POIS
      DMOD(5,5) = BEND
      DMOD(6,6) = BEND*0.5*(1.0-POIS)
C
C*** ACCUMULATE FIRST THE GRAVITY LOADS, THEN THOSE FROM NORMAL PRESSURE
C
      NST = 0
      WEIGHT = AREA*THIK*DENSTY
      DO 20 JVAB = 1,LVABZ
      GASH = ELOAD(JVAB,1)
      DO 12 I = 1,3
   12 GASH = GASH + WEIGHT*FRAM(3,I)*WSHEL(I,JVAB)
      ELOAD(JVAB,1) = GASH + PRESS*AREA*WSHEL(3,JVAB)
C
C*** AND WE NOW GENERATE THE MATRIX B, USING THE DERIVATIVES FROM WSHEL.
C
      B(1,JVAB) = WSHEL(4,JVAB)
      B(2,JVAB) = WSHEL(7,JVAB)
      B(3,JVAB) = WSHEL(5,JVAB) + WSHEL(6,JVAB)
      B(4,JVAB) = WSHEL(10,JVAB)
      B(5,JVAB) = WSHEL(12,JVAB)
      B(6,JVAB) = 2.0*WSHEL(11,JVAB)
C
C*** DB THEN LEADS TO ELSTIF AND STRESM, EXACTLY AS IN SUBROUTINE BEAM.
C
      DO 16 I = 1,6
      GASH = 0.0
      DO 14 K = 1,6
   14 GASH = GASH + DMOD(K,I)*B(K,JVAB)
      DB(I) = GASH
   16 STRESM(JVAB,I) = GASH/AREA
C
C*** ONE STATEMENT INSTEAD OF INNERMOST LOOP CAN SAVE FIFTH OF THE COST.
C
      JDEL = 1
      DO 18 IVAB = 1,JVAB
      ELSTIF(NST+IVAB) = ELSTIF(NST+IVAB) + P*BV(JDEL) + Q*BV(JDEL+1)
     .	 + R*BV(JDEL+2) + S*BV(JDEL+3) + T*BV(JDEL+4) + H*BV(JDEL+5)
   18 JDEL = JDEL + 6
   20 NST = NST + JVAB
   22 WRITE(7) NSTRES, LVABZ, STRESM, POIN, FRAM
      RETURN
      END
C
      SUBROUTINE HALOOF(ELCORD, LNODS, LNODZ, LVABZ, LNOMAX, NEL, NELZ,
     .	 XITA)
C3708
C*** TO CREATE SHAPE FUNCTION ARRAY WSHEL, FOR SEMILOOF SHELL ELEMENT.
C
C*** TENTATIVELY WRITTEN, BY BRUCE IRONS, JULY 1972, IN WASHINGTON D.C.
C
C*** FINALLY CLEARED OF BUGS, OCTOBER 1973, SWANSEA UNIVERSITY, WALES.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION LNODS(LNOMAX,NELZ)
      COMMON/SHEL/AREA, FRAM(3,3), POIN(3), SIDE, THIK,
     .	 WCORN(10,3), WLOOF(10,3), WSHEL(13,45)
      DIMENSION AREAV(3), ELCORD(9,4), FRAME(3,3), GENSID(6,4),
     .	 POINT(3), SHEAR(11,43), SIGT(3), SWOP(6), THIKDD(3,3),
     .	 TRANS(2,2), VLOOF(3,36), XGAUS(4,4), XILOOF(9,4), XITA(2),
     .	 XLOCAL(3), XYZDD(3,3), XYZPRE(8,4)
      EQUIVALENCE (T11,TRANS(1,1)), (T12,TRANS(1,2)),
     .	 (T21,TRANS(2,1)), (T22,TRANS(2,2))
      DATA GENSID/1., -1., 0., 3*-.5, 0., 1., -1., 4*1., 0., -1.,
     1	 4*0., 1., 0., -1., 2*1./,XILOOF/.211324866, 2*.788675134,
     2	 .211324866, 2*0., .3333333333, 4*0., .211324866, 2*.788675134,
     3	 .211324866, .3333333333, 2*0., -.577350269, .577350269, 2*1.,
     4	 .577350269, -.577350269, 2*-1., 0., 2*-1., -.577350269,
     5	 .577350269, 2*1., .577350269, -.577350269, 0. /,
     6	 XGAUS/0., 4*.5, 0., 2*.5, -.577350269, 2*.577350269,
     7	 3*-.577350269, 2*.577350269/, XYZPRE/32*0.0/, NOZPRE/0/
      DO 1 I = 1,585
    1 WSHEL(I,1) = 0.0
C
C*** GENERATE NSTAGE TO DEFINE PATH THROUGH HALOOF.
C
      N   ERROR = 1
      IF((LNODZ.NE.6.AND.LNODZ.NE.8). OR .LVABZ.NE.LNODZ*4) GO TO 99
      NSTAGE = 4
      IF(NFIRST.EQ.0) GO TO 18
      NSTAGE = 2
C
C*** INITIALIZATION FOR NEW ELEMENT, NSTAGE = 1. FIND CENTRE COORDINATES
C
      LIMZ = (3*LNODZ)/2 - 1
      LNODZA = LNODZ + 1
      LVABZA = LVABZ + 1
      LVABZZ = LVABZ + LIMZ
      DO 3 L = LNODZA,LIMZ
      DO 3 J = 1,LVABZZ
    3 SHEAR(L,J) = 0.0
      DO 5 NX = 1,4
      GASH = 0.0
      LNODZH = LNODZ/2
      DO 4  KORN =  1, LNODZH
      DO 4 K = 1,2
    4 GASH = GASH
     .	 + 8.0*ELCORD(2*KORN+K-2,NX)/FLOAT(216*K-408-LNODZ*(21*K-41))
    5 ELCORD(9,NX) = GASH
C
C*** DIAGNOSTICS FOR A NEW ELEMENT. RELATE COORDINATES TO CENTRE.
C
      DO 10 I = 1, LNODZ
      N   ERROR = 2
      IF(ELCORD(I,4).LE.0.0) GO TO 99
      IF(I.EQ.LNODZ) GO TO 9
      JA = I + 1
      DO 8 J = JA, LNODZ
      N   ERROR = 3
      IF(IABS(LNODS(I,NEL)).EQ.IABS(LNODS(J,NEL))) GO TO 99
      DO 7 K = 1,3
      IF(ELCORD(I,K).NE.ELCORD(J,K)) GO TO 8
    7 CONTINUE
      N   ERROR = 4
      GO TO 99
    8 CONTINUE
    9 DO 10 NX = 1,4
      IF(NX.NE.4) ELCORD(I,NX) = ELCORD(I,NX) - ELCORD(9,NX)
   10 XYZPRE(I,NX) = ELCORD(I,NX)
      NFIRST = 0
C     WRITE(6,600) ((ELCORD(I,J), J = 1,4), I = 1, LNODZ)
C600  FORMAT(/11X,1HX,12X,1HY,12X,1HZ,12X,1HT/(4X,4F13.7))
C
C*** CREATE SWOP = 1.0 OR -1.0, TO IMPLEMENT SIGN CHANGES AT LOOF NODES.
C
C*** ALSO INTERPOLATE TO ESTIMATE NORMAL THICKNESSES AT LOOF NODES.
C
      VLOOF(1,LVABZA) = ELCORD(9,4)
      DO 12 NSIDE = 1,6
   12 SWOP(NSIDE) = 1.0
      LAST = LNODZ - 1
      DO 14 NEXT = 1, LNODZ, 2
      MID = LAST + 1
      IF(IABS(LNODS(NEXT,NEL)).LT.IABS(LNODS(LAST,NEL)))
     .	 SWOP(MID/2) = -1.0
      VLOOF(1,4*LAST-3) = .455341801D0*ELCORD(LAST,4)
     .	 + .666666667D0*ELCORD(MID,4)-.122008468D0*ELCORD(NEXT,4)
      VLOOF(1,4*MID-3) = -.122008468D0*ELCORD(LAST,4)
     .	 + .666666667D0*ELCORD(MID,4)+.455341801D0*ELCORD(NEXT,4)
C
C*** ALSO CHECK THAT MIDSIDE NODES ARE REASONABLY CENTRAL.
C
      GASH = 0.0
      GISH = 0.0
      GUSH = 0.0
      DO 13 I = 1,3
      ELMID = ELCORD(MID,I)
      GASH = GASH + (ELCORD(NEXT,I)-ELMID)**2
      GISH = GISH + (ELCORD(LAST,I)-ELMID)**2
   13 GUSH = GUSH + (ELCORD(LAST,I)+ELCORD(NEXT,I)-ELMID-ELMID)**2
      N   ERROR = 5
      IF(ABS(GASH - GISH).GT.0.040*(GASH + GISH)) GO TO 99
      N   ERROR = 6
      IF(GUSH.GT.0.25*(GASH + GISH)) GO TO 99
   14 LAST = NEXT
C     WRITE(6,602) SWOP, (VLOOF(1,I), I = 1, LVABZA, 4)
C602  FORMAT(/7H SWOP =,6F6.3//26H THICKNESSES AT LOOF NODES/1X,9F13.8)
C
C*** ORGANISE LOOP AROUND LOOF NODES, FOR NSTAGE = 2
C
C    DO 76 NSTAGE = 2,4 (IN EFFECT)
   15 NLOOF = 0
   16 NLOOF = NLOOF + 1
C    DO 67 NLOOF = 1, LNODZ+1 IF NSTAGE = 2,
C     OR DO 67 NLOOF = 1, (3*LNODZ)/2 IF NSTAGE = 3.
      DO 17 I = 1,2
      IF(NSTAGE.EQ.2. OR .NLOOF.LE.LNODZ)
     .	 XLOCAL(I) = XILOOF(NLOOF,LNODZ+I-6)
C
C*** AND ALSO AROUND INTEGRATING POINTS IF NSTAGE = 3.
C
      IF(NSTAGE.EQ.3. AND .NLOOF.GT.LNODZ)
     .	 XLOCAL(I) = XGAUS(NLOOF-LNODZ,LNODZ+I-6)
   17 CONTINUE
      GO TO 23
C
C*** OTHERWISE, ORGANISE SINGLE-SHOT OPTION, FOR NSTAGE = 4.
C
C*** TEST WHETHER INPUT POINT IS A LOOF NODE, PLUS OR MINUS 0.0001.
C
   18 DO 19 I = 1,2
   19 XLOCAL(I) = XITA(I)
      NLOOF = LNODZA
      DO 22 MAYBE = 1,LNODZ
      DO 20 I = 1,2
      IF(ABS(XLOCAL(I)-XILOOF(MAYBE,LNODZ+I-6)).GT.0.0001) GO TO 22
   20 CONTINUE
      NLOOF = MAYBE
   22 CONTINUE
C     IF(NLOOF.LE.LNODZ) WRITE(6,604) NLOOF
C604  FORMAT(/36H INPUT POINT RECOGNISED AS LOOF NODE,I3)
C
C*** CREATE VALUES AND XI,ETA DERIVATIVES OF X,Y,Z IN XYZDD, T IN THIKDD
C
   23 CONTINUE
C     WRITE(6,606) NSTAGE, NLOOF, XLOCAL
C606  FORMAT(/13H *** NSTAGE =,I2,10H,	NLOOF =,I3,7H,	XI =,F12.8,
C    .	 8H,  ETA =,F12.8)
      CALL SFR(LNODZ,LTYP,NDIM,NSTAGE,WCORN,XLOCAL)
      K = 0
      DO 27 I = 1,3
      DO 26 J = 1,3
      GASH = 0.0
      DO 24 L = 1,LNODZ
   24 GASH = GASH + WCORN(L+K,I)*ELCORD(L,J)
      XYZDD(J,I) = GASH
      IF(NSTAGE.EQ.2) GO TO 26
      GASH = 0.0
      DO 25 L = 1,LNODZA
   25 GASH = GASH + WLOOF(L+K,I)*VLOOF(J,4*L-1)
      THIKDD(J,I) = GASH
   26 CONTINUE
   27 K = 1
C     WRITE(6,608) XYZDD
C608  FORMAT(/6H XYZDD/(1X,3F15.10))
C     IF(NSTAGE.EQ.3) WRITE(6,610) THIKDD
C610  FORMAT(/7H THIKDD/(1X,3F15.10))
C
C*** CREATE VECTOR AREA = VAREA, AT GIVEN POINT XI, ETA.
C
      CALL VECTOR(XYZDD(1,2), XYZDD(1,3), AREAV(1))
      CALL SCALAR(AREAV(1), AREAV(1), AREASQ)
      N   ERROR = 7
      IF(AREASQ.EQ.0.0) GO TO 99
      AREA = SQRT(AREASQ)
C     WRITE(6,612) AREA, AREAV
C612  FORMAT(/7H AREA =,F13.10,10X,13HAREA VECTOR =,3F13.10)
C
C*** NORMALISE VECTOR AREA INTO FRAME, COL.3, AS LOCAL UNIT NORMAL Z.
C
C*** COLUMN 2 OF FRAME BECOMES UNIT Y AROUND EDGE.
C
      DO 30 I = 1,3
      FRAME(I,3) = AREAV(I)/AREA
      GASH = 0.0
      DO 29 J = 1,2
   29 GASH = GASH + GENSID((NLOOF+1)/2,LNODZ+J-6)*XYZDD(I,J+1)
   30 FRAME(I,2) = GASH
C
C*** NORMALISE Y, AND IMPLEMENT SWOP BY REVERSING SIGN OF Y.
C
C*** PUT APPROXIMATE VECTOR THICKNESS ETC. INTO VLOOF, FOR NSTAGE = 2
C
      N   ERROR = 8
      CALL SCALAR(FRAME(1,2), FRAME(1,2), SIDESQ)
      IF(SIDESQ.EQ.0.0) GO TO 99
      SIDE = SQRT(SIDESQ)
      DO 31 I = 1,3
      FRAME(I,2) = FRAME(I,2)*SWOP((NLOOF+1)/2)/SIDE
      IF(NSTAGE.NE.2) GO TO 31
      VLOOF(I,4*NLOOF-2) = FRAME(I,2)
      VLOOF(I,4*NLOOF-1) = FRAME(I,3)*VLOOF(1,4*NLOOF-3)
      VLOOF(I,4*NLOOF) = FRAME(I,3)
   31 CONTINUE
C
C*** AND COLUMN 1 IS UNIT X, THE OUTWARD POINTING IN-PLANE NORMAL.
C
      CALL VECTOR(FRAME(1,2), FRAME(1,3), FRAME(1,1))
C     WRITE(6,614) ((FRAME(J,I), I = 1,3), J = 1,3)
C614  FORMAT(/44H COLS OF FRAME ARE UNIT LOCAL CARTESIAN AXES//
C    .	 (1X,3F13.10))
C
C*** CHECK THAT NORMALS ARE REASONABLY PARALLEL, WHILE NSTAGE = 2.
C
      IF(NSTAGE.GT.2) GO TO 35
      IF(NLOOF.EQ.1) GO TO 67
      KZ = 4*NLOOF-4
      DO 32 K = 4, KZ, 4
      CALL VECTOR(VLOOF(1,4*NLOOF), VLOOF(1,K), POINT(1))
      CALL SCALAR(POINT(1), POINT(1), COSSQ)
      N   ERROR = 9
      IF(COSSQ.GT.0.75) GO TO 99
   32 CONTINUE
C
C*** PLACE CONTRIBUTION OF CENTRAL NODE IN VLOOF (NSTAGE = 2 ONLY)
C
C*** COMPLETE LOOP NLOOF = 1 TO LNODZ+1 FOR NSTAGE = 2.
C
      IF(NLOOF.LE.LNODZ) GO TO 67
      THIKC = VLOOF(1,LVABZA)
      DO 33 I = 1,3
      DO 33 J = 1,2
   33 VLOOF(I,LVABZ+J) = FRAME(I,J)*THIKC
      GO TO 67
C
C*** CREATE THE 2X2 JACOBIAN MATRIX, AND INVERT IT. (NSTAGE = 3 OR 4)
C
   35 DO 36 J = 1,2
      DO 36 I = 1,2
      CALL SCALAR(FRAME(1,I), XYZDD(1,J+1), TRANS(J,I))
   36 CONTINUE
C     WRITE(6,616) TRANS
C616  FORMAT(/6H TRANS/(1X,2F13.10))
      GASH = T11
      T11 = T22/AREA
      T22 = GASH/AREA
      T12 = -T12/AREA
      T21 = -T21/AREA
C     WRITE(6,616) TRANS
C
C*** TRANSFORM WCORN AND WLOOF INTO LOCAL X,Y DERIVATIVES.
C
      DO 41 N = 1,LNODZA
      DO 41 I = 1,2
      GASH = 0.0
      GISH = 0.0
      DO 40 J = 1,2
      GASH = GASH + TRANS(I,J)*WCORN(N+11,J)
   40 GISH = GISH + TRANS(I,J)*WLOOF(N+11,J)
      WCORN(N,I+1) = GASH
   41 WLOOF(N,I+1) = GISH
C     WRITE(6,618)
C618  FORMAT(/16H WCORN AND WLOOF/)
C     DO 42 I = 1,3
C  42 WRITE(6,620) (WCORN(N,I), N = 1,LNODZA)
C620  FORMAT(1X,9F13.10)
C     DO 43 I = 1,3
C  43 WRITE(6,620) (WLOOF(N,I), N = 1,LNODZA)
C
C*** PUT THICKNESS AND DERIVATIVES INTO LOCAL COORDINATE SYSTEM.
C
      DO 45 I = 1,3
      DO 44 J = 1,2
      POINT(J) = 0.0
      DO 44 K = 1,2
   44 POINT(J) = POINT(J) + TRANS(J,K)*THIKDD(I,K+1)
      DO 45 J = 1,2
   45 THIKDD(I,J+1) = POINT(J)
      DO 48 J = 1,3
      DO 47 I = 1,3
      CALL SCALAR(THIKDD(1,J), FRAME(1,I), POINT(I))
   47 CONTINUE
      DO 48 I = 1,3
   48 THIKDD(I,J) = POINT(I)
C     WRITE(6,622) THIKDD
C622  FORMAT(/17H THICKNESS VECTOR,3F12.7//17H X-DERIVATIVES   ,3F12.7//
C    .	 17H Y-DERIVATIVES   ,3F12.7)
      THIK = THIKDD(3,1)
      N   ERROR = 10
      IF(THIK.LE.0.0) GO TO 99
C
C*** FIND THE CHANGE IN LOCAL X,Y DERIVATIVES ACROSS THICKNESS OF SHELL.
C
      DO 57 LNOD = 1,LNODZA
      IF(NSTAGE.NE.4) GO TO 51
      DO 50 I = 2,3
      GASH = 0.0
      DO 49 J = 1,2
   49 GASH = GASH - THIKDD(J,I)*WCORN(LNOD,J+1)
   50 POINT(I) = GASH
C
C*** CREATE WSHEL = SHAPE FUNCTION ARRAY, DISPLACEMENT TERMS FIRST.
C
   51 KORN = (LNOD+1)/2
      DO 54 K = 1,3
      KOL = 2*KORN + 3*LNOD + K - 5
      IF(LNOD.GT.LNODZ) KOL = 5*LNODZ + 2 + K
      DO 53 N = 1,3
      FACT = FRAME(K,N)
      WSHEL(N,KOL) = WCORN(LNOD,1)*FACT
      IF(NSTAGE.EQ.4. AND .N.EQ.3) FACT = 0.0
      DO 53 ND = 2,3
   53 WSHEL(N+N+ND,KOL) = WCORN(LNOD,ND)*FACT
      DO 54 N = 1,2
      DO 54 ND = 2,3
      WSHEL(N+7,KOL) = WSHEL(N+7,KOL)
     .	-THIKDD(ND-1,1)*WSHEL(N+N+ND,KOL)/THIK
      IF(NSTAGE.EQ.4) WSHEL(N+N+ND+6,KOL) = (POINT(ND)*FRAME(K,N)
     .	 + THIKDD(3,ND)*WCORN(LNOD,N+1)*FRAME(K,3))/THIK
   54 CONTINUE
C
C*** INTRODUCE ROTATION TERMS WITH BENDING ACTION INTO WSHEL.
C
      DO 57 L = 1,2
      KOL = (L-1)*4*LNODZ + (2-L)*6*KORN + LNOD
      IF(LNOD.GT.LNODZ) KOL = 5*LNODZ + 3 - L
      DO 56 N = 1,2
      CALL SCALAR(VLOOF(1,4*LNOD+L-4), FRAME(1,N), FACT)
      WSHEL(N+7,KOL) = FACT*WLOOF(LNOD,1)/THIK
      IF(NSTAGE.NE.4) GO TO 56
      DO 55 ND = 2,3
   55 WSHEL(N+N+ND+6,KOL) = FACT*WLOOF(LNOD,ND)/THIK
   56 CONTINUE
   57 CONTINUE
C
C*** COMBINE LAST THREE COLUMNS OF WSHEL TO CREATE NORMAL DEFLECTION.
C
      IF(LNODZ.EQ.6) GO TO 61
      IZ = 3*NSTAGE + 1
      DO 60 I = 1,IZ
      GASH = 0.0
      DO 59 K = 1,3
   59 GASH = GASH + WSHEL(I,42+K)*VLOOF(K,4*LNODZ+4)
   60 WSHEL(I,43) = GASH
C     WRITE(6,624) (N, (WSHEL(K,N), K = 1,13), N = 1, LVABZZ)
C624  FORMAT(/15H WSHEL ORIGINAL/9X,1HU,8X,1HV,8X,1HW,8X,2HUX,7X,2HUY,
C    .	 7X,2HVX,7X,2HVY,7X,2HUZ,7X,2HVZ,6X,3HUXZ,6X,3HUYZ,6X,3HVXZ,6X,
C    .	 3HVYZ/68X,18HOR UZ+WX	OR VZ+WY/(I4,13F9.5))
   61 IF(NSTAGE.EQ.4) GO TO 86
C
C*** CREATE ARRAY SHEAR, FOR INTRODUCING THE CONSTRAINTS (NSTAGE = 3)
C
      IF(NLOOF.GT.LNODZ) GO TO 63
      DO 62 I = 1,LVABZZ
      SHEAR(NLOOF,I) = WSHEL(9,I)
      SHEAR(11,I) = SHEAR(11,I) + WSHEL(8,I)*SIDE*THIK*SWOP((NLOOF+1)/2)
   62 CONTINUE
      GO TO 67
   63 DO 66 KOL = 1,LVABZZ
      DO 66 NXY = 1,2
      GASH = SHEAR(LNODZ+NXY,KOL)
      DO 65 MXY = 1,2
      CALL SCALAR(FRAME(1,MXY), VLOOF(1,4*LNODZ+NXY), FACT)
   65 GASH = GASH + WSHEL(MXY+7,KOL)*AREA*THIK*FACT
   66 SHEAR(LNODZ+NXY,KOL) = GASH
C
C*** COMPLETE LOOP AROUND LOOF NODES ETC. TO CREATE VLOOF OR SHEAR.
C
   67 IF(NLOOF.LE.LNODZ. OR .
     .	 (NSTAGE.EQ.3. AND .NLOOF.LT.(3*LNODZ)/2)) GO TO 16
      IF(NSTAGE.NE.2) GO TO 76
C
C*** CREATE PLUS-MINUS SUM OF THICKNESS VECTORS AT LOOF NODES (NSTAGE=2)
C
      DO 70 I = 1,3
      GASH = 0.0
      DO 68 N = 3, LVABZ, 4
   68 GASH = -GASH + VLOOF(I,N)
      SIGT(I) = GASH
C
C*** AND THE 3X3 MATRIX ASSOCIATED WITH IT, STORED IN XYZDD.
C
      DO 70 J = 1,3
      GASH = 0.0
      IF(I.EQ.J) GASH = FLOAT(LNODZ)
      DO 69 N = 2, LVABZ, 4
   69 GASH = GASH - VLOOF(I,N)*VLOOF(J,N)
   70 XYZDD(I,J) = GASH
C     WRITE(6,626) SIGT, XYZDD
C626  FORMAT(/24H PLUS-MINUS ERROR VECTOR,3F12.8//
C    .	 25H MATRIX FOR CORRECTING IT,3F12.8,2(/25X,3F12.8))
C
C*** GET THE ADJUGATE OF THIS 3X3 SYMMETRIC POSITIVE DEFINITE MATRIX.
C
      K = 3
      DO 71 I = 1,3
      CALL VECTOR(XYZDD(1,I), XYZDD(1,6-I-K), FRAME(1,K))
   71 K = I
      CALL SCALAR(XYZDD(1,1), FRAME(1,1), DETERM)
      DO 73 I = 1,3
      CALL SCALAR(FRAME(1,I), SIGT(1), PROD)
   73 POINT(I) = PROD/DETERM
C     WRITE(6,628) FRAME, POINT
C628  FORMAT(/9H ADJUGATE,3(/1X,3F12.8)//10H SOLUTIONS,3F12.8)
C
C*** CORRECT VECTOR THICKNESSES IN VLOOF.
C
      FACT = 1.0
      DO 75 N = 2,LVABZ,4
      FACT = -FACT
      CALL SCALAR(POINT(1), VLOOF(1,N), PROD)
      DO 74 I = 1,3
   74 VLOOF(I,N+1) = VLOOF(I,N+1)-FACT*(POINT(I)-PROD*VLOOF(I,N))
C
C*** CREATE DIFFERENTIAL DISPLACEMENT VECTORS TO DEFINE ROTATIONS.
C
C*** THIS COMPLETES WORK FOR NSTAGE = 2.
C
      TFIRST = VLOOF(1,N-1)
      CALL VECTOR(VLOOF(1,N), VLOOF(1,N+1), VLOOF(1,N-1))
      DO 75 I = 1,3
   75 VLOOF(I,N) = VLOOF(I,N)*TFIRST
C     NZ = 4*LNODZA
C     WRITE(6,630) (N, (VLOOF(I,N), I = 1,3), N = 1,NZ)
C630  FORMAT(/6H VLOOF/(1X,I3,6X,3F15.10))
      NSTAGE = 3
      GO TO 15
   76 CONTINUE
C     WRITE(6,632)
C632  FORMAT(/6H SHEAR)
C     DO 77 N = 1,LVABZZ
C  77 WRITE(6,634) N, (SHEAR(I,N), I = 1,LIMZ)
C634  FORMAT(I4,11F10.6)
C
C*** SHEAR HAS BEEN CREATED IN NLOOF LOOP FOR NSTAGE = 3.
C
C*** CHOOSE PIVOT FOR REDUCING ARRAY SHEAR, AND DO ROW INTERCHANGE.
C
      DO 83 LIM = 1,LIMZ
      KP = LVABZ + LIM
      PIVOT = 0.0
      DO 79 L = LIM,LIMZ
      IF(ABS(PIVOT).GT.ABS(SHEAR(L,KP))) GO TO 79
      LBIG = L
      PIVOT = SHEAR(LBIG,KP)
   79 CONTINUE
      DO 80 K = 1,LVABZZ
      CHANGE = SHEAR(LBIG,K)
      SHEAR(LBIG,K) = SHEAR(LIM,K)
   80 SHEAR(LIM,K) = CHANGE/PIVOT
C
C*** REDUCE ARRAY SHEAR TO CREATE CONSTRAINT MATRIX,
C
C*** THIS COMPLETES WORK FOR NSTAGE = 3.
C
      DO 82 NROW = 1,LIMZ
      FACT = SHEAR(NROW,KP)
      IF(NROW.EQ.LIM. OR .FACT.EQ.0.0) GO TO 82
      DO 81 KOL = 1,LVABZZ
   81 SHEAR(NROW,KOL) = SHEAR(NROW,KOL)-FACT*SHEAR(LIM,KOL)
   82 CONTINUE
   83 CONTINUE
C     WRITE(6,636)
C636  FORMAT(/22H SHEAR AFTER REDUCTION)
C     DO 85 N = 1,LVABZZ
C  85 WRITE(6,634) N, (SHEAR(I,N), I = 1,LIMZ)
      NSTAGE = 4
      GO TO 18
C
C*** USE ARRAY SHEAR TO CONSTRAIN WSHEL AT THE GIVEN POINT XI,ETA.
C
   86 DO 88 I = 1,LVABZ
      DO 88 J = 1,13
      GASH = WSHEL(J,I)
      DO 87 K = 1,LIMZ
   87 GASH = GASH - WSHEL(J,K+LVABZ)*SHEAR(K,I)
   88 WSHEL(J,I) = GASH
C     WRITE(6,638)
C638  FORMAT(/18H WSHEL CONSTRAINED)
C     DO 89 N = 1,LVABZ
C  89 WRITE(6,640) N, (WSHEL(J,N), J = 1,13)
C640  FORMAT(I4,13F9.5)
C
C*** IMPLEMENT SWOP TO EXCHANGE TWO NORMAL SLOPES.
C
      DO 92 N = 8, LVABZ, 8
      IF(SWOP(N/8).EQ.1.0) GO TO 92
      DO 91 J = 1,13
      CHANGE = WSHEL(J,N)
      WSHEL(J,N) = WSHEL(J,N-1)
   91 WSHEL(J,N-1) = CHANGE
   92 CONTINUE
C     WRITE(6,642)
C642  FORMAT(/14H WSHEL SWOPPED)
C     DO 94 N = 1,LVABZ
C  94 WRITE(6,640) N, (WSHEL(J,N), J = 1,13)
C
C*** ASSEMBLE UXZ, UYZ, VXZ, VYZ TO CREATE WXX, WXY, WYY.
C
C     WRITE(6,644)
C644  FORMAT(/30H WSHEL WITH SECOND DERIVATIVES)
      DO 96 N = 1,LVABZ
      WSHEL(10,N) = -WSHEL(10,N)
      WSHEL(11,N) = -0.5*(WSHEL(11,N)+WSHEL(12,N))
      WSHEL(12,N) = -WSHEL(13,N)
C     WRITE(6,640) N, (WSHEL(J,N), J = 1,12)
   96 CONTINUE
C
C*** PUT POIN, FRAM IN COMMON, ALSO AREA, SIDE, WITH INTEGRATING FACTORS
C
      AREA = AREA*(FLOAT(LNODZ)-5.6)/2.4
      SIDE = SIDE*FLOAT(LNODZ-4)/4.0
      DO 98 I = 1,3
      POIN(I) = XYZDD(I,1) + ELCORD(9,I)
      DO 98 J = 1,3
   98 FRAM(I,J) = FRAME(I,J)
      RETURN
C
C*** WRITE DIAGNOSTIC ERROR MESSAGE.
C
   99 WRITE(6,699) NERROR
 699  FORMAT(/6H ERROR,I5,18H IN SEGMENT HALOOF)
      STOP
      END
C****************************************************************************
      SUBROUTINE ISOP(CJAC,CJACI,DETJ,ELXYZ,LNODZ,LNODZZ,LTYP,
     .	NDIM,NEL,NSTAGE,POINT,TEMP,W,WDIF,XITA)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C*** FINDS ISOPARAMETRIC SHAPE FUNCTIONS AND THEIR X-Y-Z DERIVATIVES
C*** AT GIVEN XI-ETA POINT FOR 4-NODE QUAD AND 8-NODE BRICK
C*** WRITTEN BY MATTI J., NOV 1980
C
      DIMENSION ELXYZ(NDIM,LNODZ),POINT(NDIM),
     . TEMP(LNODZZ),W(LNODZZ),WDIF(NDIM,LNODZZ),CJAC(NDIM,NDIM),
     . CJACI(NDIM,NDIM),XITA(NDIM)
      DIMENSION BPOINT(8,3)
      DATA BPOINT
     ./-1.0D0,1.0D0,1.0D1,-1.0D0,-1.0D0,1.0D0,1.0D0,-1.0D0,
     . -1.0D0,-1.0D0,1.0D0,1.0D0,-1.0D0,-1.0D0,1.0D0,1.0D0,
     . -1.0D0,-1.0D0,-1.0D0,-1.0D0,1.0D0,1.0D0,1.0D0,1.0D0/
C
C*** SOME EARLY DIAGNOSTICS
C

      IF(LTYP.EQ.4 .AND. NDIM.NE.2) GOTO 999
      IF(LTYP.EQ.5 .AND. NDIM.NE.3) GOTO 999
      IF(LTYP.EQ.4 .AND. LNODZ.NE.4) GOTO 999
      IF(LTYP.EQ.5 .AND. LNODZ.NE.8) GOTO 999
      IF(LTYP.EQ.6 .AND. NDIM.NE.2) GOTO 999
      IF(LTYP.EQ.6 .AND. LNODZ.NE.4) GOTO 999
      DO 2 I=1,NDIM
      IF(ABS(XITA(I)).GT.1.0000000D0) GOTO 999
    2 CONTINUE
C
C***  THE VALUES OF SHAPE FUNC AND XI ETA DERIVATIVES
C
      XLNO = FLOAT(LNODZ)
      DO 4I=1,LNODZ
      XII  = BPOINT(I,1)
      ETAI = BPOINT(I,2)
      ZETAI= BPOINT(I,3)
      IF(NDIM.EQ.2) ZETAI = 0.00D0
      W(I)=(1.0D0+XII*XITA(1))*(1.0D0+ETAI*XITA(2))*
     .	   (1.0D0+ZETAI*XITA(3))/XLNO
      WDIF(1,I+1) = XII*(1.0D0+ETAI*XITA(2))*
     .		    (1.0D0+ZETAI*XITA(3))/XLNO
      WDIF(2,I+1) = ETAI*(1.0D0+XII*XITA(1))*(1.0D0+ZETAI*XITA(2))/XLNO
      IF(NDIM .EQ. 2) GOTO 4
      WDIF(3,I+1) = ZETAI*(1.0D0+XII*XITA(1))*(1.0D0+ETAI*XITA(2))/XLNO
    4 CONTINUE
C
      DO 10 I=1,NDIM
       GASH = 0.0D0
       TEMP(LNODZZ) = 0.0D0
       DO 6 NOD=1,LNODZ
	GASH=GASH+W(NOD)*ELXYZ(I,NOD)
    6	POINT(I) = GASH
C
C***  COMPUTE AND INVERT THE JACOBIAN, CJAC, CJACI
C
       DO 10 J = 1,NDIM
       GASH = 0.0D0
       DO 8 K = 1,LNODZ
    8	GASH = GASH+WDIF(I,K+1)*ELXYZ(J,K)
   10 CJAC(I,J) = GASH
C      WRITE(6,604)  TEMP(LNODZZ), (POINT(I), I=1,NDIM)
C 604 FORMAT(//' TEMPERATURE= ',F10.5,' POINT= ',3F10.5)
C
      NDIMSQ = NDIM*NDIM
      CALL MATINV(CJAC,CJACI,NDIM,DETJ)
      IF(DETJ .LE. 0.0D0) GOTO 999
C
      IF(NSTAGE .EQ. 2) RETURN
C
C*** TRANSFORM WDIF INTO GLOBAL DIRECTIONS
C
      DO 24 N=2,LNODZZ
      DO 24 I=1,NDIM
      GASH=0.0D0
      DO 22 J=1,NDIM
   22 GASH=GASH+WDIF(J,N)*CJACI(I,J)
   24 WDIF(I,N-1) = GASH
C
      RETURN
C
C*** WRITE DIAGNOSTICS IF NECESSARY
C
  999 WRITE(6,608) NEL,LTYP,NDIM,(XITA(I), I=1,NDIM)
  608 FORMAT('   ELEM NO =',I5,' LTYP =',I2,' NDIM =',I2,
     .	' XI ETA ZETA =',3F12.6)
      STOP 222
      END
